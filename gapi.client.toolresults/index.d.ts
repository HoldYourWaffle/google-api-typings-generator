// Type definitions for non-npm package Cloud Tool Results API v1 1.0
// Project: https://firebase.google.com/docs/test-lab/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://toolresults.googleapis.com/$discovery/rest?version=v1
// Revision: 20200226

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Tool Results API v1 */
    function load(name: "toolresults", version: "v1"): PromiseLike<void>;
    function load(name: "toolresults", version: "v1", callback: () => any): void;

    namespace toolresults {
        interface ANR {
            /**
             * The stack trace of the ANR crash.
             * Optional.
             */
            stackTrace?: StackTrace;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AvailableDeepLinks {
        }
        interface BlankScreen {
            /** The screen id of the element */
            screenId?: string;
        }
        interface CrashDialogError {
            /** The name of the package that caused the dialog. */
            crashPackage?: string;
        }
        interface EncounteredLoginScreen {
            /** Number of encountered distinct login screens. */
            distinctScreens?: number;
            /** Subset of login screens. */
            screenIds?: string[];
        }
        interface EncounteredNonAndroidUiWidgetScreen {
            /** Number of encountered distinct screens with non Android UI widgets. */
            distinctScreens?: number;
            /** Subset of screens which contain non Android UI widgets. */
            screenIds?: string[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface FailedToInstall {
        }
        interface FatalException {
            /**
             * The stack trace of the fatal exception.
             * Optional.
             */
            stackTrace?: StackTrace;
        }
        interface InAppPurchasesFound {
            /**
             * The total number of in-app purchases flows explored: how many times the
             * robo tries to buy a SKU.
             */
            inAppPurchasesFlowsExplored?: number;
            /** The total number of in-app purchases flows started. */
            inAppPurchasesFlowsStarted?: number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface InsufficientCoverage {
        }
        interface IosAppCrashed {
            /**
             * The stack trace, if one is available.
             * Optional.
             */
            stackTrace?: StackTrace;
        }
        // tslint:disable-next-line:no-empty-interface
        interface LauncherActivityNotFound {
        }
        interface NativeCrash {
            /**
             * The stack trace of the native crash.
             * Optional.
             */
            stackTrace?: StackTrace;
        }
        interface NonSdkApi {
            /** The signature of the Non-SDK API */
            apiSignature?: string;
            /** Example stack traces of this API being called. */
            exampleStackTraces?: string[];
            /** Optional debugging insights for non-SDK API violations. */
            insights?: NonSdkApiInsight[];
            /** The total number of times this API was observed to have been called. */
            invocationCount?: number;
            /** Which list this API appears on */
            list?: string;
        }
        interface NonSdkApiInsight {
            /**
             * Optional sample stack traces, for which this insight applies (there
             * should be at least one).
             */
            exampleTraceMessages?: string[];
            /**
             * A unique ID, to be used for determining the effectiveness of this
             * particular insight in the context of a matcher. (required)
             */
            matcherId?: string;
            /**
             * An insight indicating that the hidden API usage originates from a
             * Google-provided library.
             */
            pendingGoogleUpdateInsight?: PendingGoogleUpdateInsight;
            /**
             * An insight indicating that the hidden API usage originates from the
             * use of a library that needs to be upgraded.
             */
            upgradeInsight?: UpgradeInsight;
        }
        interface NonSdkApiUsageViolation {
            /** Signatures of a subset of those hidden API's. */
            apiSignatures?: string[];
            /** Total number of unique hidden API's accessed. */
            uniqueApis?: number;
        }
        interface NonSdkApiUsageViolationReport {
            /** Examples of the detected API usages. */
            exampleApis?: NonSdkApi[];
            /** Minimum API level required for the application to run. */
            minSdkVersion?: number;
            /** Specifies the API Level on which the application is designed to run. */
            targetSdkVersion?: number;
            /** Total number of unique Non-SDK API's accessed. */
            uniqueApis?: number;
        }
        interface OverlappingUIElements {
            /** Resource names of the overlapping screen elements */
            resourceName?: string[];
            /** The screen id of the elements */
            screenId?: string;
        }
        interface PendingGoogleUpdateInsight {
            /** The name of the Google-provided library with the non-SDK API dependency. */
            nameOfGoogleLibrary?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface PerformedGoogleLogin {
        }
        interface PerformedMonkeyActions {
            /** The total number of monkey actions performed during the crawl. */
            totalActions?: number;
        }
        interface RoboScriptExecution {
            /** The number of Robo script actions executed successfully. */
            successfulActions?: number;
            /** The total number of actions in the Robo script. */
            totalActions?: number;
        }
        interface StackTrace {
            /**
             * The stack trace message.
             *
             * Required
             */
            exception?: string;
        }
        interface StartActivityNotFound {
            action?: string;
            uri?: string;
        }
        interface UIElementTooDeep {
            /** The depth of the screen element */
            depth?: number;
            /** The screen id of the element */
            screenId?: string;
            /** The screen state id of the element */
            screenStateId?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface UnspecifiedWarning {
        }
        interface UnusedRoboDirective {
            /** The name of the resource that was unused. */
            resourceName?: string;
        }
        interface UpgradeInsight {
            /** The name of the package to be upgraded. */
            packageName?: string;
            /**
             * The suggested version to upgrade to.
             * Optional: In case we are not sure which version solves this problem
             */
            upgradeToVersion?: string;
        }
        interface UsedRoboDirective {
            /** The name of the resource that was used. */
            resourceName?: string;
        }
        interface UsedRoboIgnoreDirective {
            /** The name of the resource that was ignored. */
            resourceName?: string;
        }
    }
}
