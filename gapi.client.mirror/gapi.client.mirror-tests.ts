/* This is stub file for gapi.client.mirror definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('mirror', 'v1', () => {
        /** now we can use gapi.client.mirror */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View your location */
            'https://www.googleapis.com/auth/glass.location',
            /** View and manage your Glass timeline */
            'https://www.googleapis.com/auth/glass.timeline',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Inserts a new account for a user */
        await gapi.client.mirror.accounts.insert({
            accountName: "Test string",
            accountType: "Test string",
            userToken: "Test string",
        }, {
            authTokens: [
                {
                    authToken: "Test string",
                    type: "Test string",
                }            ],
            features: [
                "Test string"            ],
            password: "Test string",
            userData: [
                {
                    key: "Test string",
                    value: "Test string",
                }            ],
        });
        /** Deletes a contact. */
        await gapi.client.mirror.contacts.delete({
            id: "Test string",
        });
        /** Gets a single contact by ID. */
        await gapi.client.mirror.contacts.get({
            id: "Test string",
        });
        /** Inserts a new contact. */
        await gapi.client.mirror.contacts.insert({
        }, {
            acceptCommands: [
                {
                    type: "Test string",
                }            ],
            acceptTypes: [
                "Test string"            ],
            displayName: "Test string",
            id: "Test string",
            imageUrls: [
                "Test string"            ],
            kind: "Test string",
            phoneNumber: "Test string",
            priority: 42,
            sharingFeatures: [
                "Test string"            ],
            source: "Test string",
            speakableName: "Test string",
            type: "Test string",
        });
        /** Retrieves a list of contacts for the authenticated user. */
        await gapi.client.mirror.contacts.list({
        });
        /** Updates a contact in place. This method supports patch semantics. */
        await gapi.client.mirror.contacts.patch({
            id: "Test string",
        }, {
            acceptCommands: [
                {
                    type: "Test string",
                }            ],
            acceptTypes: [
                "Test string"            ],
            displayName: "Test string",
            id: "Test string",
            imageUrls: [
                "Test string"            ],
            kind: "Test string",
            phoneNumber: "Test string",
            priority: 42,
            sharingFeatures: [
                "Test string"            ],
            source: "Test string",
            speakableName: "Test string",
            type: "Test string",
        });
        /** Updates a contact in place. */
        await gapi.client.mirror.contacts.update({
            id: "Test string",
        }, {
            acceptCommands: [
                {
                    type: "Test string",
                }            ],
            acceptTypes: [
                "Test string"            ],
            displayName: "Test string",
            id: "Test string",
            imageUrls: [
                "Test string"            ],
            kind: "Test string",
            phoneNumber: "Test string",
            priority: 42,
            sharingFeatures: [
                "Test string"            ],
            source: "Test string",
            speakableName: "Test string",
            type: "Test string",
        });
        /** Gets a single location by ID. */
        await gapi.client.mirror.locations.get({
            id: "Test string",
        });
        /** Retrieves a list of locations for the user. */
        await gapi.client.mirror.locations.list({
        });
        /** Gets a single setting by ID. */
        await gapi.client.mirror.settings.get({
            id: "Test string",
        });
        /** Deletes a subscription. */
        await gapi.client.mirror.subscriptions.delete({
            id: "Test string",
        });
        /** Creates a new subscription. */
        await gapi.client.mirror.subscriptions.insert({
        }, {
            callbackUrl: "Test string",
            collection: "Test string",
            id: "Test string",
            kind: "Test string",
            notification: {
                collection: "Test string",
                itemId: "Test string",
                operation: "Test string",
                userActions: [
                    {
                        payload: "Test string",
                        type: "Test string",
                    }                ],
                userToken: "Test string",
                verifyToken: "Test string",
            },
            operation: [
                "Test string"            ],
            updated: "Test string",
            userToken: "Test string",
            verifyToken: "Test string",
        });
        /** Retrieves a list of subscriptions for the authenticated user and service. */
        await gapi.client.mirror.subscriptions.list({
        });
        /** Updates an existing subscription in place. */
        await gapi.client.mirror.subscriptions.update({
            id: "Test string",
        }, {
            callbackUrl: "Test string",
            collection: "Test string",
            id: "Test string",
            kind: "Test string",
            notification: {
                collection: "Test string",
                itemId: "Test string",
                operation: "Test string",
                userActions: [
                    {
                        payload: "Test string",
                        type: "Test string",
                    }                ],
                userToken: "Test string",
                verifyToken: "Test string",
            },
            operation: [
                "Test string"            ],
            updated: "Test string",
            userToken: "Test string",
            verifyToken: "Test string",
        });
        /** Deletes a timeline item. */
        await gapi.client.mirror.timeline.delete({
            id: "Test string",
        });
        /** Deletes an attachment from a timeline item. */
        await gapi.client.mirror.timeline.attachments.delete({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Retrieves an attachment on a timeline item by item ID and attachment ID. */
        await gapi.client.mirror.timeline.attachments.get({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Adds a new attachment to a timeline item. */
        await gapi.client.mirror.timeline.attachments.insert({
            itemId: "Test string",
        });
        /** Returns a list of attachments for a timeline item. */
        await gapi.client.mirror.timeline.attachments.list({
            itemId: "Test string",
        });
        /** Gets a single timeline item by ID. */
        await gapi.client.mirror.timeline.get({
            id: "Test string",
        });
        /** Deletes an attachment from a timeline item. */
        await gapi.client.mirror.timeline.attachments.delete({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Retrieves an attachment on a timeline item by item ID and attachment ID. */
        await gapi.client.mirror.timeline.attachments.get({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Adds a new attachment to a timeline item. */
        await gapi.client.mirror.timeline.attachments.insert({
            itemId: "Test string",
        });
        /** Returns a list of attachments for a timeline item. */
        await gapi.client.mirror.timeline.attachments.list({
            itemId: "Test string",
        });
        /** Inserts a new item into the timeline. */
        await gapi.client.mirror.timeline.insert({
        }, {
            attachments: [
                {
                    contentType: "Test string",
                    contentUrl: "Test string",
                    id: "Test string",
                    isProcessingContent: true,
                }            ],
            bundleId: "Test string",
            canonicalUrl: "Test string",
            created: "Test string",
            creator: {
                acceptCommands: [
                    {
                        type: "Test string",
                    }                ],
                acceptTypes: [
                    "Test string"                ],
                displayName: "Test string",
                id: "Test string",
                imageUrls: [
                    "Test string"                ],
                kind: "Test string",
                phoneNumber: "Test string",
                priority: 42,
                sharingFeatures: [
                    "Test string"                ],
                source: "Test string",
                speakableName: "Test string",
                type: "Test string",
            },
            displayTime: "Test string",
            etag: "Test string",
            html: "Test string",
            id: "Test string",
            inReplyTo: "Test string",
            isBundleCover: true,
            isDeleted: true,
            isPinned: true,
            kind: "Test string",
            location: {
                accuracy: 42,
                address: "Test string",
                displayName: "Test string",
                id: "Test string",
                kind: "Test string",
                latitude: 42,
                longitude: 42,
                timestamp: "Test string",
            },
            menuItems: [
                {
                    action: "Test string",
                    contextual_command: "Test string",
                    id: "Test string",
                    payload: "Test string",
                    removeWhenSelected: true,
                    values: [
                        {
                            displayName: "Test string",
                            iconUrl: "Test string",
                            state: "Test string",
                        }                    ],
                }            ],
            notification: {
                deliveryTime: "Test string",
                level: "Test string",
            },
            pinScore: 42,
            recipients: [
                {
                    acceptCommands: [
                        {
                            type: "Test string",
                        }                    ],
                    acceptTypes: [
                        "Test string"                    ],
                    displayName: "Test string",
                    id: "Test string",
                    imageUrls: [
                        "Test string"                    ],
                    kind: "Test string",
                    phoneNumber: "Test string",
                    priority: 42,
                    sharingFeatures: [
                        "Test string"                    ],
                    source: "Test string",
                    speakableName: "Test string",
                    type: "Test string",
                }            ],
            selfLink: "Test string",
            sourceItemId: "Test string",
            speakableText: "Test string",
            speakableType: "Test string",
            text: "Test string",
            title: "Test string",
            updated: "Test string",
        });
        /** Deletes an attachment from a timeline item. */
        await gapi.client.mirror.timeline.attachments.delete({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Retrieves an attachment on a timeline item by item ID and attachment ID. */
        await gapi.client.mirror.timeline.attachments.get({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Adds a new attachment to a timeline item. */
        await gapi.client.mirror.timeline.attachments.insert({
            itemId: "Test string",
        });
        /** Returns a list of attachments for a timeline item. */
        await gapi.client.mirror.timeline.attachments.list({
            itemId: "Test string",
        });
        /** Retrieves a list of timeline items for the authenticated user. */
        await gapi.client.mirror.timeline.list({
            bundleId: "Test string",
            includeDeleted: true,
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            pinnedOnly: true,
            sourceItemId: "Test string",
        });
        /** Deletes an attachment from a timeline item. */
        await gapi.client.mirror.timeline.attachments.delete({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Retrieves an attachment on a timeline item by item ID and attachment ID. */
        await gapi.client.mirror.timeline.attachments.get({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Adds a new attachment to a timeline item. */
        await gapi.client.mirror.timeline.attachments.insert({
            itemId: "Test string",
        });
        /** Returns a list of attachments for a timeline item. */
        await gapi.client.mirror.timeline.attachments.list({
            itemId: "Test string",
        });
        /** Updates a timeline item in place. This method supports patch semantics. */
        await gapi.client.mirror.timeline.patch({
            id: "Test string",
        }, {
            attachments: [
                {
                    contentType: "Test string",
                    contentUrl: "Test string",
                    id: "Test string",
                    isProcessingContent: true,
                }            ],
            bundleId: "Test string",
            canonicalUrl: "Test string",
            created: "Test string",
            creator: {
                acceptCommands: [
                    {
                        type: "Test string",
                    }                ],
                acceptTypes: [
                    "Test string"                ],
                displayName: "Test string",
                id: "Test string",
                imageUrls: [
                    "Test string"                ],
                kind: "Test string",
                phoneNumber: "Test string",
                priority: 42,
                sharingFeatures: [
                    "Test string"                ],
                source: "Test string",
                speakableName: "Test string",
                type: "Test string",
            },
            displayTime: "Test string",
            etag: "Test string",
            html: "Test string",
            id: "Test string",
            inReplyTo: "Test string",
            isBundleCover: true,
            isDeleted: true,
            isPinned: true,
            kind: "Test string",
            location: {
                accuracy: 42,
                address: "Test string",
                displayName: "Test string",
                id: "Test string",
                kind: "Test string",
                latitude: 42,
                longitude: 42,
                timestamp: "Test string",
            },
            menuItems: [
                {
                    action: "Test string",
                    contextual_command: "Test string",
                    id: "Test string",
                    payload: "Test string",
                    removeWhenSelected: true,
                    values: [
                        {
                            displayName: "Test string",
                            iconUrl: "Test string",
                            state: "Test string",
                        }                    ],
                }            ],
            notification: {
                deliveryTime: "Test string",
                level: "Test string",
            },
            pinScore: 42,
            recipients: [
                {
                    acceptCommands: [
                        {
                            type: "Test string",
                        }                    ],
                    acceptTypes: [
                        "Test string"                    ],
                    displayName: "Test string",
                    id: "Test string",
                    imageUrls: [
                        "Test string"                    ],
                    kind: "Test string",
                    phoneNumber: "Test string",
                    priority: 42,
                    sharingFeatures: [
                        "Test string"                    ],
                    source: "Test string",
                    speakableName: "Test string",
                    type: "Test string",
                }            ],
            selfLink: "Test string",
            sourceItemId: "Test string",
            speakableText: "Test string",
            speakableType: "Test string",
            text: "Test string",
            title: "Test string",
            updated: "Test string",
        });
        /** Deletes an attachment from a timeline item. */
        await gapi.client.mirror.timeline.attachments.delete({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Retrieves an attachment on a timeline item by item ID and attachment ID. */
        await gapi.client.mirror.timeline.attachments.get({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Adds a new attachment to a timeline item. */
        await gapi.client.mirror.timeline.attachments.insert({
            itemId: "Test string",
        });
        /** Returns a list of attachments for a timeline item. */
        await gapi.client.mirror.timeline.attachments.list({
            itemId: "Test string",
        });
        /** Updates a timeline item in place. */
        await gapi.client.mirror.timeline.update({
            id: "Test string",
        }, {
            attachments: [
                {
                    contentType: "Test string",
                    contentUrl: "Test string",
                    id: "Test string",
                    isProcessingContent: true,
                }            ],
            bundleId: "Test string",
            canonicalUrl: "Test string",
            created: "Test string",
            creator: {
                acceptCommands: [
                    {
                        type: "Test string",
                    }                ],
                acceptTypes: [
                    "Test string"                ],
                displayName: "Test string",
                id: "Test string",
                imageUrls: [
                    "Test string"                ],
                kind: "Test string",
                phoneNumber: "Test string",
                priority: 42,
                sharingFeatures: [
                    "Test string"                ],
                source: "Test string",
                speakableName: "Test string",
                type: "Test string",
            },
            displayTime: "Test string",
            etag: "Test string",
            html: "Test string",
            id: "Test string",
            inReplyTo: "Test string",
            isBundleCover: true,
            isDeleted: true,
            isPinned: true,
            kind: "Test string",
            location: {
                accuracy: 42,
                address: "Test string",
                displayName: "Test string",
                id: "Test string",
                kind: "Test string",
                latitude: 42,
                longitude: 42,
                timestamp: "Test string",
            },
            menuItems: [
                {
                    action: "Test string",
                    contextual_command: "Test string",
                    id: "Test string",
                    payload: "Test string",
                    removeWhenSelected: true,
                    values: [
                        {
                            displayName: "Test string",
                            iconUrl: "Test string",
                            state: "Test string",
                        }                    ],
                }            ],
            notification: {
                deliveryTime: "Test string",
                level: "Test string",
            },
            pinScore: 42,
            recipients: [
                {
                    acceptCommands: [
                        {
                            type: "Test string",
                        }                    ],
                    acceptTypes: [
                        "Test string"                    ],
                    displayName: "Test string",
                    id: "Test string",
                    imageUrls: [
                        "Test string"                    ],
                    kind: "Test string",
                    phoneNumber: "Test string",
                    priority: 42,
                    sharingFeatures: [
                        "Test string"                    ],
                    source: "Test string",
                    speakableName: "Test string",
                    type: "Test string",
                }            ],
            selfLink: "Test string",
            sourceItemId: "Test string",
            speakableText: "Test string",
            speakableType: "Test string",
            text: "Test string",
            title: "Test string",
            updated: "Test string",
        });
        /** Deletes an attachment from a timeline item. */
        await gapi.client.mirror.timeline.attachments.delete({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Retrieves an attachment on a timeline item by item ID and attachment ID. */
        await gapi.client.mirror.timeline.attachments.get({
            attachmentId: "Test string",
            itemId: "Test string",
        });
        /** Adds a new attachment to a timeline item. */
        await gapi.client.mirror.timeline.attachments.insert({
            itemId: "Test string",
        });
        /** Returns a list of attachments for a timeline item. */
        await gapi.client.mirror.timeline.attachments.list({
            itemId: "Test string",
        });
    }
});
