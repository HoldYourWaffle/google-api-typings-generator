// Type definitions for non-npm package Firebase Management API v1beta1 1.0
// Project: https://firebase.google.com
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://firebase.googleapis.com/$discovery/rest?version=v1beta1
// Revision: 20200402

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Firebase Management API v1beta1 */
    function load(name: "firebase", version: "v1beta1"): PromiseLike<void>;
    function load(name: "firebase", version: "v1beta1", callback: () => any): void;

    namespace firebase {
        interface AddFirebaseRequest {
            /**
             * Deprecated. Instead, to set your project's default GCP resource location,
             * call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize)
             * after you add Firebase resources to your project.
             * <br>
             * <br>The ID of the project's default GCP resource location. The location
             * must be one of the available
             * [GCP resource
             * locations](https://firebase.google.com/docs/projects/locations).
             */
            locationId?: string;
            /**
             * Deprecated. Instead, to link your Project with a Google Analytics account,
             * call [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics)
             * after you add Firebase resources to your Project.
             * <br>
             * <br>The region code (CLDR) that the account will use for Firebase Analytics
             * data.
             * <br>For example: US, GB, or DE
             * <br>
             * <br>In Java, use `com.google.i18n.identifiers.RegionCode`.
             */
            regionCode?: string;
            /**
             * Deprecated. Instead, to link your Project with a Google Analytics account,
             * call [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics)
             * after you add Firebase resources to your Project.
             * <br>
             * <br>The time zone that the account will use for Firebase Analytics data.
             * <br>For example: America/Los_Angeles or Africa/Abidjan
             */
            timeZone?: string;
        }
        interface AddGoogleAnalyticsRequest {
            /**
             * The ID for the existing
             * [Google Analytics account](http://www.google.com/analytics/) that you
             * want to link with your `FirebaseProject`.
             * <br>
             * <br>Specifying this field will provision a new Google Analytics
             * property in your Google Analytics account and associate the new property
             * with your `FirebaseProject`.
             */
            analyticsAccountId?: string;
            /**
             * The ID for the existing Google Analytics property that you want to
             * associate with your `FirebaseProject`.
             */
            analyticsPropertyId?: string;
        }
        interface AdminSdkConfig {
            /** The default Firebase Realtime Database URL. */
            databaseURL?: string;
            /**
             * The ID of the project's default GCP resource location. The location is one
             * of the available
             * [GCP resource
             * locations](https://firebase.google.com/docs/projects/locations). <br>
             * <br>This field is omitted if the default GCP resource location has not been
             * finalized yet. To set your project's default GCP resource location,
             * call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize)
             * after you add Firebase services to your project.
             */
            locationId?: string;
            /**
             * Immutable. The globally unique, user-assigned project ID of the parent
             * Project.
             */
            projectId?: string;
            /** The default Cloud Storage for Firebase storage bucket name. */
            storageBucket?: string;
        }
        interface AnalyticsDetails {
            /**
             * The Analytics Property object associated with the specified
             * `FirebaseProject`.
             * <br>
             * <br>This object contains the details of the Google Analytics property
             * associated with the specified `FirebaseProject`.
             */
            analyticsProperty?: AnalyticsProperty;
            /**
             * For Android Apps and iOS Apps: A map of `app` to `streamId` for each
             * Firebase App in the specified `FirebaseProject`. Each `app` and
             * `streamId` appears only once.<br>
             * <br>
             * For Web Apps: A map of `app` to `streamId` and `measurementId` for each
             * Firebase App in the specified `FirebaseProject`. Each `app`, `streamId`,
             * and `measurementId` appears only once.
             */
            streamMappings?: StreamMapping[];
        }
        interface AnalyticsProperty {
            /**
             * The display name of the Google Analytics property associated with the
             * specified `FirebaseProject`.
             */
            displayName?: string;
            /**
             * The globally unique, Google-assigned identifier of the Google Analytics
             * property associated with the specified `FirebaseProject`.
             * <br>
             * <br>If you called
             * [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) to link
             * your `FirebaseProject` with a Google Analytics account, the value in this
             * `id` field is the same as the ID of the property either specified or
             * provisioned with that call to `AddGoogleAnalytics`.
             */
            id?: string;
        }
        interface AndroidApp {
            /**
             * Immutable. The globally unique, Firebase-assigned identifier of the App.
             * <br>
             * <br>This identifier should be treated as an opaque token, as the data
             * format is not specified.
             */
            appId?: string;
            /** The user-assigned display name of the App. */
            displayName?: string;
            /**
             * The fully qualified resource name of the App, in the format:
             * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
             */
            name?: string;
            /**
             * The canonical package name of the Android App as would appear in the
             * Google Play Developer Console.
             */
            packageName?: string;
            /** The globally unique, user-assigned ID of the parent Project for the App. */
            projectId?: string;
        }
        interface AndroidAppConfig {
            /** The contents of the JSON configuration file. */
            configFileContents?: string;
            /**
             * The filename that the configuration artifact is typically saved as.
             * <br>For example: `google-services.json`
             */
            configFilename?: string;
        }
        interface DefaultResources {
            /**
             * The default Firebase Hosting site name, in the format:
             * <br><code><var>projectId</var></code>
             * <br>Though rare, your `projectId` might already be used as the name for an
             * existing Hosting site in another project (learn more about creating
             * non-default,
             * [additional sites](https://firebase.google.com/docs/hosting/multisites)).
             * In these cases, your `projectId` is appended with a hyphen then five
             * alphanumeric characters to create your default Hosting site name. For
             * example, if your `projectId` is `myproject123`, your default Hosting site
             * name might be:
             * <br><code>myproject123-a5c16</code>
             */
            hostingSite?: string;
            /**
             * The ID of the project's default GCP resource location. The location is one
             * of the available
             * [GCP resource
             * locations](https://firebase.google.com/docs/projects/locations). <br>
             * <br>This field is omitted if the default GCP resource location has not been
             * finalized yet. To set your project's default GCP resource location,
             * call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize)
             * after you add Firebase services to your project.
             */
            locationId?: string;
            /**
             * The default Firebase Realtime Database instance name, in the format:
             * <br><code><var>projectId</var></code>
             * <br>Though rare, your `projectId` might already be used as the name for an
             * existing Realtime Database instance in another project (learn more about
             * [database
             * sharding](https://firebase.google.com/docs/database/usage/sharding)). In
             * these cases, your `projectId` is appended with a hyphen then five
             * alphanumeric characters to create your default Realtime Database instance
             * name. For example, if your `projectId` is `myproject123`, your default
             * database instance name might be:
             * <br><code>myproject123-a5c16</code>
             */
            realtimeDatabaseInstance?: string;
            /**
             * The default Cloud Storage for Firebase storage bucket, in the format:
             * <br><code><var>projectId</var>.appspot.com</code>
             */
            storageBucket?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface FinalizeDefaultLocationRequest {
            /**
             * The ID of the default GCP resource location for the Project. The location
             * must be one of the available
             * [GCP resource
             * locations](https://firebase.google.com/docs/projects/locations).
             */
            locationId?: string;
        }
        interface FirebaseAppInfo {
            /**
             * Immutable. The globally unique, Firebase-assigned identifier of the App.
             * <br>
             * <br>This identifier should be treated as an opaque token, as the data
             * format is not specified.
             */
            appId?: string;
            /** The user-assigned display name of the Firebase App. */
            displayName?: string;
            /**
             * The fully qualified resource name of the Firebase App, in the format:
             * <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
             * or <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var>
             * </code>
             */
            name?: string;
            /** The platform of the Firebase App. */
            platform?: string;
        }
        interface FirebaseProject {
            /** The user-assigned display name of the Project. */
            displayName?: string;
            /**
             * The fully qualified resource name of the Project, in the format:
             * <br><code>projects/<var>projectId</var></code>
             */
            name?: string;
            /** Immutable. The globally unique, user-assigned ID of the Project. */
            projectId?: string;
            /** The globally unique, Google-assigned identifier of the Project. */
            projectNumber?: string;
            /** The default Firebase resources associated with the Project. */
            resources?: DefaultResources;
        }
        interface IosApp {
            /**
             * Immutable. The globally unique, Firebase-assigned identifier of the App.
             * <br>
             * <br>This identifier should be treated as an opaque token, as the data
             * format is not specified.
             */
            appId?: string;
            /**
             * The automatically generated Apple ID assigned to the App by Apple in the
             * iOS App Store.
             */
            appStoreId?: string;
            /**
             * The canonical bundle ID of the iOS App as it would appear in the iOS
             * AppStore.
             */
            bundleId?: string;
            /** The user-assigned display name of the App. */
            displayName?: string;
            /**
             * The fully qualified resource name of the App, in the format:
             * <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
             */
            name?: string;
            /** The globally unique, user-assigned ID of the parent Project for the App. */
            projectId?: string;
        }
        interface IosAppConfig {
            /** The content of the XML configuration file. */
            configFileContents?: string;
            /**
             * The filename that the configuration artifact is typically saved as.
             * <br>For example: `GoogleService-Info.plist`
             */
            configFilename?: string;
        }
        interface ListAndroidAppsResponse {
            /** List of each AndroidApp that is in the parent Firebase Project. */
            apps?: AndroidApp[];
            /**
             * If the result list is too large to fit in a single response, then a token
             * is returned. If the string is empty, then this response is the last page of
             * results.
             * <br>
             * <br>This token can be used in a subsequent call to `ListAndroidApps` to
             * find the next group of Apps.
             * <br>
             * <br>Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?: string;
        }
        interface ListAvailableLocationsResponse {
            /** One page of results from a call to `ListAvailableLocations`. */
            locations?: Location[];
            /**
             * If the result list is too large to fit in a single response, then a token
             * is returned. If the string is empty, then this response is the last page of
             * results and all available locations have been listed.
             * <br>
             * <br>This token can be used in a subsequent call to
             * `ListAvailableLocations` to find more locations.
             * <br>
             * <br>Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?: string;
        }
        interface ListAvailableProjectsResponse {
            /**
             * If the result list is too large to fit in a single response, then a token
             * is returned. If the string is empty, then this response is the last page of
             * results.
             * <br>
             * <br>This token can be used in a subsequent calls to `ListAvailableProjects`
             * to find the next group of GCP `Projects`.
             * <br>
             * <br>Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?: string;
            /** The list of GCP `Projects` which can have Firebase resources added to them. */
            projectInfo?: ProjectInfo[];
        }
        interface ListFirebaseProjectsResponse {
            /**
             * If the result list is too large to fit in a single response, then a token
             * is returned. If the string is empty, then this response is the last page of
             * results.
             * <br>
             * <br>This token can be used in a subsequent calls to `ListFirebaseProjects`
             * to find the next group of Projects.
             * <br>
             * <br>Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?: string;
            /** One page of the list of Projects that are accessible to the caller. */
            results?: FirebaseProject[];
        }
        interface ListIosAppsResponse {
            /** List of each IosApp that is in the parent Firebase Project. */
            apps?: IosApp[];
            /**
             * If the result list is too large to fit in a single response, then a token
             * is returned. If the string is empty, then this response is the last page of
             * results.
             * <br>
             * <br>This token can be used in a subsequent call to `ListIosApps` to find
             * the next group of Apps.
             * <br>
             * <br>Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?: string;
        }
        interface ListShaCertificatesResponse {
            /** The list of SHA certificates associated with the App. */
            certificates?: ShaCertificate[];
        }
        interface ListWebAppsResponse {
            /** List of each WebApp that is in the parent Firebase Project. */
            apps?: WebApp[];
            /**
             * If the result list is too large to fit in a single response, then a token
             * is returned. If the string is empty, then this response is the last page of
             * results.
             * <br>
             * <br>This token can be used in a subsequent call to `ListWebApps` to find
             * the next group of Apps.
             * <br>
             * <br>Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?: string;
        }
        interface Location {
            /** Products and services that are available in the GCP resource location. */
            features?: string[];
            /**
             * The ID of the GCP resource location. It will be one of the available [GCP
             * resource
             * locations](https://firebase.google.com/docs/projects/locations#types).
             */
            locationId?: string;
            /**
             * Indicates whether the GCP resource location is a [regional or
             * multi-regional
             * location](https://firebase.google.com/docs/projects/locations#types)
             * for data replication.
             */
            type?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface MessageSet {
        }
        interface Operation {
            /**
             * If the value is `false`, it means the operation is still in progress.
             * If `true`, the operation is completed, and either `error` or `response` is
             * available.
             */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation.  It typically
             * contains progress information and common metadata such as create time.
             * Some services might not provide such metadata.  Any method that returns a
             * long-running operation should document the metadata type, if any.
             */
            metadata?: Record<string, any>;
            /**
             * The server-assigned name, which is only unique within the same service that
             * originally returns it. If you use the default HTTP mapping, the
             * `name` should be a resource name ending with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success.  If the original
             * method returns no data on success, such as `Delete`, the response is
             * `google.protobuf.Empty`.  If the original method is standard
             * `Get`/`Create`/`Update`, the response should be the resource.  For other
             * methods, the response should have the type `XxxResponse`, where `Xxx`
             * is the original method name.  For example, if the original method name
             * is `TakeSnapshot()`, the inferred response type is
             * `TakeSnapshotResponse`.
             */
            response?: Record<string, any>;
        }
        interface ProjectInfo {
            /**
             * The user-assigned display name of the GCP `Project`, for example:
             * <code>My App</code>
             */
            displayName?: string;
            /**
             * The ID of the project's default GCP resource location. The location is one
             * of the available
             * [GCP resource
             * locations](https://firebase.google.com/docs/projects/locations). <br> <br>
             * Not all projects will have this field populated. If it is not populated, it
             * means that the project does not yet have a default GCP resource location.
             * To set your project's default GCP resource location, call
             * [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you
             * add Firebase resources to your project.
             */
            locationId?: string;
            /**
             * The resource name of the GCP `Project` to which Firebase resources can be
             * added, in the format:
             * <br><code>projects/<var>projectId</var></code>
             */
            project?: string;
        }
        interface RemoveAnalyticsRequest {
            /**
             * Optional. The ID of the Google Analytics property associated with the
             * specified `FirebaseProject`.
             * <ul>
             * <li>If not set, then the Google Analytics property that is currently
             * associated with the specified `FirebaseProject` is removed.</li>
             * <li>If set, and the specified `FirebaseProject` is currently associated
             * with a <em>different</em> Google Analytics property, then the response is a
             * `412 Precondition Failed` error.</li>
             * </ul>
             */
            analyticsPropertyId?: string;
        }
        interface SearchFirebaseAppsResponse {
            /** One page of results from a call to `SearchFirebaseApps`. */
            apps?: FirebaseAppInfo[];
            /**
             * If the result list is too large to fit in a single response, then a token
             * is returned.
             * <br>
             * <br>This token can be used in a subsequent calls to `SearchFirebaseApps`
             * to find the next group of Apps.
             * <br>If the string is empty, then this response is the last page of results.
             * <br>Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?: string;
        }
        interface ShaCertificate {
            /** The SHA certificate type. */
            certType?: string;
            /**
             * The fully qualified resource name of the `sha-key`, in the format:
             * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var>/sha/<var>shaId</var></code>
             */
            name?: string;
            /** The certificate hash for the App. */
            shaHash?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /**
             * A list of messages that carry the error details.  There is a common set of
             * message types for APIs to use.
             */
            details?: Array<Record<string, any>>;
            /**
             * A developer-facing error message, which should be in English. Any
             * user-facing error message should be localized and sent in the
             * google.rpc.Status.details field, or localized by the client.
             */
            message?: string;
        }
        interface StatusProto {
            /**
             * The canonical error code (see codes.proto) that most closely
             * corresponds to this status. May be missing.
             */
            canonicalCode?: number;
            /**
             * Numeric code drawn from the space specified below. Often, this is the
             * canonical error space, and code is drawn from google3/util/task/codes.proto
             */
            code?: number;
            /** Detail message */
            message?: string;
            /** message_set associates an arbitrary proto message with the status. */
            messageSet?: any;
            /**
             * DEPRECATED.
             *
             * This field was deprecated in 2011 with cl/20297133.  Java support
             * for the field was moved to a proto1 backward compatibility class
             * in April 2017 with cl/142615857 and cl/154123203.  There was
             * never support for this field in Go; if set Go will ignore it.
             * C++ stopped setting StatusProto::payload in October 2015 with cl/106347055,
             * and stopped reading the field in October 2017 with cl/173324114.
             *
             * In general, newly written code should use only "message_set". If you need
             * to maintain backward compatibility with code written before 3/25/2011, do
             * the following:
             *
             * - During the transition period, either (1) set both "payload" and
             * "message_set", or (2) write the consumer of StatusProto so that it can
             * forge a MessageSet object from "payload" if "message_set" is missing.
             * The C++ util::Status implementation does (2).
             *
             * - Once all the consumers are converted to accept "message_set", then
             * remove the use of "payload" on the producer side.
             */
            payload?: TypedMessage;
            /**
             * The following are usually only present when code != 0
             * Space to which this status belongs
             */
            space?: string;
        }
        interface StreamMapping {
            /**
             * The fully qualified resource name of the Firebase App associated with the
             * Google Analytics data stream, in the format:
             * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
             * or
             * <code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
             * or
             * <code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
             */
            app?: string;
            /**
             * Applicable for Firebase Web Apps only.<br>
             * <br>The unique Google-assigned identifier of the Google Analytics web
             * stream associated with the Firebase Web App. Firebase SDKs use this ID to
             * interact with Google Analytics APIs.
             * <br>
             * <br>Learn more about this ID and Google Analytics web streams in the
             * [Analytics
             * documentation](https://support.google.com/analytics/topic/9303475).
             */
            measurementId?: string;
            /**
             * The unique Google-assigned identifier of the Google Analytics data stream
             * associated with the Firebase App.
             * <br>
             * <br>Learn more about Google Analytics data streams in the
             * [Analytics
             * documentation](https://support.google.com/analytics/answer/9303323).
             */
            streamId?: string;
        }
        interface TypedMessage {
            /** Message bytes. */
            message?: string;
            /** Identifier for the type. */
            typeId?: number;
        }
        interface WebApp {
            /**
             * Immutable. The globally unique, Firebase-assigned identifier of the App.
             * <br>
             * <br>This identifier should be treated as an opaque token, as the data
             * format is not specified.
             */
            appId?: string;
            /** The fully qualified URLs where the App is hosted. */
            appUrls?: string[];
            /** The user-assigned display name of the App. */
            displayName?: string;
            /**
             * The fully qualified resource name of the App, for example:
             * <br><code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
             */
            name?: string;
            /** The globally unique, user-assigned ID of the parent Project for the App. */
            projectId?: string;
        }
        interface WebAppConfig {
            /** The API key associated with the web App. */
            apiKey?: string;
            /** Immutable. The globally unique, Firebase-assigned identifier of the App. */
            appId?: string;
            /**
             * The domain Firebase Auth configures for OAuth redirects, in the format:
             * <br><code><var>projectId</var>.firebaseapp.com</code>
             */
            authDomain?: string;
            /** The default Firebase Realtime Database URL. */
            databaseURL?: string;
            /**
             * The ID of the project's default GCP resource location. The location is one
             * of the available
             * [GCP resource
             * locations](https://firebase.google.com/docs/projects/locations). <br>
             * <br>This field is omitted if the default GCP resource location has not been
             * finalized yet. To set your project's default GCP resource location,
             * call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize)
             * after you add Firebase services to your project.
             */
            locationId?: string;
            /**
             * The unique Google-assigned identifier of the Google Analytics web stream
             * associated with the Firebase Web App. Firebase SDKs use this ID to interact
             * with Google Analytics APIs.
             * <br>
             * <br>This field is only present if the App is linked to a web stream in a
             * Google Analytics App + Web property. Learn more about this ID and Google
             * Analytics web streams in the [Analytics
             * documentation](https://support.google.com/analytics/topic/9303475).
             * <br>
             * <br>To generate a `measurementId` and link the Web App with a Google
             * Analytics web stream, call
             * [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics).
             */
            measurementId?: string;
            /** The sender ID for use with Firebase Cloud Messaging. */
            messagingSenderId?: string;
            /**
             * Immutable. The globally unique, user-assigned project ID of the parent
             * Project for the App.
             */
            projectId?: string;
            /** The default Cloud Storage for Firebase storage bucket name. */
            storageBucket?: string;
        }
        interface AvailableProjectsResource {
            /**
             * Returns a list of [Google Cloud Platform (GCP) `Projects`]
             * (https://cloud.google.com/resource-manager/reference/rest/v1/projects)
             * that are available to have Firebase resources added to them.
             * <br>
             * <br>A GCP `Project` will only be returned if:
             * <ol>
             * <li><p>The caller has sufficient
             * [Google IAM](https://cloud.google.com/iam) permissions to call
             * AddFirebase.</p></li>
             * <li><p>The GCP `Project` is not already a FirebaseProject.</p></li>
             * <li><p>The GCP `Project` is not in an Organization which has policies
             * that prevent Firebase resources from being added.</p></li>
             * </ol>
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of GCP `Projects` to return in the response.
                 * <br>
                 * <br>The server may return fewer than this value at its discretion.
                 * If no value is specified (or too large a value is specified), the server
                 * will impose its own limit.
                 * <br>
                 * <br>This value cannot be negative.
                 */
                pageSize?: number;
                /**
                 * Token returned from a previous call to `ListAvailableProjects`
                 * indicating where in the set of GCP `Projects` to resume listing.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListAvailableProjectsResponse>;
        }
        interface OperationsResource {
            /**
             * Gets the latest state of a long-running operation.  Clients can use this
             * method to poll the operation result at intervals as recommended by the API
             * service.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
        }
        interface ShaResource {
            /** Adds a SHA certificate to the specified AndroidApp. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent App to which a SHA certificate will be added, in the format:
                 * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
                 * <br>As an <var>appId</var> is a unique identifier, the Unique Resource
                 * from Sub-Collection access pattern may be used here, in the format:
                 * <br><code>projects/-/androidApps/<var>appId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ShaCertificate;
            }): Request<ShaCertificate>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent App to which a SHA certificate will be added, in the format:
                 * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
                 * <br>As an <var>appId</var> is a unique identifier, the Unique Resource
                 * from Sub-Collection access pattern may be used here, in the format:
                 * <br><code>projects/-/androidApps/<var>appId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ShaCertificate): Request<ShaCertificate>;
            /** Removes a SHA certificate from the specified AndroidApp. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the `sha-key`, in the format:
                 * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var>/sha/<var>shaId</var></code>
                 * <br>You can obtain the full name from the response of
                 * [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
                 * [`CreateShaCertificate`](../projects.androidApps.sha/create).
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * Returns the list of SHA-1 and SHA-256 certificates for the specified
             * AndroidApp.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent App for which to list SHA certificates, in the format:
                 * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
                 * <br>As an <var>appId</var> is a unique identifier, the Unique Resource
                 * from Sub-Collection access pattern may be used here, in the format:
                 * <br><code>projects/-/androidApps/<var>appId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListShaCertificatesResponse>;
        }
        interface AndroidAppsResource {
            /**
             * Requests that a new AndroidApp be created.
             * <br>
             * <br>The result of this call is an `Operation` which can be used to track
             * the provisioning process. The `Operation` is automatically deleted after
             * completion, so there is no need to call `DeleteOperation`.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent Project in which to create an App, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AndroidApp;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent Project in which to create an App, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AndroidApp): Request<Operation>;
            /** Gets the AndroidApp identified by the specified resource name. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the App, in the format:
                 * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
                 * <br>As an <var>appId</var> is a unique identifier, the Unique Resource
                 * from Sub-Collection access pattern may be used here, in the format:
                 * <br><code>projects/-/androidApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AndroidApp>;
            /**
             * Gets the configuration artifact associated with the specified
             * AndroidApp.
             */
            getConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The resource name of the App configuration to download, in the format:
                 * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var>/config</code>
                 * <br>As an <var>appId</var> is a unique identifier, the Unique Resource
                 * from Sub-Collection access pattern may be used here, in the format:
                 * <br><code>projects/-/androidApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AndroidAppConfig>;
            /**
             * Lists each AndroidApp associated with the specified parent Project.
             * <br>
             * <br>The elements are returned in no particular order, but will be a
             * consistent view of the Apps when additional requests are made with a
             * `pageToken`.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of Apps to return in the response.
                 * <br>
                 * <br>The server may return fewer than this at its discretion.
                 * If no value is specified (or too large a value is specified), then the
                 * server will impose its own limit.
                 */
                pageSize?: number;
                /**
                 * Token returned from a previous call to `ListAndroidApps` indicating where
                 * in the set of Apps to resume listing.
                 */
                pageToken?: string;
                /**
                 * The parent Project for which to list Apps, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListAndroidAppsResponse>;
            /**
             * Updates the attributes of the AndroidApp identified by the specified
             * resource name.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the App, in the format:
                 * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Specifies which fields to update.
                 * <br>Note that the fields `name`, `appId`, `projectId`, and `packageName`
                 * are all immutable.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AndroidApp;
            }): Request<AndroidApp>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the App, in the format:
                 * <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Specifies which fields to update.
                 * <br>Note that the fields `name`, `appId`, `projectId`, and `packageName`
                 * are all immutable.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AndroidApp): Request<AndroidApp>;
            sha: ShaResource;
        }
        interface AvailableLocationsResource {
            /**
             * Returns a list of valid Google Cloud Platform (GCP) resource locations for
             * the specified Project (including a FirebaseProject).
             * <br>
             * <br>One of these locations can be selected as the Project's [_default_ GCP
             * resource location](https://firebase.google.com/docs/projects/locations),
             * which is the geographical location where project resources, such as Cloud
             * Firestore, will be provisioned by default. However, if the default GCP
             * resource location has already been set for the Project, then this setting
             * cannot be changed.
             * <br>
             * <br>This call checks for any location restrictions for the specified
             * Project and, thus, might return a subset of all possible GCP resource
             * locations. To list all GCP resource locations (regardless of any
             * restrictions), call the endpoint without specifying a `projectId` (that is,
             * `/v1beta1/{parent=projects/-}/listAvailableLocations`).
             * <br>
             * <br>To call `ListAvailableLocations` with a specified project, a member
             * must be at minimum a Viewer of the project. Calls without a specified
             * project do not require any specific project permissions.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of locations to return in the response.
                 * <br>
                 * <br>The server may return fewer than this value at its discretion.
                 * If no value is specified (or too large a value is specified), then the
                 * server will impose its own limit.
                 * <br>
                 * <br>This value cannot be negative.
                 */
                pageSize?: number;
                /**
                 * Token returned from a previous call to `ListAvailableLocations` indicating
                 * where in the list of locations to resume listing.
                 */
                pageToken?: string;
                /**
                 * The Project for which to list GCP resource locations, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 * <br>If no project is specified (that is, `projects/-`), the returned list
                 * does not take into account org-specific or project-specific location
                 * restrictions.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListAvailableLocationsResponse>;
        }
        interface DefaultLocationResource {
            /**
             * Sets the default Google Cloud Platform (GCP) resource location for the
             * specified FirebaseProject.
             * <br>
             * <br>This method creates an App Engine application with a
             * [default Cloud Storage
             * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
             * located in the specified
             * [`location_id`](#body.request_body.FIELDS.location_id).
             * This location must be one of the available
             * [GCP resource
             * locations](https://firebase.google.com/docs/projects/locations). <br>
             * <br>After the default GCP resource location is finalized, or if it was
             * already set, it cannot be changed. The default GCP resource location for
             * the specified FirebaseProject might already be set because either the
             * GCP `Project` already has an App Engine application or
             * `FinalizeDefaultLocation` was previously called with a specified
             * `location_id`. Any new calls to `FinalizeDefaultLocation` with a
             * <em>different</em> specified `location_id` will return a 409 error.
             * <br>
             * <br>The result of this call is an [`Operation`](../../v1beta1/operations),
             * which can be used to track the provisioning process. The
             * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
             * the `Operation` is google.protobuf.Empty.
             * <br>
             * <br>The `Operation` can be polled by its `name` using
             * GetOperation until `done` is
             * true. When `done` is true, the `Operation` has either succeeded or failed.
             * If the `Operation` has succeeded, its
             * [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
             * set to a google.protobuf.Empty; if the `Operation` has failed, its
             * `error` will be set to a google.rpc.Status. The `Operation` is
             * automatically deleted after completion, so there is no need to call
             * DeleteOperation.
             * <br>
             * <br>All fields listed in the [request body](#request-body) are required.
             * <br>
             * <br>To call `FinalizeDefaultLocation`, a member must be an Owner
             * of the project.
             */
            finalize(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The resource name of the Project for which the default GCP resource
                 * location will be set, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: FinalizeDefaultLocationRequest;
            }): Request<Operation>;
            finalize(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The resource name of the Project for which the default GCP resource
                 * location will be set, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: FinalizeDefaultLocationRequest): Request<Operation>;
        }
        interface IosAppsResource {
            /**
             * Requests that a new IosApp be created.
             * <br>
             * <br>The result of this call is an `Operation` which can be used to track
             * the provisioning process. The `Operation` is automatically deleted after
             * completion, so there is no need to call `DeleteOperation`.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent Project in which to create an App, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: IosApp;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent Project in which to create an App, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: IosApp): Request<Operation>;
            /** Gets the IosApp identified by the specified resource name. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the App, in the format:
                 * <code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
                 * <br>As an <var>appId</var> is a unique identifier, the Unique Resource
                 * from Sub-Collection access pattern may be used here, in the format:
                 * <br><code>projects/-/iosApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<IosApp>;
            /** Gets the configuration artifact associated with the specified IosApp. */
            getConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The resource name of the App configuration to download, in the format:
                 * <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var>/config</code>
                 * <br>As an <var>appId</var> is a unique identifier, the Unique Resource
                 * from Sub-Collection access pattern may be used here, in the format:
                 * <br><code>projects/-/iosApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<IosAppConfig>;
            /**
             * Lists each IosApp associated with the specified parent Project.
             * <br>
             * <br>The elements are returned in no particular order, but will be a
             * consistent view of the Apps when additional requests are made with a
             * `pageToken`.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of Apps to return in the response.
                 * <br>
                 * <br>The server may return fewer than this at its discretion.
                 * If no value is specified (or too large a value is specified), the server
                 * will impose its own limit.
                 */
                pageSize?: number;
                /**
                 * Token returned from a previous call to `ListIosApps` indicating where in
                 * the set of Apps to resume listing.
                 */
                pageToken?: string;
                /**
                 * The parent Project for which to list Apps, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListIosAppsResponse>;
            /**
             * Updates the attributes of the IosApp identified by the specified
             * resource name.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the App, in the format:
                 * <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Specifies which fields to update.
                 * <br>Note that the fields `name`, `appId`, `projectId`, and `bundleId`
                 * are all immutable.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: IosApp;
            }): Request<IosApp>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the App, in the format:
                 * <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Specifies which fields to update.
                 * <br>Note that the fields `name`, `appId`, `projectId`, and `bundleId`
                 * are all immutable.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: IosApp): Request<IosApp>;
        }
        interface WebAppsResource {
            /**
             * Requests that a new WebApp be created.
             * <br>
             * <br>The result of this call is an `Operation` which can be used to track
             * the provisioning process. The `Operation` is automatically deleted after
             * completion, so there is no need to call `DeleteOperation`.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent Project in which to create an App, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: WebApp;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent Project in which to create an App, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: WebApp): Request<Operation>;
            /** Gets the WebApp identified by the specified resource name. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the App, in the format:
                 * <br><code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
                 * <br>As an <var>appId</var> is a unique identifier, the Unique Resource
                 * from Sub-Collection access pattern may be used here, in the format:
                 * <br><code>projects/-/webApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<WebApp>;
            /** Gets the configuration artifact associated with the specified WebApp. */
            getConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The resource name of the App configuration to download, in the format:
                 * <br><code>projects/<var>projectId</var>/webApps/<var>appId</var>/config</code>
                 * <br>As an <var>appId</var> is a unique identifier, the Unique Resource
                 * from Sub-Collection access pattern may be used here, in the format:
                 * <br><code>projects/-/webApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<WebAppConfig>;
            /**
             * Lists each WebApp associated with the specified parent Project.
             * <br>
             * <br>The elements are returned in no particular order, but will be a
             * consistent view of the Apps when additional requests are made with a
             * `pageToken`.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of Apps to return in the response.
                 * <br>
                 * <br>The server may return fewer than this value at its discretion.
                 * If no value is specified (or too large a value is specified), then the
                 * server will impose its own limit.
                 */
                pageSize?: number;
                /**
                 * Token returned from a previous call to `ListWebApps` indicating where in
                 * the set of Apps to resume listing.
                 */
                pageToken?: string;
                /**
                 * The parent Project for which to list Apps, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListWebAppsResponse>;
            /**
             * Updates the attributes of the WebApp identified by the specified
             * resource name.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the App, for example:
                 * <br><code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Specifies which fields to update.
                 * <br>Note that the fields `name`, `appId`, and `projectId` are all
                 * immutable.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: WebApp;
            }): Request<WebApp>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the App, for example:
                 * <br><code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Specifies which fields to update.
                 * <br>Note that the fields `name`, `appId`, and `projectId` are all
                 * immutable.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: WebApp): Request<WebApp>;
        }
        interface ProjectsResource {
            /**
             * Adds Firebase resources to the specified existing
             * [Google Cloud Platform (GCP) `Project`]
             * (https://cloud.google.com/resource-manager/reference/rest/v1/projects).
             * <br>
             * <br>Since a FirebaseProject is actually also a GCP `Project`, a
             * `FirebaseProject` uses underlying GCP identifiers (most importantly,
             * the `projectId`) as its own for easy interop with GCP APIs.
             * <br>
             * <br>The result of this call is an [`Operation`](../../v1beta1/operations).
             * Poll the `Operation` to track the provisioning process by calling
             * GetOperation until
             * [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
             * `done` is `true`, the `Operation` has either succeeded or failed. If the
             * `Operation` succeeded, its
             * [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
             * a FirebaseProject; if the `Operation` failed, its
             * [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
             * google.rpc.Status. The `Operation` is automatically deleted after
             * completion, so there is no need to call
             * DeleteOperation.
             * <br>
             * <br>This method does not modify any billing account information on the
             * underlying GCP `Project`.
             * <br>
             * <br>To call `AddFirebase`, a member must be an Editor or Owner for the
             * existing GCP `Project`. Service accounts cannot call `AddFirebase`.
             */
            addFirebase(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * The resource name of the GCP `Project` to which Firebase resources will be
                 * added, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 * After calling `AddFirebase`, the
                 * [`projectId`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_id)
                 * of the GCP `Project` is also the `projectId` of the FirebaseProject.
                 */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AddFirebaseRequest;
            }): Request<Operation>;
            addFirebase(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * The resource name of the GCP `Project` to which Firebase resources will be
                 * added, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 * After calling `AddFirebase`, the
                 * [`projectId`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_id)
                 * of the GCP `Project` is also the `projectId` of the FirebaseProject.
                 */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AddFirebaseRequest): Request<Operation>;
            /**
             * Links a FirebaseProject with an existing
             * [Google Analytics account](http://www.google.com/analytics/).
             * <br>
             * <br>Using this call, you can either:
             * <ul>
             * <li>Specify an `analyticsAccountId` to provision a new Google Analytics
             * property within the specified account and associate the new property with
             * your `FirebaseProject`.</li>
             * <li>Specify an existing `analyticsPropertyId` to associate the property
             * with your `FirebaseProject`.</li>
             * </ul>
             * <br>
             * Note that when you call `AddGoogleAnalytics`:
             * <ol>
             * <li>The first check determines if any existing data streams in the
             * Google Analytics property correspond to any existing Firebase Apps in your
             * `FirebaseProject` (based on the `packageName` or `bundleId` associated with
             * the data stream). Then, as applicable, the data streams and apps are
             * linked. Note that this auto-linking only applies to Android Apps and iOS
             * Apps.</li>
             * <li>If no corresponding data streams are found for your Firebase Apps,
             * new data streams are provisioned in the Google Analytics property
             * for each of your Firebase Apps. Note that a new data stream is always
             * provisioned for a Web App even if it was previously associated with a
             * data stream in your Analytics property.</li>
             * </ol>
             * Learn more about the hierarchy and structure of Google Analytics
             * accounts in the
             * [Analytics
             * documentation](https://support.google.com/analytics/answer/9303323).
             * <br>
             * <br>The result of this call is an [`Operation`](../../v1beta1/operations).
             * Poll the `Operation` to track the provisioning process by calling
             * GetOperation until
             * [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
             * `done` is `true`, the `Operation` has either succeeded or failed. If the
             * `Operation` succeeded, its
             * [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
             * an AnalyticsDetails; if the `Operation` failed, its
             * [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
             * google.rpc.Status.
             * <br>
             * <br>To call `AddGoogleAnalytics`, a member must be an Owner for
             * the existing `FirebaseProject` and have the
             * [`Edit` permission](https://support.google.com/analytics/answer/2884495)
             * for the Google Analytics account.
             * <br>
             * <br>If a `FirebaseProject` already has Google Analytics enabled, and you
             * call `AddGoogleAnalytics` using an `analyticsPropertyId` that's different
             * from the currently associated property, then the call will fail. Analytics
             * may have already been enabled in the Firebase console or by specifying
             * `timeZone` and `regionCode` in the call to
             * [`AddFirebase`](../../v1beta1/projects/addFirebase).
             */
            addGoogleAnalytics(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent `FirebaseProject` to link to an existing Google Analytics
                 * account, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AddGoogleAnalyticsRequest;
            }): Request<Operation>;
            addGoogleAnalytics(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent `FirebaseProject` to link to an existing Google Analytics
                 * account, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AddGoogleAnalyticsRequest): Request<Operation>;
            /** Gets the FirebaseProject identified by the specified resource name. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the Project, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<FirebaseProject>;
            /**
             * Gets the configuration artifact used by servers to simplify initialization.
             * <br>
             * <br>Typically, this configuration is used with the Firebase Admin SDK
             * [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk)
             * command.
             */
            getAdminSdkConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the Project, in the format:
                 * <br><code>projects/<var>projectId</var>/adminSdkConfig</code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AdminSdkConfig>;
            /**
             * Gets the Google Analytics details currently associated with a
             * FirebaseProject.
             * <br>
             * <br>If the `FirebaseProject` is not yet linked to Google Analytics, then
             * the response to `GetAnalyticsDetails` is NOT_FOUND.
             */
            getAnalyticsDetails(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name, in the format:
                 * <br><code>projects/<var>projectId</var>/analyticsDetails</code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AnalyticsDetails>;
            /**
             * Lists each FirebaseProject accessible to the caller.
             * <br>
             * <br>The elements are returned in no particular order, but they will be a
             * consistent view of the Projects when additional requests are made with a
             * `pageToken`.
             * <br>
             * <br>This method is eventually consistent with Project mutations, which
             * means newly provisioned Projects and recent modifications to existing
             * Projects might not be reflected in the set of Projects. The list will
             * include only ACTIVE Projects.
             * <br>
             * <br>Use
             * GetFirebaseProject
             * for consistent reads as well as for additional Project details.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of Projects to return in the response.
                 * <br>
                 * <br>The server may return fewer than this at its discretion.
                 * If no value is specified (or too large a value is specified), the server
                 * will impose its own limit.
                 * <br>
                 * <br>This value cannot be negative.
                 */
                pageSize?: number;
                /**
                 * Token returned from a previous call to `ListFirebaseProjects` indicating
                 * where in the set of Projects to resume listing.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListFirebaseProjectsResponse>;
            /**
             * Updates the attributes of the FirebaseProject identified by the
             * specified resource name.
             * <br>
             * <br>All [query parameters](#query-parameters) are required.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the Project, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Specifies which fields to update.
                 * <br>
                 * <br>If this list is empty, then no state will be updated.
                 * <br>Note that the fields `name`, `project_id`, and `project_number` are all
                 * immutable.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: FirebaseProject;
            }): Request<FirebaseProject>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The fully qualified resource name of the Project, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Specifies which fields to update.
                 * <br>
                 * <br>If this list is empty, then no state will be updated.
                 * <br>Note that the fields `name`, `project_id`, and `project_number` are all
                 * immutable.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: FirebaseProject): Request<FirebaseProject>;
            /**
             * Unlinks the specified `FirebaseProject` from its Google Analytics account.
             * <br>
             * <br>This call removes the association of the specified `FirebaseProject`
             * with its current Google Analytics property. However, this call does not
             * delete the Google Analytics resources, such as the Google Analytics
             * property or any data streams.
             * <br>
             * <br>These resources may be re-associated later to the `FirebaseProject` by
             * calling
             * [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and
             * specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps,
             * this call re-links data streams with their corresponding apps. However,
             * for Web Apps, this call provisions a <em>new</em> data stream for each Web
             * App.
             * <br>
             * <br>To call `RemoveAnalytics`, a member must be an Owner for
             * the `FirebaseProject`.
             */
            removeAnalytics(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent `FirebaseProject` to unlink from its Google Analytics account,
                 * in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RemoveAnalyticsRequest;
            }): Request<{}>;
            removeAnalytics(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent `FirebaseProject` to unlink from its Google Analytics account,
                 * in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RemoveAnalyticsRequest): Request<{}>;
            /**
             * A convenience method that lists all available Apps for the specified
             * FirebaseProject.
             * <br>
             * <br>Typically, interaction with an App should be done using the
             * platform-specific service, but some tool use-cases require a summary of all
             * known Apps (such as for App selector interfaces).
             */
            searchApps(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of Apps to return in the response.
                 * <br>
                 * <br>The server may return fewer than this value at its discretion.
                 * If no value is specified (or too large a value is specified), then the
                 * server will impose its own limit.
                 * <br>
                 * <br>This value cannot be negative.
                 */
                pageSize?: number;
                /**
                 * Token returned from a previous call to `SearchFirebaseApps` indicating
                 * where in the set of Apps to resume listing.
                 */
                pageToken?: string;
                /**
                 * The parent Project for which to list Apps, in the format:
                 * <br><code>projects/<var>projectId</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<SearchFirebaseAppsResponse>;
            androidApps: AndroidAppsResource;
            availableLocations: AvailableLocationsResource;
            defaultLocation: DefaultLocationResource;
            iosApps: IosAppsResource;
            webApps: WebAppsResource;
        }

        const availableProjects: AvailableProjectsResource;

        const operations: OperationsResource;

        const projects: ProjectsResource;
    }
}
