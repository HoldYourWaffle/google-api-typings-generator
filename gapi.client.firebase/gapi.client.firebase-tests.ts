/* This is stub file for gapi.client.firebase definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('firebase', 'v1beta1', () => {
        /** now we can use gapi.client.firebase */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform.read-only',
            /** View and administer all your Firebase data and settings */
            'https://www.googleapis.com/auth/firebase',
            /** View all your Firebase data and settings */
            'https://www.googleapis.com/auth/firebase.readonly',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Returns a list of [Google Cloud Platform (GCP) `Projects`]
         * (https://cloud.google.com/resource-manager/reference/rest/v1/projects)
         * that are available to have Firebase resources added to them.
         * <br>
         * <br>A GCP `Project` will only be returned if:
         * <ol>
         * <li><p>The caller has sufficient
         * [Google IAM](https://cloud.google.com/iam) permissions to call
         * AddFirebase.</p></li>
         * <li><p>The GCP `Project` is not already a FirebaseProject.</p></li>
         * <li><p>The GCP `Project` is not in an Organization which has policies
         * that prevent Firebase resources from being added.</p></li>
         * </ol>
         */
        await gapi.client.firebase.availableProjects.list({
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Gets the latest state of a long-running operation.  Clients can use this
         * method to poll the operation result at intervals as recommended by the API
         * service.
         */
        await gapi.client.firebase.operations.get({
            name: "Test string",
        });
        /**
         * Adds Firebase resources to the specified existing
         * [Google Cloud Platform (GCP) `Project`]
         * (https://cloud.google.com/resource-manager/reference/rest/v1/projects).
         * <br>
         * <br>Since a FirebaseProject is actually also a GCP `Project`, a
         * `FirebaseProject` uses underlying GCP identifiers (most importantly,
         * the `projectId`) as its own for easy interop with GCP APIs.
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations).
         * Poll the `Operation` to track the provisioning process by calling
         * GetOperation until
         * [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
         * `done` is `true`, the `Operation` has either succeeded or failed. If the
         * `Operation` succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
         * a FirebaseProject; if the `Operation` failed, its
         * [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
         * google.rpc.Status. The `Operation` is automatically deleted after
         * completion, so there is no need to call
         * DeleteOperation.
         * <br>
         * <br>This method does not modify any billing account information on the
         * underlying GCP `Project`.
         * <br>
         * <br>To call `AddFirebase`, a member must be an Editor or Owner for the
         * existing GCP `Project`. Service accounts cannot call `AddFirebase`.
         */
        await gapi.client.firebase.projects.addFirebase({
            project: "Test string",
        }, {
            locationId: "Test string",
            regionCode: "Test string",
            timeZone: "Test string",
        });
        /**
         * Gets the configuration artifact associated with the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.getConfig({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /** Gets the AndroidApp identified by the specified resource name. */
        await gapi.client.firebase.projects.androidApps.get({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Lists each AndroidApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.androidApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Updates the attributes of the AndroidApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.androidApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Requests that a new AndroidApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.androidApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Returns a list of valid Google Cloud Platform (GCP) resource locations for
         * the specified Project (including a FirebaseProject).
         * <br>
         * <br>One of these locations can be selected as the Project's [_default_ GCP
         * resource location](https://firebase.google.com/docs/projects/locations),
         * which is the geographical location where project resources, such as Cloud
         * Firestore, will be provisioned by default. However, if the default GCP
         * resource location has already been set for the Project, then this setting
         * cannot be changed.
         * <br>
         * <br>This call checks for any location restrictions for the specified
         * Project and, thus, might return a subset of all possible GCP resource
         * locations. To list all GCP resource locations (regardless of any
         * restrictions), call the endpoint without specifying a `projectId` (that is,
         * `/v1beta1/{parent=projects/-}/listAvailableLocations`).
         * <br>
         * <br>To call `ListAvailableLocations` with a specified project, a member
         * must be at minimum a Viewer of the project. Calls without a specified
         * project do not require any specific project permissions.
         */
        await gapi.client.firebase.projects.availableLocations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets the configuration artifact associated with the specified WebApp. */
        await gapi.client.firebase.projects.webApps.getConfig({
            name: "Test string",
        });
        /** Gets the WebApp identified by the specified resource name. */
        await gapi.client.firebase.projects.webApps.get({
            name: "Test string",
        });
        /**
         * Lists each WebApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.webApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the WebApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.webApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new WebApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.webApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Sets the default Google Cloud Platform (GCP) resource location for the
         * specified FirebaseProject.
         * <br>
         * <br>This method creates an App Engine application with a
         * [default Cloud Storage
         * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
         * located in the specified
         * [`location_id`](#body.request_body.FIELDS.location_id).
         * This location must be one of the available
         * [GCP resource
         * locations](https://firebase.google.com/docs/projects/locations). <br>
         * <br>After the default GCP resource location is finalized, or if it was
         * already set, it cannot be changed. The default GCP resource location for
         * the specified FirebaseProject might already be set because either the
         * GCP `Project` already has an App Engine application or
         * `FinalizeDefaultLocation` was previously called with a specified
         * `location_id`. Any new calls to `FinalizeDefaultLocation` with a
         * <em>different</em> specified `location_id` will return a 409 error.
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations),
         * which can be used to track the provisioning process. The
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
         * the `Operation` is google.protobuf.Empty.
         * <br>
         * <br>The `Operation` can be polled by its `name` using
         * GetOperation until `done` is
         * true. When `done` is true, the `Operation` has either succeeded or failed.
         * If the `Operation` has succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
         * set to a google.protobuf.Empty; if the `Operation` has failed, its
         * `error` will be set to a google.rpc.Status. The `Operation` is
         * automatically deleted after completion, so there is no need to call
         * DeleteOperation.
         * <br>
         * <br>All fields listed in the [request body](#request-body) are required.
         * <br>
         * <br>To call `FinalizeDefaultLocation`, a member must be an Owner
         * of the project.
         */
        await gapi.client.firebase.projects.defaultLocation.finalize({
            parent: "Test string",
        }, {
            locationId: "Test string",
        });
        /** Gets the configuration artifact associated with the specified IosApp. */
        await gapi.client.firebase.projects.iosApps.getConfig({
            name: "Test string",
        });
        /** Gets the IosApp identified by the specified resource name. */
        await gapi.client.firebase.projects.iosApps.get({
            name: "Test string",
        });
        /**
         * Lists each IosApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.iosApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the IosApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.iosApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new IosApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.iosApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Links a FirebaseProject with an existing
         * [Google Analytics account](http://www.google.com/analytics/).
         * <br>
         * <br>Using this call, you can either:
         * <ul>
         * <li>Specify an `analyticsAccountId` to provision a new Google Analytics
         * property within the specified account and associate the new property with
         * your `FirebaseProject`.</li>
         * <li>Specify an existing `analyticsPropertyId` to associate the property
         * with your `FirebaseProject`.</li>
         * </ul>
         * <br>
         * Note that when you call `AddGoogleAnalytics`:
         * <ol>
         * <li>The first check determines if any existing data streams in the
         * Google Analytics property correspond to any existing Firebase Apps in your
         * `FirebaseProject` (based on the `packageName` or `bundleId` associated with
         * the data stream). Then, as applicable, the data streams and apps are
         * linked. Note that this auto-linking only applies to Android Apps and iOS
         * Apps.</li>
         * <li>If no corresponding data streams are found for your Firebase Apps,
         * new data streams are provisioned in the Google Analytics property
         * for each of your Firebase Apps. Note that a new data stream is always
         * provisioned for a Web App even if it was previously associated with a
         * data stream in your Analytics property.</li>
         * </ol>
         * Learn more about the hierarchy and structure of Google Analytics
         * accounts in the
         * [Analytics
         * documentation](https://support.google.com/analytics/answer/9303323).
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations).
         * Poll the `Operation` to track the provisioning process by calling
         * GetOperation until
         * [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
         * `done` is `true`, the `Operation` has either succeeded or failed. If the
         * `Operation` succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
         * an AnalyticsDetails; if the `Operation` failed, its
         * [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
         * google.rpc.Status.
         * <br>
         * <br>To call `AddGoogleAnalytics`, a member must be an Owner for
         * the existing `FirebaseProject` and have the
         * [`Edit` permission](https://support.google.com/analytics/answer/2884495)
         * for the Google Analytics account.
         * <br>
         * <br>If a `FirebaseProject` already has Google Analytics enabled, and you
         * call `AddGoogleAnalytics` using an `analyticsPropertyId` that's different
         * from the currently associated property, then the call will fail. Analytics
         * may have already been enabled in the Firebase console or by specifying
         * `timeZone` and `regionCode` in the call to
         * [`AddFirebase`](../../v1beta1/projects/addFirebase).
         */
        await gapi.client.firebase.projects.addGoogleAnalytics({
            parent: "Test string",
        }, {
            analyticsAccountId: "Test string",
            analyticsPropertyId: "Test string",
        });
        /**
         * Gets the configuration artifact associated with the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.getConfig({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /** Gets the AndroidApp identified by the specified resource name. */
        await gapi.client.firebase.projects.androidApps.get({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Lists each AndroidApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.androidApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Updates the attributes of the AndroidApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.androidApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Requests that a new AndroidApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.androidApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Returns a list of valid Google Cloud Platform (GCP) resource locations for
         * the specified Project (including a FirebaseProject).
         * <br>
         * <br>One of these locations can be selected as the Project's [_default_ GCP
         * resource location](https://firebase.google.com/docs/projects/locations),
         * which is the geographical location where project resources, such as Cloud
         * Firestore, will be provisioned by default. However, if the default GCP
         * resource location has already been set for the Project, then this setting
         * cannot be changed.
         * <br>
         * <br>This call checks for any location restrictions for the specified
         * Project and, thus, might return a subset of all possible GCP resource
         * locations. To list all GCP resource locations (regardless of any
         * restrictions), call the endpoint without specifying a `projectId` (that is,
         * `/v1beta1/{parent=projects/-}/listAvailableLocations`).
         * <br>
         * <br>To call `ListAvailableLocations` with a specified project, a member
         * must be at minimum a Viewer of the project. Calls without a specified
         * project do not require any specific project permissions.
         */
        await gapi.client.firebase.projects.availableLocations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets the configuration artifact associated with the specified WebApp. */
        await gapi.client.firebase.projects.webApps.getConfig({
            name: "Test string",
        });
        /** Gets the WebApp identified by the specified resource name. */
        await gapi.client.firebase.projects.webApps.get({
            name: "Test string",
        });
        /**
         * Lists each WebApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.webApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the WebApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.webApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new WebApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.webApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Sets the default Google Cloud Platform (GCP) resource location for the
         * specified FirebaseProject.
         * <br>
         * <br>This method creates an App Engine application with a
         * [default Cloud Storage
         * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
         * located in the specified
         * [`location_id`](#body.request_body.FIELDS.location_id).
         * This location must be one of the available
         * [GCP resource
         * locations](https://firebase.google.com/docs/projects/locations). <br>
         * <br>After the default GCP resource location is finalized, or if it was
         * already set, it cannot be changed. The default GCP resource location for
         * the specified FirebaseProject might already be set because either the
         * GCP `Project` already has an App Engine application or
         * `FinalizeDefaultLocation` was previously called with a specified
         * `location_id`. Any new calls to `FinalizeDefaultLocation` with a
         * <em>different</em> specified `location_id` will return a 409 error.
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations),
         * which can be used to track the provisioning process. The
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
         * the `Operation` is google.protobuf.Empty.
         * <br>
         * <br>The `Operation` can be polled by its `name` using
         * GetOperation until `done` is
         * true. When `done` is true, the `Operation` has either succeeded or failed.
         * If the `Operation` has succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
         * set to a google.protobuf.Empty; if the `Operation` has failed, its
         * `error` will be set to a google.rpc.Status. The `Operation` is
         * automatically deleted after completion, so there is no need to call
         * DeleteOperation.
         * <br>
         * <br>All fields listed in the [request body](#request-body) are required.
         * <br>
         * <br>To call `FinalizeDefaultLocation`, a member must be an Owner
         * of the project.
         */
        await gapi.client.firebase.projects.defaultLocation.finalize({
            parent: "Test string",
        }, {
            locationId: "Test string",
        });
        /** Gets the configuration artifact associated with the specified IosApp. */
        await gapi.client.firebase.projects.iosApps.getConfig({
            name: "Test string",
        });
        /** Gets the IosApp identified by the specified resource name. */
        await gapi.client.firebase.projects.iosApps.get({
            name: "Test string",
        });
        /**
         * Lists each IosApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.iosApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the IosApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.iosApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new IosApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.iosApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /** Gets the FirebaseProject identified by the specified resource name. */
        await gapi.client.firebase.projects.get({
            name: "Test string",
        });
        /**
         * Gets the configuration artifact associated with the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.getConfig({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /** Gets the AndroidApp identified by the specified resource name. */
        await gapi.client.firebase.projects.androidApps.get({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Lists each AndroidApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.androidApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Updates the attributes of the AndroidApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.androidApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Requests that a new AndroidApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.androidApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Returns a list of valid Google Cloud Platform (GCP) resource locations for
         * the specified Project (including a FirebaseProject).
         * <br>
         * <br>One of these locations can be selected as the Project's [_default_ GCP
         * resource location](https://firebase.google.com/docs/projects/locations),
         * which is the geographical location where project resources, such as Cloud
         * Firestore, will be provisioned by default. However, if the default GCP
         * resource location has already been set for the Project, then this setting
         * cannot be changed.
         * <br>
         * <br>This call checks for any location restrictions for the specified
         * Project and, thus, might return a subset of all possible GCP resource
         * locations. To list all GCP resource locations (regardless of any
         * restrictions), call the endpoint without specifying a `projectId` (that is,
         * `/v1beta1/{parent=projects/-}/listAvailableLocations`).
         * <br>
         * <br>To call `ListAvailableLocations` with a specified project, a member
         * must be at minimum a Viewer of the project. Calls without a specified
         * project do not require any specific project permissions.
         */
        await gapi.client.firebase.projects.availableLocations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets the configuration artifact associated with the specified WebApp. */
        await gapi.client.firebase.projects.webApps.getConfig({
            name: "Test string",
        });
        /** Gets the WebApp identified by the specified resource name. */
        await gapi.client.firebase.projects.webApps.get({
            name: "Test string",
        });
        /**
         * Lists each WebApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.webApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the WebApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.webApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new WebApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.webApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Sets the default Google Cloud Platform (GCP) resource location for the
         * specified FirebaseProject.
         * <br>
         * <br>This method creates an App Engine application with a
         * [default Cloud Storage
         * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
         * located in the specified
         * [`location_id`](#body.request_body.FIELDS.location_id).
         * This location must be one of the available
         * [GCP resource
         * locations](https://firebase.google.com/docs/projects/locations). <br>
         * <br>After the default GCP resource location is finalized, or if it was
         * already set, it cannot be changed. The default GCP resource location for
         * the specified FirebaseProject might already be set because either the
         * GCP `Project` already has an App Engine application or
         * `FinalizeDefaultLocation` was previously called with a specified
         * `location_id`. Any new calls to `FinalizeDefaultLocation` with a
         * <em>different</em> specified `location_id` will return a 409 error.
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations),
         * which can be used to track the provisioning process. The
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
         * the `Operation` is google.protobuf.Empty.
         * <br>
         * <br>The `Operation` can be polled by its `name` using
         * GetOperation until `done` is
         * true. When `done` is true, the `Operation` has either succeeded or failed.
         * If the `Operation` has succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
         * set to a google.protobuf.Empty; if the `Operation` has failed, its
         * `error` will be set to a google.rpc.Status. The `Operation` is
         * automatically deleted after completion, so there is no need to call
         * DeleteOperation.
         * <br>
         * <br>All fields listed in the [request body](#request-body) are required.
         * <br>
         * <br>To call `FinalizeDefaultLocation`, a member must be an Owner
         * of the project.
         */
        await gapi.client.firebase.projects.defaultLocation.finalize({
            parent: "Test string",
        }, {
            locationId: "Test string",
        });
        /** Gets the configuration artifact associated with the specified IosApp. */
        await gapi.client.firebase.projects.iosApps.getConfig({
            name: "Test string",
        });
        /** Gets the IosApp identified by the specified resource name. */
        await gapi.client.firebase.projects.iosApps.get({
            name: "Test string",
        });
        /**
         * Lists each IosApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.iosApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the IosApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.iosApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new IosApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.iosApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Gets the configuration artifact used by servers to simplify initialization.
         * <br>
         * <br>Typically, this configuration is used with the Firebase Admin SDK
         * [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk)
         * command.
         */
        await gapi.client.firebase.projects.getAdminSdkConfig({
            name: "Test string",
        });
        /**
         * Gets the configuration artifact associated with the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.getConfig({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /** Gets the AndroidApp identified by the specified resource name. */
        await gapi.client.firebase.projects.androidApps.get({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Lists each AndroidApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.androidApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Updates the attributes of the AndroidApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.androidApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Requests that a new AndroidApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.androidApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Returns a list of valid Google Cloud Platform (GCP) resource locations for
         * the specified Project (including a FirebaseProject).
         * <br>
         * <br>One of these locations can be selected as the Project's [_default_ GCP
         * resource location](https://firebase.google.com/docs/projects/locations),
         * which is the geographical location where project resources, such as Cloud
         * Firestore, will be provisioned by default. However, if the default GCP
         * resource location has already been set for the Project, then this setting
         * cannot be changed.
         * <br>
         * <br>This call checks for any location restrictions for the specified
         * Project and, thus, might return a subset of all possible GCP resource
         * locations. To list all GCP resource locations (regardless of any
         * restrictions), call the endpoint without specifying a `projectId` (that is,
         * `/v1beta1/{parent=projects/-}/listAvailableLocations`).
         * <br>
         * <br>To call `ListAvailableLocations` with a specified project, a member
         * must be at minimum a Viewer of the project. Calls without a specified
         * project do not require any specific project permissions.
         */
        await gapi.client.firebase.projects.availableLocations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets the configuration artifact associated with the specified WebApp. */
        await gapi.client.firebase.projects.webApps.getConfig({
            name: "Test string",
        });
        /** Gets the WebApp identified by the specified resource name. */
        await gapi.client.firebase.projects.webApps.get({
            name: "Test string",
        });
        /**
         * Lists each WebApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.webApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the WebApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.webApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new WebApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.webApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Sets the default Google Cloud Platform (GCP) resource location for the
         * specified FirebaseProject.
         * <br>
         * <br>This method creates an App Engine application with a
         * [default Cloud Storage
         * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
         * located in the specified
         * [`location_id`](#body.request_body.FIELDS.location_id).
         * This location must be one of the available
         * [GCP resource
         * locations](https://firebase.google.com/docs/projects/locations). <br>
         * <br>After the default GCP resource location is finalized, or if it was
         * already set, it cannot be changed. The default GCP resource location for
         * the specified FirebaseProject might already be set because either the
         * GCP `Project` already has an App Engine application or
         * `FinalizeDefaultLocation` was previously called with a specified
         * `location_id`. Any new calls to `FinalizeDefaultLocation` with a
         * <em>different</em> specified `location_id` will return a 409 error.
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations),
         * which can be used to track the provisioning process. The
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
         * the `Operation` is google.protobuf.Empty.
         * <br>
         * <br>The `Operation` can be polled by its `name` using
         * GetOperation until `done` is
         * true. When `done` is true, the `Operation` has either succeeded or failed.
         * If the `Operation` has succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
         * set to a google.protobuf.Empty; if the `Operation` has failed, its
         * `error` will be set to a google.rpc.Status. The `Operation` is
         * automatically deleted after completion, so there is no need to call
         * DeleteOperation.
         * <br>
         * <br>All fields listed in the [request body](#request-body) are required.
         * <br>
         * <br>To call `FinalizeDefaultLocation`, a member must be an Owner
         * of the project.
         */
        await gapi.client.firebase.projects.defaultLocation.finalize({
            parent: "Test string",
        }, {
            locationId: "Test string",
        });
        /** Gets the configuration artifact associated with the specified IosApp. */
        await gapi.client.firebase.projects.iosApps.getConfig({
            name: "Test string",
        });
        /** Gets the IosApp identified by the specified resource name. */
        await gapi.client.firebase.projects.iosApps.get({
            name: "Test string",
        });
        /**
         * Lists each IosApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.iosApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the IosApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.iosApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new IosApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.iosApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Gets the Google Analytics details currently associated with a
         * FirebaseProject.
         * <br>
         * <br>If the `FirebaseProject` is not yet linked to Google Analytics, then
         * the response to `GetAnalyticsDetails` is NOT_FOUND.
         */
        await gapi.client.firebase.projects.getAnalyticsDetails({
            name: "Test string",
        });
        /**
         * Gets the configuration artifact associated with the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.getConfig({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /** Gets the AndroidApp identified by the specified resource name. */
        await gapi.client.firebase.projects.androidApps.get({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Lists each AndroidApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.androidApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Updates the attributes of the AndroidApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.androidApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Requests that a new AndroidApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.androidApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Returns a list of valid Google Cloud Platform (GCP) resource locations for
         * the specified Project (including a FirebaseProject).
         * <br>
         * <br>One of these locations can be selected as the Project's [_default_ GCP
         * resource location](https://firebase.google.com/docs/projects/locations),
         * which is the geographical location where project resources, such as Cloud
         * Firestore, will be provisioned by default. However, if the default GCP
         * resource location has already been set for the Project, then this setting
         * cannot be changed.
         * <br>
         * <br>This call checks for any location restrictions for the specified
         * Project and, thus, might return a subset of all possible GCP resource
         * locations. To list all GCP resource locations (regardless of any
         * restrictions), call the endpoint without specifying a `projectId` (that is,
         * `/v1beta1/{parent=projects/-}/listAvailableLocations`).
         * <br>
         * <br>To call `ListAvailableLocations` with a specified project, a member
         * must be at minimum a Viewer of the project. Calls without a specified
         * project do not require any specific project permissions.
         */
        await gapi.client.firebase.projects.availableLocations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets the configuration artifact associated with the specified WebApp. */
        await gapi.client.firebase.projects.webApps.getConfig({
            name: "Test string",
        });
        /** Gets the WebApp identified by the specified resource name. */
        await gapi.client.firebase.projects.webApps.get({
            name: "Test string",
        });
        /**
         * Lists each WebApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.webApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the WebApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.webApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new WebApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.webApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Sets the default Google Cloud Platform (GCP) resource location for the
         * specified FirebaseProject.
         * <br>
         * <br>This method creates an App Engine application with a
         * [default Cloud Storage
         * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
         * located in the specified
         * [`location_id`](#body.request_body.FIELDS.location_id).
         * This location must be one of the available
         * [GCP resource
         * locations](https://firebase.google.com/docs/projects/locations). <br>
         * <br>After the default GCP resource location is finalized, or if it was
         * already set, it cannot be changed. The default GCP resource location for
         * the specified FirebaseProject might already be set because either the
         * GCP `Project` already has an App Engine application or
         * `FinalizeDefaultLocation` was previously called with a specified
         * `location_id`. Any new calls to `FinalizeDefaultLocation` with a
         * <em>different</em> specified `location_id` will return a 409 error.
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations),
         * which can be used to track the provisioning process. The
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
         * the `Operation` is google.protobuf.Empty.
         * <br>
         * <br>The `Operation` can be polled by its `name` using
         * GetOperation until `done` is
         * true. When `done` is true, the `Operation` has either succeeded or failed.
         * If the `Operation` has succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
         * set to a google.protobuf.Empty; if the `Operation` has failed, its
         * `error` will be set to a google.rpc.Status. The `Operation` is
         * automatically deleted after completion, so there is no need to call
         * DeleteOperation.
         * <br>
         * <br>All fields listed in the [request body](#request-body) are required.
         * <br>
         * <br>To call `FinalizeDefaultLocation`, a member must be an Owner
         * of the project.
         */
        await gapi.client.firebase.projects.defaultLocation.finalize({
            parent: "Test string",
        }, {
            locationId: "Test string",
        });
        /** Gets the configuration artifact associated with the specified IosApp. */
        await gapi.client.firebase.projects.iosApps.getConfig({
            name: "Test string",
        });
        /** Gets the IosApp identified by the specified resource name. */
        await gapi.client.firebase.projects.iosApps.get({
            name: "Test string",
        });
        /**
         * Lists each IosApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.iosApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the IosApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.iosApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new IosApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.iosApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Lists each FirebaseProject accessible to the caller.
         * <br>
         * <br>The elements are returned in no particular order, but they will be a
         * consistent view of the Projects when additional requests are made with a
         * `pageToken`.
         * <br>
         * <br>This method is eventually consistent with Project mutations, which
         * means newly provisioned Projects and recent modifications to existing
         * Projects might not be reflected in the set of Projects. The list will
         * include only ACTIVE Projects.
         * <br>
         * <br>Use
         * GetFirebaseProject
         * for consistent reads as well as for additional Project details.
         */
        await gapi.client.firebase.projects.list({
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Gets the configuration artifact associated with the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.getConfig({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /** Gets the AndroidApp identified by the specified resource name. */
        await gapi.client.firebase.projects.androidApps.get({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Lists each AndroidApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.androidApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Updates the attributes of the AndroidApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.androidApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Requests that a new AndroidApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.androidApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Returns a list of valid Google Cloud Platform (GCP) resource locations for
         * the specified Project (including a FirebaseProject).
         * <br>
         * <br>One of these locations can be selected as the Project's [_default_ GCP
         * resource location](https://firebase.google.com/docs/projects/locations),
         * which is the geographical location where project resources, such as Cloud
         * Firestore, will be provisioned by default. However, if the default GCP
         * resource location has already been set for the Project, then this setting
         * cannot be changed.
         * <br>
         * <br>This call checks for any location restrictions for the specified
         * Project and, thus, might return a subset of all possible GCP resource
         * locations. To list all GCP resource locations (regardless of any
         * restrictions), call the endpoint without specifying a `projectId` (that is,
         * `/v1beta1/{parent=projects/-}/listAvailableLocations`).
         * <br>
         * <br>To call `ListAvailableLocations` with a specified project, a member
         * must be at minimum a Viewer of the project. Calls without a specified
         * project do not require any specific project permissions.
         */
        await gapi.client.firebase.projects.availableLocations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets the configuration artifact associated with the specified WebApp. */
        await gapi.client.firebase.projects.webApps.getConfig({
            name: "Test string",
        });
        /** Gets the WebApp identified by the specified resource name. */
        await gapi.client.firebase.projects.webApps.get({
            name: "Test string",
        });
        /**
         * Lists each WebApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.webApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the WebApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.webApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new WebApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.webApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Sets the default Google Cloud Platform (GCP) resource location for the
         * specified FirebaseProject.
         * <br>
         * <br>This method creates an App Engine application with a
         * [default Cloud Storage
         * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
         * located in the specified
         * [`location_id`](#body.request_body.FIELDS.location_id).
         * This location must be one of the available
         * [GCP resource
         * locations](https://firebase.google.com/docs/projects/locations). <br>
         * <br>After the default GCP resource location is finalized, or if it was
         * already set, it cannot be changed. The default GCP resource location for
         * the specified FirebaseProject might already be set because either the
         * GCP `Project` already has an App Engine application or
         * `FinalizeDefaultLocation` was previously called with a specified
         * `location_id`. Any new calls to `FinalizeDefaultLocation` with a
         * <em>different</em> specified `location_id` will return a 409 error.
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations),
         * which can be used to track the provisioning process. The
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
         * the `Operation` is google.protobuf.Empty.
         * <br>
         * <br>The `Operation` can be polled by its `name` using
         * GetOperation until `done` is
         * true. When `done` is true, the `Operation` has either succeeded or failed.
         * If the `Operation` has succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
         * set to a google.protobuf.Empty; if the `Operation` has failed, its
         * `error` will be set to a google.rpc.Status. The `Operation` is
         * automatically deleted after completion, so there is no need to call
         * DeleteOperation.
         * <br>
         * <br>All fields listed in the [request body](#request-body) are required.
         * <br>
         * <br>To call `FinalizeDefaultLocation`, a member must be an Owner
         * of the project.
         */
        await gapi.client.firebase.projects.defaultLocation.finalize({
            parent: "Test string",
        }, {
            locationId: "Test string",
        });
        /** Gets the configuration artifact associated with the specified IosApp. */
        await gapi.client.firebase.projects.iosApps.getConfig({
            name: "Test string",
        });
        /** Gets the IosApp identified by the specified resource name. */
        await gapi.client.firebase.projects.iosApps.get({
            name: "Test string",
        });
        /**
         * Lists each IosApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.iosApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the IosApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.iosApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new IosApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.iosApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Updates the attributes of the FirebaseProject identified by the
         * specified resource name.
         * <br>
         * <br>All [query parameters](#query-parameters) are required.
         */
        await gapi.client.firebase.projects.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
            projectNumber: "Test string",
            resources: {
                hostingSite: "Test string",
                locationId: "Test string",
                realtimeDatabaseInstance: "Test string",
                storageBucket: "Test string",
            },
        });
        /**
         * Gets the configuration artifact associated with the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.getConfig({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /** Gets the AndroidApp identified by the specified resource name. */
        await gapi.client.firebase.projects.androidApps.get({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Lists each AndroidApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.androidApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Updates the attributes of the AndroidApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.androidApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Requests that a new AndroidApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.androidApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Returns a list of valid Google Cloud Platform (GCP) resource locations for
         * the specified Project (including a FirebaseProject).
         * <br>
         * <br>One of these locations can be selected as the Project's [_default_ GCP
         * resource location](https://firebase.google.com/docs/projects/locations),
         * which is the geographical location where project resources, such as Cloud
         * Firestore, will be provisioned by default. However, if the default GCP
         * resource location has already been set for the Project, then this setting
         * cannot be changed.
         * <br>
         * <br>This call checks for any location restrictions for the specified
         * Project and, thus, might return a subset of all possible GCP resource
         * locations. To list all GCP resource locations (regardless of any
         * restrictions), call the endpoint without specifying a `projectId` (that is,
         * `/v1beta1/{parent=projects/-}/listAvailableLocations`).
         * <br>
         * <br>To call `ListAvailableLocations` with a specified project, a member
         * must be at minimum a Viewer of the project. Calls without a specified
         * project do not require any specific project permissions.
         */
        await gapi.client.firebase.projects.availableLocations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets the configuration artifact associated with the specified WebApp. */
        await gapi.client.firebase.projects.webApps.getConfig({
            name: "Test string",
        });
        /** Gets the WebApp identified by the specified resource name. */
        await gapi.client.firebase.projects.webApps.get({
            name: "Test string",
        });
        /**
         * Lists each WebApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.webApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the WebApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.webApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new WebApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.webApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Sets the default Google Cloud Platform (GCP) resource location for the
         * specified FirebaseProject.
         * <br>
         * <br>This method creates an App Engine application with a
         * [default Cloud Storage
         * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
         * located in the specified
         * [`location_id`](#body.request_body.FIELDS.location_id).
         * This location must be one of the available
         * [GCP resource
         * locations](https://firebase.google.com/docs/projects/locations). <br>
         * <br>After the default GCP resource location is finalized, or if it was
         * already set, it cannot be changed. The default GCP resource location for
         * the specified FirebaseProject might already be set because either the
         * GCP `Project` already has an App Engine application or
         * `FinalizeDefaultLocation` was previously called with a specified
         * `location_id`. Any new calls to `FinalizeDefaultLocation` with a
         * <em>different</em> specified `location_id` will return a 409 error.
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations),
         * which can be used to track the provisioning process. The
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
         * the `Operation` is google.protobuf.Empty.
         * <br>
         * <br>The `Operation` can be polled by its `name` using
         * GetOperation until `done` is
         * true. When `done` is true, the `Operation` has either succeeded or failed.
         * If the `Operation` has succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
         * set to a google.protobuf.Empty; if the `Operation` has failed, its
         * `error` will be set to a google.rpc.Status. The `Operation` is
         * automatically deleted after completion, so there is no need to call
         * DeleteOperation.
         * <br>
         * <br>All fields listed in the [request body](#request-body) are required.
         * <br>
         * <br>To call `FinalizeDefaultLocation`, a member must be an Owner
         * of the project.
         */
        await gapi.client.firebase.projects.defaultLocation.finalize({
            parent: "Test string",
        }, {
            locationId: "Test string",
        });
        /** Gets the configuration artifact associated with the specified IosApp. */
        await gapi.client.firebase.projects.iosApps.getConfig({
            name: "Test string",
        });
        /** Gets the IosApp identified by the specified resource name. */
        await gapi.client.firebase.projects.iosApps.get({
            name: "Test string",
        });
        /**
         * Lists each IosApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.iosApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the IosApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.iosApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new IosApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.iosApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Unlinks the specified `FirebaseProject` from its Google Analytics account.
         * <br>
         * <br>This call removes the association of the specified `FirebaseProject`
         * with its current Google Analytics property. However, this call does not
         * delete the Google Analytics resources, such as the Google Analytics
         * property or any data streams.
         * <br>
         * <br>These resources may be re-associated later to the `FirebaseProject` by
         * calling
         * [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and
         * specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps,
         * this call re-links data streams with their corresponding apps. However,
         * for Web Apps, this call provisions a <em>new</em> data stream for each Web
         * App.
         * <br>
         * <br>To call `RemoveAnalytics`, a member must be an Owner for
         * the `FirebaseProject`.
         */
        await gapi.client.firebase.projects.removeAnalytics({
            parent: "Test string",
        }, {
            analyticsPropertyId: "Test string",
        });
        /**
         * Gets the configuration artifact associated with the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.getConfig({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /** Gets the AndroidApp identified by the specified resource name. */
        await gapi.client.firebase.projects.androidApps.get({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Lists each AndroidApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.androidApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Updates the attributes of the AndroidApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.androidApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Requests that a new AndroidApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.androidApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Returns a list of valid Google Cloud Platform (GCP) resource locations for
         * the specified Project (including a FirebaseProject).
         * <br>
         * <br>One of these locations can be selected as the Project's [_default_ GCP
         * resource location](https://firebase.google.com/docs/projects/locations),
         * which is the geographical location where project resources, such as Cloud
         * Firestore, will be provisioned by default. However, if the default GCP
         * resource location has already been set for the Project, then this setting
         * cannot be changed.
         * <br>
         * <br>This call checks for any location restrictions for the specified
         * Project and, thus, might return a subset of all possible GCP resource
         * locations. To list all GCP resource locations (regardless of any
         * restrictions), call the endpoint without specifying a `projectId` (that is,
         * `/v1beta1/{parent=projects/-}/listAvailableLocations`).
         * <br>
         * <br>To call `ListAvailableLocations` with a specified project, a member
         * must be at minimum a Viewer of the project. Calls without a specified
         * project do not require any specific project permissions.
         */
        await gapi.client.firebase.projects.availableLocations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets the configuration artifact associated with the specified WebApp. */
        await gapi.client.firebase.projects.webApps.getConfig({
            name: "Test string",
        });
        /** Gets the WebApp identified by the specified resource name. */
        await gapi.client.firebase.projects.webApps.get({
            name: "Test string",
        });
        /**
         * Lists each WebApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.webApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the WebApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.webApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new WebApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.webApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Sets the default Google Cloud Platform (GCP) resource location for the
         * specified FirebaseProject.
         * <br>
         * <br>This method creates an App Engine application with a
         * [default Cloud Storage
         * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
         * located in the specified
         * [`location_id`](#body.request_body.FIELDS.location_id).
         * This location must be one of the available
         * [GCP resource
         * locations](https://firebase.google.com/docs/projects/locations). <br>
         * <br>After the default GCP resource location is finalized, or if it was
         * already set, it cannot be changed. The default GCP resource location for
         * the specified FirebaseProject might already be set because either the
         * GCP `Project` already has an App Engine application or
         * `FinalizeDefaultLocation` was previously called with a specified
         * `location_id`. Any new calls to `FinalizeDefaultLocation` with a
         * <em>different</em> specified `location_id` will return a 409 error.
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations),
         * which can be used to track the provisioning process. The
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
         * the `Operation` is google.protobuf.Empty.
         * <br>
         * <br>The `Operation` can be polled by its `name` using
         * GetOperation until `done` is
         * true. When `done` is true, the `Operation` has either succeeded or failed.
         * If the `Operation` has succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
         * set to a google.protobuf.Empty; if the `Operation` has failed, its
         * `error` will be set to a google.rpc.Status. The `Operation` is
         * automatically deleted after completion, so there is no need to call
         * DeleteOperation.
         * <br>
         * <br>All fields listed in the [request body](#request-body) are required.
         * <br>
         * <br>To call `FinalizeDefaultLocation`, a member must be an Owner
         * of the project.
         */
        await gapi.client.firebase.projects.defaultLocation.finalize({
            parent: "Test string",
        }, {
            locationId: "Test string",
        });
        /** Gets the configuration artifact associated with the specified IosApp. */
        await gapi.client.firebase.projects.iosApps.getConfig({
            name: "Test string",
        });
        /** Gets the IosApp identified by the specified resource name. */
        await gapi.client.firebase.projects.iosApps.get({
            name: "Test string",
        });
        /**
         * Lists each IosApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.iosApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the IosApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.iosApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new IosApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.iosApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * A convenience method that lists all available Apps for the specified
         * FirebaseProject.
         * <br>
         * <br>Typically, interaction with an App should be done using the
         * platform-specific service, but some tool use-cases require a summary of all
         * known Apps (such as for App selector interfaces).
         */
        await gapi.client.firebase.projects.searchApps({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Gets the configuration artifact associated with the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.getConfig({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /** Gets the AndroidApp identified by the specified resource name. */
        await gapi.client.firebase.projects.androidApps.get({
            name: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Lists each AndroidApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.androidApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Updates the attributes of the AndroidApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.androidApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Requests that a new AndroidApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.androidApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            displayName: "Test string",
            name: "Test string",
            packageName: "Test string",
            projectId: "Test string",
        });
        /** Removes a SHA certificate from the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.delete({
            name: "Test string",
        });
        /**
         * Returns the list of SHA-1 and SHA-256 certificates for the specified
         * AndroidApp.
         */
        await gapi.client.firebase.projects.androidApps.sha.list({
            parent: "Test string",
        });
        /** Adds a SHA certificate to the specified AndroidApp. */
        await gapi.client.firebase.projects.androidApps.sha.create({
            parent: "Test string",
        }, {
            certType: "Test string",
            name: "Test string",
            shaHash: "Test string",
        });
        /**
         * Returns a list of valid Google Cloud Platform (GCP) resource locations for
         * the specified Project (including a FirebaseProject).
         * <br>
         * <br>One of these locations can be selected as the Project's [_default_ GCP
         * resource location](https://firebase.google.com/docs/projects/locations),
         * which is the geographical location where project resources, such as Cloud
         * Firestore, will be provisioned by default. However, if the default GCP
         * resource location has already been set for the Project, then this setting
         * cannot be changed.
         * <br>
         * <br>This call checks for any location restrictions for the specified
         * Project and, thus, might return a subset of all possible GCP resource
         * locations. To list all GCP resource locations (regardless of any
         * restrictions), call the endpoint without specifying a `projectId` (that is,
         * `/v1beta1/{parent=projects/-}/listAvailableLocations`).
         * <br>
         * <br>To call `ListAvailableLocations` with a specified project, a member
         * must be at minimum a Viewer of the project. Calls without a specified
         * project do not require any specific project permissions.
         */
        await gapi.client.firebase.projects.availableLocations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets the configuration artifact associated with the specified WebApp. */
        await gapi.client.firebase.projects.webApps.getConfig({
            name: "Test string",
        });
        /** Gets the WebApp identified by the specified resource name. */
        await gapi.client.firebase.projects.webApps.get({
            name: "Test string",
        });
        /**
         * Lists each WebApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.webApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the WebApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.webApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new WebApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.webApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appUrls: [
                "Test string"            ],
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Sets the default Google Cloud Platform (GCP) resource location for the
         * specified FirebaseProject.
         * <br>
         * <br>This method creates an App Engine application with a
         * [default Cloud Storage
         * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
         * located in the specified
         * [`location_id`](#body.request_body.FIELDS.location_id).
         * This location must be one of the available
         * [GCP resource
         * locations](https://firebase.google.com/docs/projects/locations). <br>
         * <br>After the default GCP resource location is finalized, or if it was
         * already set, it cannot be changed. The default GCP resource location for
         * the specified FirebaseProject might already be set because either the
         * GCP `Project` already has an App Engine application or
         * `FinalizeDefaultLocation` was previously called with a specified
         * `location_id`. Any new calls to `FinalizeDefaultLocation` with a
         * <em>different</em> specified `location_id` will return a 409 error.
         * <br>
         * <br>The result of this call is an [`Operation`](../../v1beta1/operations),
         * which can be used to track the provisioning process. The
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
         * the `Operation` is google.protobuf.Empty.
         * <br>
         * <br>The `Operation` can be polled by its `name` using
         * GetOperation until `done` is
         * true. When `done` is true, the `Operation` has either succeeded or failed.
         * If the `Operation` has succeeded, its
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
         * set to a google.protobuf.Empty; if the `Operation` has failed, its
         * `error` will be set to a google.rpc.Status. The `Operation` is
         * automatically deleted after completion, so there is no need to call
         * DeleteOperation.
         * <br>
         * <br>All fields listed in the [request body](#request-body) are required.
         * <br>
         * <br>To call `FinalizeDefaultLocation`, a member must be an Owner
         * of the project.
         */
        await gapi.client.firebase.projects.defaultLocation.finalize({
            parent: "Test string",
        }, {
            locationId: "Test string",
        });
        /** Gets the configuration artifact associated with the specified IosApp. */
        await gapi.client.firebase.projects.iosApps.getConfig({
            name: "Test string",
        });
        /** Gets the IosApp identified by the specified resource name. */
        await gapi.client.firebase.projects.iosApps.get({
            name: "Test string",
        });
        /**
         * Lists each IosApp associated with the specified parent Project.
         * <br>
         * <br>The elements are returned in no particular order, but will be a
         * consistent view of the Apps when additional requests are made with a
         * `pageToken`.
         */
        await gapi.client.firebase.projects.iosApps.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the attributes of the IosApp identified by the specified
         * resource name.
         */
        await gapi.client.firebase.projects.iosApps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
        /**
         * Requests that a new IosApp be created.
         * <br>
         * <br>The result of this call is an `Operation` which can be used to track
         * the provisioning process. The `Operation` is automatically deleted after
         * completion, so there is no need to call `DeleteOperation`.
         */
        await gapi.client.firebase.projects.iosApps.create({
            parent: "Test string",
        }, {
            appId: "Test string",
            appStoreId: "Test string",
            bundleId: "Test string",
            displayName: "Test string",
            name: "Test string",
            projectId: "Test string",
        });
    }
});
