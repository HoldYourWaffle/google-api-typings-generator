/* This is stub file for gapi.client.commentanalyzer definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('commentanalyzer', 'v1alpha1', () => {
        /** now we can use gapi.client.commentanalyzer */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View your email address */
            'https://www.googleapis.com/auth/userinfo.email',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Analyzes the provided text and returns scores for requested attributes. */
        await gapi.client.commentanalyzer.comments.analyze({
        }, {
            clientToken: "Test string",
            comment: {
                text: "Test string",
                type: "Test string",
            },
            communityId: "Test string",
            context: {
                articleAndParentComment: {
                    article: {
                        text: "Test string",
                        type: "Test string",
                    },
                    parentComment: {
                        text: "Test string",
                        type: "Test string",
                    },
                },
                entries: [
                    {
                        text: "Test string",
                        type: "Test string",
                    }                ],
            },
            doNotStore: true,
            languages: [
                "Test string"            ],
            requestedAttributes: {
                A: {
                    scoreThreshold: 42,
                    scoreType: "Test string",
                }            },
            sessionId: "Test string",
            spanAnnotations: true,
        });
        /** Suggest comment scores as training data. */
        await gapi.client.commentanalyzer.comments.suggestscore({
        }, {
            attributeScores: {
                A: {
                    spanScores: [
                        {
                            begin: 42,
                            end: 42,
                            score: {
                                type: "Test string",
                                value: 42,
                            },
                        }                    ],
                    summaryScore: {
                        type: "Test string",
                        value: 42,
                    },
                }            },
            clientToken: "Test string",
            comment: {
                text: "Test string",
                type: "Test string",
            },
            communityId: "Test string",
            context: {
                articleAndParentComment: {
                    article: {
                        text: "Test string",
                        type: "Test string",
                    },
                    parentComment: {
                        text: "Test string",
                        type: "Test string",
                    },
                },
                entries: [
                    {
                        text: "Test string",
                        type: "Test string",
                    }                ],
            },
            languages: [
                "Test string"            ],
            sessionId: "Test string",
        });
    }
});
