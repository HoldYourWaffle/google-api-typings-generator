// Type definitions for non-npm package Display & Video 360 API v1 1.0
// Project: https://developers.google.com/display-video/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://displayvideo.googleapis.com/$discovery/rest?version=v1
// Revision: 20200226

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Display & Video 360 API v1 */
    function load(name: "displayvideo", version: "v1"): PromiseLike<void>;
    function load(name: "displayvideo", version: "v1", callback: () => any): void;

    namespace displayvideo {
        interface CreateSdfDownloadTaskRequest {
            /** The ID of the advertiser to download SDF for. */
            advertiserId?: string;
            /** Filters on entities by their entity IDs. */
            idFilter?: IdFilter;
            /** Filters on Inventory Sources by their IDs. */
            inventorySourceFilter?: InventorySourceFilter;
            /**
             * Filters on selected file types. The entities in each file are filtered
             * by a chosen set of filter entities. The filter entities must be the same
             * type as, or a parent type of, the selected file types.
             */
            parentEntityFilter?: ParentEntityFilter;
            /** The ID of the partner to download SDF for. */
            partnerId?: string;
            /**
             * Required. The SDF version of the downloaded file. If set to
             * `SDF_VERSION_UNSPECIFIED`, this will default to the version specified by
             * the advertiser or partner identified by `root_id`. An advertiser inherits
             * its SDF version from its partner unless configured otherwise.
             */
            version?: string;
        }
        interface GoogleBytestreamMedia {
            /** Name of the media resource. */
            resourceName?: string;
        }
        interface IdFilter {
            /**
             * TrueView Ads to download by ID. All IDs must belong to the same
             * Advertiser or
             * Partner specified in
             * CreateSdfDownloadTaskRequest.
             */
            adGroupAdIds?: string[];
            /**
             * TrueView Ad Groups to download by ID. All IDs must belong to the same
             * Advertiser or
             * Partner specified in
             * CreateSdfDownloadTaskRequest.
             */
            adGroupIds?: string[];
            /**
             * Campaigns to download by ID. All IDs must belong to the same
             * Advertiser or
             * Partner specified in
             * CreateSdfDownloadTaskRequest.
             */
            campaignIds?: string[];
            /**
             * Insertion Orders to download by ID. All IDs must belong to the same
             * Advertiser or
             * Partner specified in
             * CreateSdfDownloadTaskRequest.
             */
            insertionOrderIds?: string[];
            /**
             * Line Items to download by ID. All IDs must belong to the same
             * Advertiser or
             * Partner specified in
             * CreateSdfDownloadTaskRequest.
             */
            lineItemIds?: string[];
            /**
             * Media Products to download by ID. All IDs must belong to the same
             * Advertiser or
             * Partner specified in
             * CreateSdfDownloadTaskRequest.
             */
            mediaProductIds?: string[];
        }
        interface InventorySourceFilter {
            /**
             * Inventory Sources to download by ID. All IDs must belong to the same
             * Advertiser or
             * Partner specified in
             * CreateSdfDownloadTaskRequest. Leave empty to download all Inventory
             * Sources for the selected Advertiser or Partner.
             */
            inventorySourceIds?: string[];
        }
        interface Operation {
            /**
             * If the value is `false`, it means the operation is still in progress.
             * If `true`, the operation is completed, and either `error` or `response` is
             * available.
             */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation.  It typically
             * contains progress information and common metadata such as create time.
             * Some services might not provide such metadata.  Any method that returns a
             * long-running operation should document the metadata type, if any.
             */
            metadata?: Record<string, any>;
            /**
             * The server-assigned name, which is only unique within the same service that
             * originally returns it. If you use the default HTTP mapping, the
             * `name` should be a resource name ending with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success.  If the original
             * method returns no data on success, such as `Delete`, the response is
             * `google.protobuf.Empty`.  If the original method is standard
             * `Get`/`Create`/`Update`, the response should be the resource.  For other
             * methods, the response should have the type `XxxResponse`, where `Xxx`
             * is the original method name.  For example, if the original method name
             * is `TakeSnapshot()`, the inferred response type is
             * `TakeSnapshotResponse`.
             */
            response?: Record<string, any>;
        }
        interface ParentEntityFilter {
            /** Required. File types that will be returned. */
            fileType?: string[];
            /**
             * The IDs of the specified filter type. This is used to filter entities to
             * fetch. If filter type is not `FILTER_TYPE_NONE`, at least one ID must be
             * specified.
             */
            filterIds?: string[];
            /** Required. Filter type used to filter fetched entities. */
            filterType?: string;
        }
        interface SdfDownloadTask {
            /**
             * A resource name to be used in
             * media.download to Download the prepared
             * files. Resource names have the format
             * `download/sdfdownloadtasks/media/{media_id}`. `media_id` will be made
             * available by the long running operation service once the task status is
             * done.
             */
            resourceName?: string;
        }
        interface SdfDownloadTaskMetadata {
            /** The time when the operation was created. */
            createTime?: string;
            /** The time when execution was completed. */
            endTime?: string;
            /** The SDF version used to execute this download task. */
            version?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /**
             * A list of messages that carry the error details.  There is a common set of
             * message types for APIs to use.
             */
            details?: Array<Record<string, any>>;
            /**
             * A developer-facing error message, which should be in English. Any
             * user-facing error message should be localized and sent in the
             * google.rpc.Status.details field, or localized by the client.
             */
            message?: string;
        }
        interface MediaResource {
            /**
             * Downloads media. Download is supported on the URI `/download/{resource_name=&#42;&#42;}?alt=media.`
             *
             * &#42;&#42;Note&#42;&#42;: Download requests will not be successful without including `alt=media` query string.
             */
            download(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Name of the media that is being downloaded.  See
                 * ReadRequest.resource_name.
                 */
                resourceName: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GoogleBytestreamMedia>;
        }
        interface OperationsResource {
            /** Gets the latest state of an asynchronous SDF download task operation. Clients should poll this method at intervals of 30 seconds. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
        }
        interface SdfdownloadtasksResource {
            /**
             * Creates an SDF Download Task. Returns an
             * Operation.
             *
             * An SDF Download Task is a long-running, asynchronous operation. The
             * metadata type of this operation is
             * SdfDownloadTaskMetadata. If the request is successful, the
             * response type of the operation is
             * SdfDownloadTask. The response will not include the download files,
             * which must be retrieved with
             * media.download. The state of
             * operation can be retrieved with
             * sdfdownloadtask.operations.get.
             *
             * Any errors can be found in the
             * error.message. Note
             * that error.details is expected to be
             * empty.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CreateSdfDownloadTaskRequest;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CreateSdfDownloadTaskRequest): Request<Operation>;
            operations: OperationsResource;
        }

        const media: MediaResource;

        const sdfdownloadtasks: SdfdownloadtasksResource;
    }
}
