// Type definitions for non-npm package Cloud SQL Admin API v1beta4 1.0
// Project: https://developers.google.com/cloud-sql/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://www.googleapis.com/discovery/v1/apis/sqladmin/v1beta4/rest

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud SQL Admin API v1beta4 */
    function load(name: "sql", version: "v1beta4"): PromiseLike<void>;
    function load(name: "sql", version: "v1beta4", callback: () => any): void;

    namespace sql {
        interface AclEntry {
            /**
             * The time when this access control entry expires in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for example
             * <code>2012-11-15T16:19:00.094Z</code>.
             */
            expirationTime?: string;
            /** This is always <code>sql#aclEntry</code>. */
            kind?: string;
            /** Optional. A label to identify this entry. */
            name?: string;
            /** The whitelisted value for the access control list. */
            value?: string;
        }
        interface ApiWarning {
            /** Code to uniquely identify the warning type. */
            code?: string;
            /** The warning message. */
            message?: string;
        }
        interface BackupConfiguration {
            /**
             * Whether binary log is enabled. If backup configuration is disabled, binary
             * log must be disabled as well.
             */
            binaryLogEnabled?: boolean;
            /** Whether this configuration is enabled. */
            enabled?: boolean;
            /** This is always <code>sql#backupConfiguration</code>. */
            kind?: string;
            /** Location of the backup */
            location?: string;
            /** Reserved for future use. */
            pointInTimeRecoveryEnabled?: boolean;
            /** Reserved for future use. */
            replicationLogArchivingEnabled?: boolean;
            /**
             * Start time for the daily backup configuration in UTC timezone in the 24
             * hour format - <code>HH:MM</code>.
             */
            startTime?: string;
        }
        interface BackupRun {
            /** The description of this run, only applicable to on-demand backups. */
            description?: string;
            /**
             * Encryption configuration specific to a backup.
             * Applies only to Second Generation instances.
             */
            diskEncryptionConfiguration?: DiskEncryptionConfiguration;
            /**
             * Encryption status specific to a backup.
             * Applies only to Second Generation instances.
             */
            diskEncryptionStatus?: DiskEncryptionStatus;
            /**
             * The time the backup operation completed in UTC timezone in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for example
             * <code>2012-11-15T16:19:00.094Z</code>.
             */
            endTime?: string;
            /**
             * The time the run was enqueued in UTC timezone in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for example
             * <code>2012-11-15T16:19:00.094Z</code>.
             */
            enqueuedTime?: string;
            /**
             * Information about why the backup operation failed. This is only present if
             * the run has the FAILED status.
             */
            error?: OperationError;
            /**
             * The identifier for this backup run. Unique only for a specific Cloud SQL
             * instance.
             */
            id?: string;
            /** Name of the database instance. */
            instance?: string;
            /** This is always <code>sql#backupRun</code>. */
            kind?: string;
            /** Location of the backups. */
            location?: string;
            /** The URI of this resource. */
            selfLink?: string;
            /**
             * The time the backup operation actually started in UTC timezone in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for example
             * <code>2012-11-15T16:19:00.094Z</code>.
             */
            startTime?: string;
            /** The status of this run. */
            status?: string;
            /** The type of this run; can be either "AUTOMATED" or "ON_DEMAND". */
            type?: string;
            /**
             * The start time of the backup window during which this the backup was
             * attempted in <a href="https://tools.ietf.org/html/rfc3339">RFC 3339</a>
             * format, for example <code>2012-11-15T16:19:00.094Z</code>.
             */
            windowStartTime?: string;
        }
        interface BackupRunsListResponse {
            /** A list of backup runs in reverse chronological order of the enqueued time. */
            items?: BackupRun[];
            /** This is always <code>sql#backupRunsList</code>. */
            kind?: string;
            /**
             * The continuation token, used to page through large result sets. Provide
             * this value in a subsequent request to return the next page of results.
             */
            nextPageToken?: string;
        }
        interface BinLogCoordinates {
            /** Name of the binary log file for a Cloud SQL instance. */
            binLogFileName?: string;
            /** Position (offset) within the binary log file. */
            binLogPosition?: string;
            /** This is always <code>sql#binLogCoordinates</code>. */
            kind?: string;
        }
        interface CloneContext {
            /**
             * Binary log coordinates, if specified, identify the position up to which the
             * source instance should be cloned. If not specified, the source instance is
             * cloned up to the most recent binary log coordinates.
             */
            binLogCoordinates?: BinLogCoordinates;
            /** Name of the Cloud SQL instance to be created as a clone. */
            destinationInstanceName?: string;
            /** This is always <code>sql#cloneContext</code>. */
            kind?: string;
            /** Reserved for future use. */
            pitrTimestampMs?: string;
            /** Reserved for future use. */
            pointInTime?: string;
        }
        interface Database {
            /** The MySQL charset value. */
            charset?: string;
            /** The MySQL collation value. */
            collation?: string;
            /**
             * This field is deprecated and will be removed from a future version of the
             * API.
             */
            etag?: string;
            /** The name of the Cloud SQL instance. This does not include the project ID. */
            instance?: string;
            /** This is always <code>sql#database</code>. */
            kind?: string;
            /**
             * The name of the database in the Cloud SQL instance. This does not include
             * the project ID or instance name.
             */
            name?: string;
            /**
             * The project ID of the project containing the Cloud SQL database. The Google
             * apps domain is prefixed if applicable.
             */
            project?: string;
            /** The URI of this resource. */
            selfLink?: string;
            sqlserverDatabaseDetails?: SqlServerDatabaseDetails;
        }
        interface DatabaseFlags {
            /**
             * The name of the flag. These flags are passed at instance startup, so
             * include both server options and system variables for MySQL. Flags should be
             * specified with underscores, not hyphens. For more information, see <a
             * href="/sql/docs/mysql/flags">Configuring Database Flags</a> in the Cloud
             * SQL documentation.
             */
            name?: string;
            /**
             * The value of the flag. Booleans should be set to <code>on</code> for true
             * and <code>off</code> for false. This field must be omitted if the flag
             * doesn't take a value.
             */
            value?: string;
        }
        interface DatabaseInstance {
            /**
             * <code>FIRST_GEN</code>: First Generation instance. MySQL only. <br
             * /><code>SECOND_GEN</code>: Second Generation instance or PostgreSQL
             * instance. <br /><code>EXTERNAL</code>: A database server that is not
             * managed by Google. <br>This property is read-only; use the
             * <code>tier</code> property in the <code>settings</code> object to determine
             * the database type and Second or First Generation.
             */
            backendType?: string;
            /** Connection name of the Cloud SQL instance used in connection strings. */
            connectionName?: string;
            /**
             * The current disk usage of the instance in bytes. This property has been
             * deprecated. Users should use the
             * "cloudsql.googleapis.com/database/disk/bytes_used" metric in Cloud
             * Monitoring API instead. Please see <a
             * href="https://groups.google.com/d/msg/google-cloud-sql-announce/I_7-F9EBhT0/BtvFtdFeAgAJ">this
             * announcement</a> for details.
             */
            currentDiskSize?: string;
            /**
             * The database engine type and version. The <code>databaseVersion</code>
             * field can not be changed after instance creation.  MySQL Second Generation
             * instances: <code>MYSQL_5_7</code> (default) or <code>MYSQL_5_6</code>.
             * PostgreSQL instances: <code>POSTGRES_9_6</code> (default) or
             * <code>POSTGRES_11 Beta</code> MySQL First Generation
             * instances: <code>MYSQL_5_6</code> (default) or <code>MYSQL_5_5</code>
             */
            databaseVersion?: string;
            /**
             * Disk encryption configuration specific to an instance.
             * Applies only to Second Generation instances.
             */
            diskEncryptionConfiguration?: DiskEncryptionConfiguration;
            /**
             * Disk encryption status specific to an instance.
             * Applies only to Second Generation instances.
             */
            diskEncryptionStatus?: DiskEncryptionStatus;
            /**
             * This field is deprecated and will be removed from a future version of the
             * API. Use the <code>settings.settingsVersion</code> field instead.
             */
            etag?: string;
            /**
             * The name and status of the failover replica. This property is applicable
             * only to Second Generation instances.
             */
            failoverReplica?: {
                /**
                 * The availability status of the failover replica. A false status indicates
                 * that the failover replica is out of sync. The master can only failover to
                 * the failover replica when the status is true.
                 */
                available?: boolean;
                /**
                 * The name of the failover replica. If specified at instance creation, a
                 * failover replica is created for the instance. The name
                 * doesn't include the project ID. This property is applicable only to
                 * Second Generation instances.
                 */
                name?: string;
            };
            /**
             * The Compute Engine zone that the instance is currently serving from. This
             * value could be different from the zone that was specified when the instance
             * was created if the instance has failed over to its secondary zone.
             */
            gceZone?: string;
            /**
             * The instance type. This can be one of the following.
             * <br><code>CLOUD_SQL_INSTANCE</code>: A Cloud SQL instance that is not
             * replicating from a master. <br><code>ON_PREMISES_INSTANCE</code>: An
             * instance running on the
             * customer's premises. <br><code>READ_REPLICA_INSTANCE</code>: A Cloud SQL
             * instance configured as a read-replica.
             */
            instanceType?: string;
            /** The assigned IP addresses for the instance. */
            ipAddresses?: IpMapping[];
            /**
             * The IPv6 address assigned to the instance. This property is applicable only
             * to First Generation instances.
             */
            ipv6Address?: string;
            /** This is always <code>sql#instance</code>. */
            kind?: string;
            /** The name of the instance which will act as master in the replication setup. */
            masterInstanceName?: string;
            /** The maximum disk size of the instance in bytes. */
            maxDiskSize?: string;
            /** Name of the Cloud SQL instance. This does not include the project ID. */
            name?: string;
            /** Configuration specific to on-premises instances. */
            onPremisesConfiguration?: OnPremisesConfiguration;
            /**
             * The project ID of the project containing the Cloud SQL instance. The Google
             * apps domain is prefixed if applicable.
             */
            project?: string;
            /**
             * The geographical region. Can be <code>us-central</code>
             * (<code>FIRST_GEN</code> instances only), <code>us-central1</code>
             * (<code>SECOND_GEN</code> instances only), <code>asia-east1</code> or
             * <code>europe-west1</code>. Defaults to <code>us-central</code> or
             * <code>us-central1</code> depending on the instance type (First Generation
             * or Second Generation). The region can not be changed after instance
             * creation.
             */
            region?: string;
            /** Configuration specific to failover replicas and read replicas. */
            replicaConfiguration?: ReplicaConfiguration;
            /** The replicas of the instance. */
            replicaNames?: string[];
            /** Initial root password. Use only on creation. */
            rootPassword?: string;
            /** The start time of any upcoming scheduled maintenance for this instance. */
            scheduledMaintenance?: SqlScheduledMaintenance;
            /** The URI of this resource. */
            selfLink?: string;
            /** SSL configuration. */
            serverCaCert?: SslCert;
            /**
             * The service account email address assigned to the instance. This property
             * is applicable only to Second Generation instances.
             */
            serviceAccountEmailAddress?: string;
            /** The user settings. */
            settings?: Settings;
            /**
             * The current serving state of the Cloud SQL instance. This can be one of the
             * following. <br><code>RUNNABLE</code>: The instance is running, or is ready
             * to run when accessed. <br><code>SUSPENDED</code>: The instance is not
             * available, for example due to problems with billing.
             * <br><code>PENDING_CREATE</code>: The instance is being created.
             * <br><code>MAINTENANCE</code>: The instance is down for maintenance.
             * <br><code>FAILED</code>: The instance creation failed.
             * <br><code>UNKNOWN_STATE</code>: The state of the instance is unknown.
             */
            state?: string;
            /** If the instance state is SUSPENDED, the reason for the suspension. */
            suspensionReason?: string[];
        }
        interface DatabasesListResponse {
            /** List of database resources in the instance. */
            items?: Database[];
            /** This is always <code>sql#databasesList</code>. */
            kind?: string;
        }
        interface DemoteMasterConfiguration {
            /** This is always <code>sql#demoteMasterConfiguration</code>. */
            kind?: string;
            /**
             * MySQL specific configuration when replicating from a MySQL on-premises
             * master. Replication configuration information such as the username,
             * password, certificates, and keys are not stored in the instance metadata.
             * The configuration information is used only to set up the replication
             * connection and is stored by MySQL in a file named <code>master.info</code>
             * in the data directory.
             */
            mysqlReplicaConfiguration?: DemoteMasterMySqlReplicaConfiguration;
        }
        interface DemoteMasterContext {
            /** This is always <code>sql#demoteMasterContext</code>. */
            kind?: string;
            /**
             * The name of the instance which will act as on-premises master in the
             * replication setup.
             */
            masterInstanceName?: string;
            /**
             * Configuration specific to read-replicas replicating from the on-premises
             * master.
             */
            replicaConfiguration?: DemoteMasterConfiguration;
            /**
             * Verify GTID consistency for demote operation. Default value:
             * <code>True</code>. Second Generation instances only.  Setting this flag to
             * false enables you to bypass GTID consistency check between on-premises
             * master and Cloud SQL instance during the demotion operation but also
             * exposes you to the risk of future replication failures. Change the value
             * only if you know the reason for the GTID divergence and are confident that
             * doing so will not cause any replication issues.
             */
            verifyGtidConsistency?: boolean;
        }
        interface DemoteMasterMySqlReplicaConfiguration {
            /** PEM representation of the trusted CA's x509 certificate. */
            caCertificate?: string;
            /** PEM representation of the slave's x509 certificate. */
            clientCertificate?: string;
            /**
             * PEM representation of the slave's private key. The corresponsing public key
             * is encoded in the client's certificate. The format of the slave's private
             * key can be either PKCS #1 or PKCS #8.
             */
            clientKey?: string;
            /** This is always <code>sql#demoteMasterMysqlReplicaConfiguration</code>. */
            kind?: string;
            /** The password for the replication connection. */
            password?: string;
            /** The username for the replication connection. */
            username?: string;
        }
        interface DiskEncryptionConfiguration {
            /** This is always <code>sql#diskEncryptionConfiguration</code>. */
            kind?: string;
            /** Resource name of KMS key for disk encryption */
            kmsKeyName?: string;
        }
        interface DiskEncryptionStatus {
            /** This is always <code>sql#diskEncryptionStatus</code>. */
            kind?: string;
            /** KMS key version used to encrypt the Cloud SQL instance resource */
            kmsKeyVersionName?: string;
        }
        interface ExportContext {
            /** Options for exporting data as CSV. */
            csvExportOptions?: {
                /** The select query used to extract the data. */
                selectQuery?: string;
            };
            /**
             * Databases to be exported. <br /> <b>MySQL instances:</b> If
             * <code>fileType</code> is <code>SQL</code> and no database is specified, all
             * databases are exported, except for the <code>mysql</code> system database.
             * If <code>fileType</code> is <code>CSV</code>, you can specify one database,
             * either by using this property or by using the
             * <code>csvExportOptions.selectQuery</code> property, which takes precedence
             * over this property. <br /> <b>PostgreSQL instances:</b> You must specify
             * one database to be exported. If <code>fileType</code> is <code>CSV</code>,
             * this database must match the one specified in the
             * <code>csvExportOptions.selectQuery</code> property.
             */
            databases?: string[];
            /**
             * The file type for the specified uri. <br><code>SQL</code>: The file
             * contains SQL statements. <br><code>CSV</code>: The file contains CSV data.
             */
            fileType?: string;
            /** This is always <code>sql#exportContext</code>. */
            kind?: string;
            /** Options for exporting data as SQL statements. */
            sqlExportOptions?: {
                /** Options for exporting from MySQL. */
                mysqlExportOptions?: {
                    /**
                     * Option to include SQL statement required to set up replication.
                     * If set to <code>1</code>, the dump file includes
                     * a CHANGE MASTER TO statement with the binary log coordinates.
                     * If set to <code>2</code>, the CHANGE MASTER TO statement is written as
                     * a SQL comment, and has no effect.
                     * All other values are ignored.
                     */
                    masterData?: number;
                };
                /** Export only schemas. */
                schemaOnly?: boolean;
                /**
                 * Tables to export, or that were exported, from the specified database. If
                 * you specify tables, specify one and only one database. For PostgreSQL
                 * instances, you can specify only one table.
                 */
                tables?: string[];
            };
            /**
             * The path to the file in Google Cloud Storage where the export will be
             * stored. The URI is in the form <code>gs:
             * //bucketName/fileName</code>. If the file already exists, the requests
             * // succeeds, but the operation fails. If <code>fileType</code> is
             * // <code>SQL</code> and the filename ends with .gz, the contents are
             * // compressed.
             */
            uri?: string;
        }
        interface FailoverContext {
            /** This is always <code>sql#failoverContext</code>. */
            kind?: string;
            /**
             * The current settings version of this instance. Request will be rejected if
             * this version doesn't match the current settings version.
             */
            settingsVersion?: string;
        }
        interface Flag {
            /**
             * Use this field if only certain integers are accepted. Can be combined
             * with min_value and max_value to add additional values.
             */
            allowedIntValues?: string[];
            /**
             * For <code>STRING</code> flags, a list of strings that the value can be set
             * to.
             */
            allowedStringValues?: string[];
            /**
             * The database version this flag applies to. Can be <code>MYSQL_5_5</code>,
             * <code>MYSQL_5_6</code>, or <code>MYSQL_5_7</code>. <code>MYSQL_5_7</code>
             * is applicable only to Second Generation instances.
             */
            appliesTo?: string[];
            /** Whether or not the flag is considered in beta. */
            inBeta?: boolean;
            /** This is always <code>sql#flag</code>. */
            kind?: string;
            /** For <code>INTEGER</code> flags, the maximum allowed value. */
            maxValue?: string;
            /** For <code>INTEGER</code> flags, the minimum allowed value. */
            minValue?: string;
            /**
             * This is the name of the flag. Flag names always use underscores, not
             * hyphens, e.g. <code>max_allowed_packet</code>
             */
            name?: string;
            /**
             * Indicates whether changing this flag will trigger a database restart. Only
             * applicable to Second Generation instances.
             */
            requiresRestart?: boolean;
            /**
             * The type of the flag. Flags are typed to being <code>BOOLEAN</code>,
             * <code>STRING</code>, <code>INTEGER</code> or <code>NONE</code>.
             * <code>NONE</code> is used for flags which do not take a value, such as
             * <code>skip_grant_tables</code>.
             */
            type?: string;
        }
        interface FlagsListResponse {
            /** List of flags. */
            items?: Flag[];
            /** This is always <code>sql#flagsList</code>. */
            kind?: string;
        }
        interface ImportContext {
            /** Import parameters specific to SQL Server .BAK files */
            bakImportOptions?: {
                encryptionOptions?: {
                    /**
                     * Path to the Certificate (.cer) in Cloud Storage, in the form
                     * <code>gs://bucketName/fileName</code>. The instance must have
                     * write permissions to the bucket and read access to the file.
                     */
                    certPath?: string;
                    /** Password that encrypts the private key */
                    pvkPassword?: string;
                    /**
                     * Path to the Certificate Private Key (.pvk)  in Cloud Storage, in the
                     * form <code>gs://bucketName/fileName</code>. The instance must have
                     * write permissions to the bucket and read access to the file.
                     */
                    pvkPath?: string;
                };
            };
            /** Options for importing data as CSV. */
            csvImportOptions?: {
                /**
                 * The columns to which CSV data is imported. If not specified, all columns
                 * of the database table are loaded with CSV data.
                 */
                columns?: string[];
                /** The table to which CSV data is imported. */
                table?: string;
            };
            /**
             * The target database for the import. If <code>fileType</code> is
             * <code>SQL</code>, this field is required only if the import file does not
             * specify a database, and is overridden by any database specification in the
             * import file. If <code>fileType</code> is <code>CSV</code>, one database
             * must be specified.
             */
            database?: string;
            /**
             * The file type for the specified uri. <br><code>SQL</code>: The file
             * contains SQL statements. <br><code>CSV</code>: The file contains CSV data.
             */
            fileType?: string;
            /** The PostgreSQL user for this import operation. PostgreSQL instances only. */
            importUser?: string;
            /** This is always <code>sql#importContext</code>. */
            kind?: string;
            /**
             * Path to the import file in Cloud Storage, in the form
             * <code>gs:
             * //bucketName/fileName</code>. Compressed gzip files (.gz) are supported
             * // when <code>fileType</code> is <code>SQL</code>. The instance must have
             * // write permissions to the bucket and read access to the file.
             */
            uri?: string;
        }
        interface InstancesCloneRequest {
            /** Contains details about the clone operation. */
            cloneContext?: CloneContext;
        }
        interface InstancesDemoteMasterRequest {
            /** Contains details about the demoteMaster operation. */
            demoteMasterContext?: DemoteMasterContext;
        }
        interface InstancesExportRequest {
            /** Contains details about the export operation. */
            exportContext?: ExportContext;
        }
        interface InstancesFailoverRequest {
            /** Failover Context. */
            failoverContext?: FailoverContext;
        }
        interface InstancesImportRequest {
            /** Contains details about the import operation. */
            importContext?: ImportContext;
        }
        interface InstancesListResponse {
            /** List of database instance resources. */
            items?: DatabaseInstance[];
            /** This is always <code>sql#instancesList</code>. */
            kind?: string;
            /**
             * The continuation token, used to page through large result sets. Provide
             * this value in a subsequent request to return the next page of results.
             */
            nextPageToken?: string;
            /** List of warnings that occurred while handling the request. */
            warnings?: ApiWarning[];
        }
        interface InstancesListServerCasResponse {
            activeVersion?: string;
            /** List of server CA certificates for the instance. */
            certs?: SslCert[];
            /** This is always <code>sql#instancesListServerCas</code>. */
            kind?: string;
        }
        interface InstancesRestoreBackupRequest {
            /** Parameters required to perform the restore backup operation. */
            restoreBackupContext?: RestoreBackupContext;
        }
        interface InstancesRotateServerCaRequest {
            /** Contains details about the rotate server CA operation. */
            rotateServerCaContext?: RotateServerCaContext;
        }
        interface InstancesTruncateLogRequest {
            /** Contains details about the truncate log operation. */
            truncateLogContext?: TruncateLogContext;
        }
        interface IpConfiguration {
            /**
             * The list of external networks that are allowed to connect to the instance
             * using the IP. In <a
             * href="http://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation">CIDR
             * notation</a>, also known as 'slash' notation (e.g.
             * <code>192.168.100.0/24</code>).
             */
            authorizedNetworks?: AclEntry[];
            /** Whether the instance should be assigned an IP address or not. */
            ipv4Enabled?: boolean;
            /**
             * The resource link for the VPC network from which the Cloud SQL instance is
             * accessible for private IP. For example,
             * <code>/projects/myProject/global/networks/default</code>. This setting can
             * be updated, but it cannot be removed after it is set.
             */
            privateNetwork?: string;
            /** Whether SSL connections over IP should be enforced or not. */
            requireSsl?: boolean;
        }
        interface IpMapping {
            /** The IP address assigned. */
            ipAddress?: string;
            /**
             * The due time for this IP to be retired in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for example
             * <code>2012-11-15T16:19:00.094Z</code>. This field is only available when
             * the IP is scheduled to be retired.
             */
            timeToRetire?: string;
            /**
             * The type of this IP address. A <code>PRIMARY</code> address is a public
             * address that can accept incoming connections. A <code>PRIVATE</code>
             * address is a private address that can accept incoming connections. An
             * <code>OUTGOING</code> address is the source address of connections
             * originating from the instance, if supported.
             */
            type?: string;
        }
        interface LocationPreference {
            /**
             * The AppEngine application to follow, it must be in the same region as the
             * Cloud SQL instance.
             */
            followGaeApplication?: string;
            /** This is always <code>sql#locationPreference</code>. */
            kind?: string;
            /**
             * The preferred Compute Engine zone (e.g. us-central1-a, us-central1-b,
             * etc.).
             */
            zone?: string;
        }
        interface MaintenanceWindow {
            /** day of week (1-7), starting on Monday. */
            day?: number;
            /** hour of day - 0 to 23. */
            hour?: number;
            /** This is always <code>sql#maintenanceWindow</code>. */
            kind?: string;
            /**
             * Maintenance timing setting: <code>canary</code> (Earlier) or
             * <code>stable</code> (Later). <br /><a
             * href="/sql/docs/db_path/instance-settings#maintenance-timing-2ndgen">
             * Learn more</a>.
             */
            updateTrack?: string;
        }
        interface MySqlReplicaConfiguration {
            /** PEM representation of the trusted CA's x509 certificate. */
            caCertificate?: string;
            /** PEM representation of the slave's x509 certificate. */
            clientCertificate?: string;
            /**
             * PEM representation of the slave's private key. The corresponsing public key
             * is encoded in the client's certificate.
             */
            clientKey?: string;
            /** Seconds to wait between connect retries. MySQL's default is 60 seconds. */
            connectRetryInterval?: number;
            /**
             * Path to a SQL dump file in Google Cloud Storage from which the slave
             * instance is to be created. The URI is in the form gs:
             * //bucketName/fileName. Compressed gzip files (.gz) are also supported.
             * // Dumps should have the binlog co-ordinates from which replication should
             * // begin. This can be accomplished by setting --master-data to 1 when using
             * // mysqldump.
             */
            dumpFilePath?: string;
            /** This is always <code>sql#mysqlReplicaConfiguration</code>. */
            kind?: string;
            /** Interval in milliseconds between replication heartbeats. */
            masterHeartbeatPeriod?: string;
            /** The password for the replication connection. */
            password?: string;
            /** A list of permissible ciphers to use for SSL encryption. */
            sslCipher?: string;
            /** The username for the replication connection. */
            username?: string;
            /**
             * Whether or not to check the master's Common Name value in the certificate
             * that it sends during the SSL handshake.
             */
            verifyServerCertificate?: boolean;
        }
        interface OnPremisesConfiguration {
            /** PEM representation of the trusted CA's x509 certificate. */
            caCertificate?: string;
            /** PEM representation of the slave's x509 certificate. */
            clientCertificate?: string;
            /**
             * PEM representation of the slave's private key. The corresponsing public key
             * is encoded in the client's certificate.
             */
            clientKey?: string;
            /** The dump file to create the Cloud SQL replica. */
            dumpFilePath?: string;
            /** The host and port of the on-premises instance in host:port format */
            hostPort?: string;
            /** This is always <code>sql#onPremisesConfiguration</code>. */
            kind?: string;
            /** The password for connecting to on-premises instance. */
            password?: string;
            /** The username for connecting to on-premises instance. */
            username?: string;
        }
        interface Operation {
            /**
             * The time this operation finished in UTC timezone in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for example
             * <code>2012-11-15T16:19:00.094Z</code>.
             */
            endTime?: string;
            /**
             * If errors occurred during processing of this operation, this field will be
             * populated.
             */
            error?: OperationErrors;
            /** The context for export operation, if applicable. */
            exportContext?: ExportContext;
            /** The context for import operation, if applicable. */
            importContext?: ImportContext;
            /**
             * The time this operation was enqueued in UTC timezone in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for example
             * <code>2012-11-15T16:19:00.094Z</code>.
             */
            insertTime?: string;
            /** This is always <code>sql#operation</code>. */
            kind?: string;
            /**
             * An identifier that uniquely identifies the operation. You can use this
             * identifier to retrieve the Operations resource that has information about
             * the operation.
             */
            name?: string;
            /**
             * The type of the operation. Valid values are <code>CREATE</code>,
             * <code>DELETE</code>, <code>UPDATE</code>, <code>RESTART</code>,
             * <code>IMPORT</code>, <code>EXPORT</code>, <code>BACKUP_VOLUME</code>,
             * <code>RESTORE_VOLUME</code>, <code>CREATE_USER</code>,
             * <code>DELETE_USER</code>, <code>CREATE_DATABASE</code>,
             * <code>DELETE_DATABASE</code> .
             */
            operationType?: string;
            /** The URI of this resource. */
            selfLink?: string;
            /**
             * The time this operation actually started in UTC timezone in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for example
             * <code>2012-11-15T16:19:00.094Z</code>.
             */
            startTime?: string;
            /**
             * The status of an operation. Valid values are <code>PENDING</code>,
             * <code>RUNNING</code>, <code>DONE</code>,
             * <code>SQL_OPERATION_STATUS_UNSPECIFIED</code>.
             */
            status?: string;
            /** Name of the database instance related to this operation. */
            targetId?: string;
            targetLink?: string;
            /** The project ID of the target instance related to this operation. */
            targetProject?: string;
            /** The email address of the user who initiated this operation. */
            user?: string;
        }
        interface OperationError {
            /** Identifies the specific error that occurred. */
            code?: string;
            /** This is always <code>sql#operationError</code>. */
            kind?: string;
            /** Additional information about the error encountered. */
            message?: string;
        }
        interface OperationErrors {
            /** The list of errors encountered while processing this operation. */
            errors?: OperationError[];
            /** This is always <code>sql#operationErrors</code>. */
            kind?: string;
        }
        interface OperationsListResponse {
            /** List of operation resources. */
            items?: Operation[];
            /** This is always <code>sql#operationsList</code>. */
            kind?: string;
            /**
             * The continuation token, used to page through large result sets. Provide
             * this value in a subsequent request to return the next page of results.
             */
            nextPageToken?: string;
        }
        interface ReplicaConfiguration {
            /**
             * Specifies if the replica is the failover target. If the field is set to
             * <code>true</code> the replica will be designated as a failover replica. In
             * case the master instance fails, the replica instance will be promoted as
             * the new master instance.  <p>Only one replica can be specified as failover
             * target, and the replica has to be in different zone with the master
             * instance.
             */
            failoverTarget?: boolean;
            /** This is always <code>sql#replicaConfiguration</code>. */
            kind?: string;
            /**
             * MySQL specific configuration when replicating from a MySQL on-premises
             * master. Replication configuration information such as the username,
             * password, certificates, and keys are not stored in the instance metadata.
             * The configuration information is used only to set up the replication
             * connection and is stored by MySQL in a file named <code>master.info</code>
             * in the data directory.
             */
            mysqlReplicaConfiguration?: MySqlReplicaConfiguration;
        }
        interface Reschedule {
            /** Required. The type of the reschedule. */
            rescheduleType?: string;
            /**
             * Optional. Timestamp when the maintenance shall be rescheduled to if
             * reschedule_type=SPECIFIC_TIME, in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for
             * example <code>2012-11-15T16:19:00.094Z</code>.
             */
            scheduleTime?: string;
        }
        interface RestoreBackupContext {
            /** The ID of the backup run to restore from. */
            backupRunId?: string;
            /** The ID of the instance that the backup was taken from. */
            instanceId?: string;
            /** This is always <code>sql#restoreBackupContext</code>. */
            kind?: string;
            /** The full project ID of the source instance. */
            project?: string;
        }
        interface RotateServerCaContext {
            /** This is always <code>sql#rotateServerCaContext</code>. */
            kind?: string;
            /**
             * The fingerprint of the next version to be rotated to. If left unspecified,
             * will be rotated to the most recently added server CA version.
             */
            nextVersion?: string;
        }
        interface Settings {
            /**
             * The activation policy specifies when the instance is activated; it is
             * applicable only when the instance state is <code>RUNNABLE</code>. Valid
             * values: <br><code>ALWAYS</code>: The instance is on, and remains so even in
             * the absence of connection requests. <br><code>NEVER</code>: The instance is
             * off; it is not activated, even if a connection request arrives.
             * <br><code>ON_DEMAND</code>: First Generation instances only. The instance
             * responds to incoming requests, and turns itself off when not in use.
             * Instances with <code>PER_USE</code> pricing turn off after 15 minutes of
             * inactivity. Instances with <code>PER_PACKAGE</code> pricing turn off after
             * 12 hours of inactivity.
             */
            activationPolicy?: string;
            /**
             * The App Engine app IDs that can access this instance. First Generation
             * instances only.
             */
            authorizedGaeApplications?: string[];
            /**
             * Availability type (PostgreSQL instances only). Potential values:
             * <br><code>ZONAL</code>: The instance serves data from only one zone.
             * Outages in that zone affect data accessibility. <br><code>REGIONAL</code>:
             * The instance can serve data from more than one zone in a region (it is
             * highly available). <br>For more information, see <a
             * href="https://cloud.google.com/sql/docs/postgres/high-availability">Overview
             * of the High Availability Configuration</a>.
             */
            availabilityType?: string;
            /** The daily backup configuration for the instance. */
            backupConfiguration?: BackupConfiguration;
            /**
             * Configuration specific to read replica instances. Indicates whether
             * database flags for crash-safe replication are enabled. This property is
             * only applicable to First Generation instances.
             */
            crashSafeReplicationEnabled?: boolean;
            /** The database flags passed to the instance at startup. */
            databaseFlags?: DatabaseFlags[];
            /**
             * Configuration specific to read replica instances. Indicates whether
             * replication is enabled or not.
             */
            databaseReplicationEnabled?: boolean;
            /**
             * The size of data disk, in GB. The data disk size minimum is 10GB. Not used
             * for First Generation instances.
             */
            dataDiskSizeGb?: string;
            /**
             * The type of data disk: <code>PD_SSD</code> (default) or
             * <code>PD_HDD</code>. Not used for First Generation instances.
             */
            dataDiskType?: string;
            /**
             * The settings for IP Management. This allows to enable or disable the
             * instance IP and manage which external networks can connect to the instance.
             * The IPv4 address cannot be disabled for Second Generation instances.
             */
            ipConfiguration?: IpConfiguration;
            /** This is always <code>sql#settings</code>. */
            kind?: string;
            /**
             * The location preference settings. This allows the instance to be located as
             * near as possible to either an App Engine app or Compute Engine zone for
             * better performance. App Engine co-location is only applicable to First
             * Generation instances.
             */
            locationPreference?: LocationPreference;
            /**
             * The maintenance window for this instance. This specifies when the instance
             * can be restarted for maintenance purposes. Not used for First Generation
             * instances.
             */
            maintenanceWindow?: MaintenanceWindow;
            /**
             * The pricing plan for this instance. This can be either <code>PER_USE</code>
             * or <code>PACKAGE</code>. Only <code>PER_USE</code> is supported for Second
             * Generation instances.
             */
            pricingPlan?: string;
            /**
             * The type of replication this instance uses. This can be either
             * <code>ASYNCHRONOUS</code> or <code>SYNCHRONOUS</code>. This property is
             * only applicable to First Generation instances.
             */
            replicationType?: string;
            /**
             * The version of instance settings. This is a required field for update
             * method to make sure concurrent updates are handled properly. During update,
             * use the most recent settingsVersion value for this instance and do not try
             * to update this value.
             */
            settingsVersion?: string;
            /**
             * Configuration to increase storage size automatically. The default value is
             * true. Not used for First Generation instances.
             */
            storageAutoResize?: boolean;
            /**
             * The maximum size to which storage capacity can be automatically increased.
             * The default value is 0, which specifies that there is no limit. Not used
             * for First Generation instances.
             */
            storageAutoResizeLimit?: string;
            /**
             * The tier (or machine type) for this instance, for example
             * <code>db-n1-standard-1</code> (MySQL instances) or
             * <code>db-custom-1-3840</code> (PostgreSQL instances). For MySQL instances,
             * this property determines whether the instance is First or Second
             * Generation. For more information, see <a
             * href="/sql/docs/db_path/instance-settings">Instance Settings</a>.
             */
            tier?: string;
            /**
             * User-provided labels, represented as a dictionary where each label is a
             * single key value pair.
             */
            userLabels?: Record<string, string>;
        }
        interface SqlExternalSyncSettingError {
            /** Additional information about the error encountered. */
            detail?: string;
            /** This is always <code>sql#migrationSettingError</code>. */
            kind?: string;
            /** Identifies the specific error that occurred. */
            type?: string;
        }
        interface SqlInstancesRescheduleMaintenanceRequestBody {
            /** Required. The type of the reschedule the user wants. */
            reschedule?: Reschedule;
        }
        interface SqlInstancesVerifyExternalSyncSettingsResponse {
            /** List of migration violations. */
            errors?: SqlExternalSyncSettingError[];
            /** This is always <code>sql#migrationSettingErrorList</code>. */
            kind?: string;
        }
        interface SqlScheduledMaintenance {
            canDefer?: boolean;
            /** If the scheduled maintenance can be rescheduled. */
            canReschedule?: boolean;
            /** The start time of any upcoming scheduled maintenance for this instance. */
            startTime?: string;
        }
        interface SqlServerDatabaseDetails {
            /** The version of SQL Server with which the database is to be made compatible */
            compatibilityLevel?: number;
            /** The recovery model of a SQL Server database */
            recoveryModel?: string;
        }
        interface SqlServerUserDetails {
            /** If the user has been disabled */
            disabled?: boolean;
            /** The server roles for this user */
            serverRoles?: string[];
        }
        interface SslCert {
            /** PEM representation. */
            cert?: string;
            /** Serial number, as extracted from the certificate. */
            certSerialNumber?: string;
            /** User supplied name.  Constrained to [a-zA-Z.-_ ]+. */
            commonName?: string;
            /**
             * The time when the certificate was created in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for example
             * <code>2012-11-15T16:19:00.094Z</code>
             */
            createTime?: string;
            /**
             * The time when the certificate expires in <a
             * href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format, for example
             * <code>2012-11-15T16:19:00.094Z</code>.
             */
            expirationTime?: string;
            /** Name of the database instance. */
            instance?: string;
            /** This is always <code>sql#sslCert</code>. */
            kind?: string;
            /** The URI of this resource. */
            selfLink?: string;
            /** Sha1 Fingerprint. */
            sha1Fingerprint?: string;
        }
        interface SslCertDetail {
            /** The public information about the cert. */
            certInfo?: SslCert;
            /**
             * The private key for the client cert, in pem format.  Keep private in order
             * to protect your security.
             */
            certPrivateKey?: string;
        }
        interface SslCertsCreateEphemeralRequest {
            /** PEM encoded public key to include in the signed certificate. */
            public_key?: string;
        }
        interface SslCertsInsertRequest {
            /**
             * User supplied name.  Must be a distinct name from the other certificates
             * for this instance.
             */
            commonName?: string;
        }
        interface SslCertsInsertResponse {
            /**
             * The new client certificate and private key.  For First Generation
             * instances, the new certificate does not take effect until the instance is
             * restarted.
             */
            clientCert?: SslCertDetail;
            /** This is always <code>sql#sslCertsInsert</code>. */
            kind?: string;
            /** The operation to track the ssl certs insert request. */
            operation?: Operation;
            /**
             * The server Certificate Authority's certificate.  If this is missing you can
             * force a new one to be generated by calling resetSslConfig method on
             * instances resource.
             */
            serverCaCert?: SslCert;
        }
        interface SslCertsListResponse {
            /** List of client certificates for the instance. */
            items?: SslCert[];
            /** This is always <code>sql#sslCertsList</code>. */
            kind?: string;
        }
        interface Tier {
            /** The maximum disk size of this tier in bytes. */
            DiskQuota?: string;
            /** This is always <code>sql#tier</code>. */
            kind?: string;
            /** The maximum RAM usage of this tier in bytes. */
            RAM?: string;
            /** The applicable regions for this tier. */
            region?: string[];
            /**
             * An identifier for the machine type, for example, db-n1-standard-1. For
             * related information, see <a href="/sql/pricing">Pricing</a>.
             */
            tier?: string;
        }
        interface TiersListResponse {
            /** List of tiers. */
            items?: Tier[];
            /** This is always <code>sql#tiersList</code>. */
            kind?: string;
        }
        interface TruncateLogContext {
            /** This is always <code>sql#truncateLogContext</code>. */
            kind?: string;
            /**
             * The type of log to truncate. Valid values are
             * <code>MYSQL_GENERAL_TABLE</code> and <code>MYSQL_SLOW_TABLE</code>.
             */
            logType?: string;
        }
        interface User {
            /**
             * This field is deprecated and will be removed from a future version of the
             * API.
             */
            etag?: string;
            /**
             * The host name from which the user can connect. For <code>insert</code>
             * operations, host defaults to an empty string. For <code>update</code>
             * operations, host is specified as part of the request URL. The host name
             * cannot be updated after insertion.
             */
            host?: string;
            /**
             * The name of the Cloud SQL instance. This does not include the project ID.
             * Can be omitted for <code>update</code> since it is already specified on the
             * URL.
             */
            instance?: string;
            /** This is always <code>sql#user</code>. */
            kind?: string;
            /**
             * The name of the user in the Cloud SQL instance. Can be omitted for
             * <code>update</code> since it is already specified in the URL.
             */
            name?: string;
            /** The password for the user. */
            password?: string;
            /**
             * The project ID of the project containing the Cloud SQL database. The Google
             * apps domain is prefixed if applicable. Can be omitted for
             * <code>update</code> since it is already specified on the URL.
             */
            project?: string;
            sqlserverUserDetails?: SqlServerUserDetails;
        }
        interface UsersListResponse {
            /** List of user resources in the instance. */
            items?: User[];
            /** This is always <code>sql#usersList</code>. */
            kind?: string;
            /**
             * An identifier that uniquely identifies the operation. You can use this
             * identifier to retrieve the Operations resource that has information about
             * the operation.
             */
            nextPageToken?: string;
        }
        interface BackupRunsResource {
            /** Deletes the backup taken by a backup run. */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The ID of the Backup Run to delete. To find a Backup Run ID, use the <a
                 * href="/sql/docs/db_path/admin-api/rest/v1beta4/backupRuns/list">list</a>
                 * method.
                 */
                id: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Retrieves a resource containing information about a backup run. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The ID of this Backup Run. */
                id: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<BackupRun>;
            /**
             * Creates a new backup run on demand. This method is applicable only to
             * Second Generation instances.
             */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BackupRun;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BackupRun): Request<Operation>;
            /**
             * Lists all backup runs associated with a given instance and configuration in
             * the reverse chronological order of the backup initiation time.
             */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of backup runs per response. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * A previously-returned page token representing part of the larger set of
                 * results to view.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<BackupRunsListResponse>;
        }
        interface DatabasesResource {
            /** Deletes a database from a Cloud SQL instance. */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the database to be deleted in the instance. */
                database: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Retrieves a resource containing information about a database inside a Cloud
             * SQL instance.
             */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the database in the instance. */
                database: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Database>;
            /**
             * Inserts a resource containing information about a database inside a Cloud
             * SQL instance.
             */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Database;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Database): Request<Operation>;
            /** Lists databases in the specified Cloud SQL instance. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DatabasesListResponse>;
            /**
             * Partially updates a resource containing information about a database inside
             * a Cloud SQL instance. This method supports patch semantics.
             * <aside
             * class="caution"><strong>Caution:</strong> This is not a partial update, so
             * you must include values for all the settings that you want to retain. For
             * partial updates, use <a
             * href="/sql/docs/db_path/admin-api/rest/v1beta4/instances/update">update</a>.</aside>
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the database to be updated in the instance. */
                database: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Database;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the database to be updated in the instance. */
                database: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Database): Request<Operation>;
            /**
             * Updates a resource containing information about a database inside a Cloud
             * SQL instance.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the database to be updated in the instance. */
                database: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Database;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the database to be updated in the instance. */
                database: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Database): Request<Operation>;
        }
        interface FlagsResource {
            /** List all available database flags for Cloud SQL instances. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * Database type and version you want to retrieve flags for. By default, this
                 * method returns flags for all database types and versions.
                 */
                databaseVersion?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<FlagsListResponse>;
        }
        interface InstancesResource {
            /**
             * Add a new trusted Certificate Authority (CA) version for the specified
             * instance. Required to prepare for a certificate rotation. If a CA version
             * was previously added but never used in a certificate rotation, this
             * operation replaces that version. There cannot be more than one CA version
             * waiting to be rotated in.
             */
            addServerCa(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Creates a Cloud SQL instance as a clone of the source instance. */
            clone(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The ID of the Cloud SQL instance to be cloned (source). This does not
                 * include the project ID.
                 */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the source as well as the clone Cloud SQL instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InstancesCloneRequest;
            }): Request<Operation>;
            clone(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The ID of the Cloud SQL instance to be cloned (source). This does not
                 * include the project ID.
                 */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the source as well as the clone Cloud SQL instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InstancesCloneRequest): Request<Operation>;
            /** Deletes a Cloud SQL instance. */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance to be deleted. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Demotes the stand-alone instance to be a Cloud SQL read replica for an
             * external database server.
             */
            demoteMaster(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance name. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InstancesDemoteMasterRequest;
            }): Request<Operation>;
            demoteMaster(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance name. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InstancesDemoteMasterRequest): Request<Operation>;
            /**
             * Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL
             * dump or CSV file.
             */
            export(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance to be exported. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InstancesExportRequest;
            }): Request<Operation>;
            export(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance to be exported. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InstancesExportRequest): Request<Operation>;
            /** Failover the instance to its failover replica instance. */
            failover(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** ID of the project that contains the read replica. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InstancesFailoverRequest;
            }): Request<Operation>;
            failover(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** ID of the project that contains the read replica. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InstancesFailoverRequest): Request<Operation>;
            /** Retrieves a resource containing information about a Cloud SQL instance. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DatabaseInstance>;
            /**
             * Imports data into a Cloud SQL instance from a SQL dump  or CSV file in
             * Cloud Storage.
             */
            import(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InstancesImportRequest;
            }): Request<Operation>;
            import(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InstancesImportRequest): Request<Operation>;
            /** Creates a new Cloud SQL instance. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * Project ID of the project to which the newly created Cloud SQL instances
                 * should belong.
                 */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DatabaseInstance;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * Project ID of the project to which the newly created Cloud SQL instances
                 * should belong.
                 */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DatabaseInstance): Request<Operation>;
            /** Lists instances under a given project. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response.
                 * The expression is in the form of field:value. For example,
                 * 'instanceType:CLOUD_SQL_INSTANCE'. Fields can be nested as needed as per
                 * their JSON representation, such as 'settings.userLabels.auto_start:true'.
                 *
                 * Multiple filter queries are space-separated. For example.
                 * 'state:RUNNABLE instanceType:CLOUD_SQL_INSTANCE'. By default, each
                 * expression is an AND expression. However, you can include AND and OR
                 * expressions explicitly.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The maximum number of results to return per response. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * A previously-returned page token representing part of the larger set of
                 * results to view.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project for which to list Cloud SQL instances. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<InstancesListResponse>;
            /**
             * Lists all of the trusted Certificate Authorities (CAs) for the specified
             * instance. There can be up to three CAs listed: the CA that was used to sign
             * the certificate that is currently in use, a CA that has been added but not
             * yet used to sign a certificate, and a CA used to sign a certificate that
             * has previously rotated out.
             */
            listServerCas(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<InstancesListServerCasResponse>;
            /**
             * Updates settings of a Cloud SQL instance.
             * This method supports patch semantics.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DatabaseInstance;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DatabaseInstance): Request<Operation>;
            /** Promotes the read replica instance to be a stand-alone Cloud SQL instance. */
            promoteReplica(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL read replica instance name. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** ID of the project that contains the read replica. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Deletes all client certificates and generates a new server SSL certificate
             * for the instance.
             */
            resetSslConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The parent resource where Cloud SQL resets this SSL config.
                 * Format: projects/{project}/locations/{location}/instances/{instance}
                 */
                parent?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Restarts a Cloud SQL instance. */
            restart(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance to be restarted. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Restores a backup of a Cloud SQL instance. */
            restoreBackup(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InstancesRestoreBackupRequest;
            }): Request<Operation>;
            restoreBackup(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InstancesRestoreBackupRequest): Request<Operation>;
            /**
             * Rotates the server certificate to one signed by the Certificate Authority
             * (CA) version previously added with the addServerCA method.
             */
            rotateServerCa(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InstancesRotateServerCaRequest;
            }): Request<Operation>;
            rotateServerCa(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InstancesRotateServerCaRequest): Request<Operation>;
            /** Starts the replication in the read replica instance. */
            startReplica(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL read replica instance name. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** ID of the project that contains the read replica. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Stops the replication in the read replica instance. */
            stopReplica(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL read replica instance name. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** ID of the project that contains the read replica. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Truncate MySQL general and slow query log tables */
            truncateLog(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the Cloud SQL project. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InstancesTruncateLogRequest;
            }): Request<Operation>;
            truncateLog(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the Cloud SQL project. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InstancesTruncateLogRequest): Request<Operation>;
            /** Updates settings of a Cloud SQL instance. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DatabaseInstance;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DatabaseInstance): Request<Operation>;
        }
        interface OperationsResource {
            /** Retrieves an instance operation that has been performed on an instance. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Instance operation ID. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Lists all instance operations that have been performed on the given Cloud
             * SQL instance in the reverse chronological order of the start time.
             */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of operations per response. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * A previously-returned page token representing part of the larger set of
                 * results to view.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<OperationsListResponse>;
        }
        interface InstancesResource {
            /** Reschedules the maintenance on the given instance. */
            rescheduleMaintenance(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SqlInstancesRescheduleMaintenanceRequestBody;
            }): Request<Operation>;
            rescheduleMaintenance(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SqlInstancesRescheduleMaintenanceRequestBody): Request<Operation>;
            /** Start External master migration. */
            startExternalSync(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** ID of the project that contains the first generation instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** External sync mode */
                syncMode?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Verify External master external sync settings. */
            verifyExternalSyncSettings(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** External sync mode */
                syncMode?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Flag to enable verifying connection only */
                verifyConnectionOnly?: boolean;
            }): Request<SqlInstancesVerifyExternalSyncSettingsResponse>;
        }
        interface ProjectsResource {
            instances: InstancesResource;
        }
        interface SslCertsResource {
            /**
             * Generates a short-lived X509 certificate containing the provided public key
             * and signed by a private key specific to the target instance. Users may use
             * the certificate to authenticate as themselves when connecting to the
             * database.
             */
            createEphemeral(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the Cloud SQL project. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SslCertsCreateEphemeralRequest;
            }): Request<SslCert>;
            createEphemeral(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the Cloud SQL project. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SslCertsCreateEphemeralRequest): Request<SslCert>;
            /**
             * Deletes the SSL certificate. For First Generation instances, the
             * certificate remains valid until the instance is restarted.
             */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Sha1 FingerPrint. */
                sha1Fingerprint: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Retrieves a particular SSL certificate.  Does not include the private key
             * (required for usage).  The private key must be saved from the response to
             * initial creation.
             */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Sha1 FingerPrint. */
                sha1Fingerprint: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<SslCert>;
            /**
             * Creates an SSL certificate and returns it along with the private key and
             * server certificate authority.  The new certificate will not be usable until
             * the instance is restarted.
             */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SslCertsInsertRequest;
            }): Request<SslCertsInsertResponse>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SslCertsInsertRequest): Request<SslCertsInsertResponse>;
            /** Lists all of the current SSL certificates for the instance. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Cloud SQL instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<SslCertsListResponse>;
        }
        interface TiersResource {
            /**
             * Lists all available machine types (tiers) for Cloud SQL, for example,
             * db-n1-standard-1. For related information, see <a
             * href="/sql/pricing">Pricing</a>.
             */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project for which to list tiers. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<TiersListResponse>;
        }
        interface UsersResource {
            /** Deletes a user from a Cloud SQL instance. */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Host of the user in the instance. */
                host?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the user in the instance. */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Creates a new user in a Cloud SQL instance. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: User;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: User): Request<Operation>;
            /** Lists users in the specified Cloud SQL instance. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<UsersListResponse>;
            /** Updates an existing user in a Cloud SQL instance. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Optional. Host of the user in the instance. */
                host?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the user in the instance. */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: User;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Optional. Host of the user in the instance. */
                host?: string;
                /** Database instance ID. This does not include the project ID. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the user in the instance. */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID of the project that contains the instance. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: User): Request<Operation>;
        }

        const backupRuns: BackupRunsResource;

        const databases: DatabasesResource;

        const flags: FlagsResource;

        const instances: InstancesResource;

        const operations: OperationsResource;

        const projects: ProjectsResource;

        const sslCerts: SslCertsResource;

        const tiers: TiersResource;

        const users: UsersResource;
    }
}
