/* This is stub file for gapi.client.accesscontextmanager definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('accesscontextmanager', 'v1', () => {
        /** now we can use gapi.client.accesscontextmanager */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Create an `AccessPolicy`. Fails if this organization already has a
         * `AccessPolicy`. The longrunning Operation will have a successful status
         * once the `AccessPolicy` has propagated to long-lasting storage.
         * Syntactic and basic semantic errors will be returned in `metadata` as a
         * BadRequest proto.
         */
        await gapi.client.accesscontextmanager.accessPolicies.create({
        }, {
            createTime: "Test string",
            name: "Test string",
            parent: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Delete an Service Perimeter by resource
         * name. The longrunning operation from this RPC will have a successful status
         * once the Service Perimeter has been
         * removed from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.delete({
            name: "Test string",
        });
        /**
         * List all Service Perimeters for an
         * access policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Get an Service Perimeter by resource
         * name.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.get({
            name: "Test string",
        });
        /**
         * Update an Service Perimeter. The
         * longrunning operation from this RPC will have a successful status once the
         * changes to the Service Perimeter have
         * propagated to long-lasting storage. Service Perimeter containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"                ],
                resources: [
                    "Test string"                ],
                restrictedServices: [
                    "Test string"                ],
            },
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Create an Service Perimeter. The
         * longrunning operation from this RPC will have a successful status once the
         * Service Perimeter has
         * propagated to long-lasting storage. Service Perimeters containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"                ],
                resources: [
                    "Test string"                ],
                restrictedServices: [
                    "Test string"                ],
            },
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Delete an Access Level by resource
         * name. The longrunning operation from this RPC will have a successful status
         * once the Access Level has been removed
         * from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.delete({
            name: "Test string",
        });
        /**
         * List all Access Levels for an access
         * policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.list({
            accessLevelFormat: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Get an Access Level by resource
         * name.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.get({
            accessLevelFormat: "Test string",
            name: "Test string",
        });
        /**
         * Update an Access Level. The longrunning
         * operation from this RPC will have a successful status once the changes to
         * the Access Level have propagated
         * to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"                            ],
                            allowedEncryptionStatuses: [
                                "Test string"                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"                        ],
                        members: [
                            "Test string"                        ],
                        negate: true,
                        regions: [
                            "Test string"                        ],
                        requiredAccessLevels: [
                            "Test string"                        ],
                    }                ],
            },
            createTime: "Test string",
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Create an Access Level. The longrunning
         * operation from this RPC will have a successful status once the Access
         * Level has
         * propagated to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.create({
            parent: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"                            ],
                            allowedEncryptionStatuses: [
                                "Test string"                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"                        ],
                        members: [
                            "Test string"                        ],
                        negate: true,
                        regions: [
                            "Test string"                        ],
                        requiredAccessLevels: [
                            "Test string"                        ],
                    }                ],
            },
            createTime: "Test string",
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Delete an AccessPolicy by resource
         * name. The longrunning Operation will have a successful status once the
         * AccessPolicy
         * has been removed from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.delete({
            name: "Test string",
        });
        /**
         * Delete an Service Perimeter by resource
         * name. The longrunning operation from this RPC will have a successful status
         * once the Service Perimeter has been
         * removed from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.delete({
            name: "Test string",
        });
        /**
         * List all Service Perimeters for an
         * access policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Get an Service Perimeter by resource
         * name.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.get({
            name: "Test string",
        });
        /**
         * Update an Service Perimeter. The
         * longrunning operation from this RPC will have a successful status once the
         * changes to the Service Perimeter have
         * propagated to long-lasting storage. Service Perimeter containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"                ],
                resources: [
                    "Test string"                ],
                restrictedServices: [
                    "Test string"                ],
            },
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Create an Service Perimeter. The
         * longrunning operation from this RPC will have a successful status once the
         * Service Perimeter has
         * propagated to long-lasting storage. Service Perimeters containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"                ],
                resources: [
                    "Test string"                ],
                restrictedServices: [
                    "Test string"                ],
            },
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Delete an Access Level by resource
         * name. The longrunning operation from this RPC will have a successful status
         * once the Access Level has been removed
         * from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.delete({
            name: "Test string",
        });
        /**
         * List all Access Levels for an access
         * policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.list({
            accessLevelFormat: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Get an Access Level by resource
         * name.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.get({
            accessLevelFormat: "Test string",
            name: "Test string",
        });
        /**
         * Update an Access Level. The longrunning
         * operation from this RPC will have a successful status once the changes to
         * the Access Level have propagated
         * to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"                            ],
                            allowedEncryptionStatuses: [
                                "Test string"                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"                        ],
                        members: [
                            "Test string"                        ],
                        negate: true,
                        regions: [
                            "Test string"                        ],
                        requiredAccessLevels: [
                            "Test string"                        ],
                    }                ],
            },
            createTime: "Test string",
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Create an Access Level. The longrunning
         * operation from this RPC will have a successful status once the Access
         * Level has
         * propagated to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.create({
            parent: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"                            ],
                            allowedEncryptionStatuses: [
                                "Test string"                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"                        ],
                        members: [
                            "Test string"                        ],
                        negate: true,
                        regions: [
                            "Test string"                        ],
                        requiredAccessLevels: [
                            "Test string"                        ],
                    }                ],
            },
            createTime: "Test string",
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /** Get an AccessPolicy by name. */
        await gapi.client.accesscontextmanager.accessPolicies.get({
            name: "Test string",
        });
        /**
         * Delete an Service Perimeter by resource
         * name. The longrunning operation from this RPC will have a successful status
         * once the Service Perimeter has been
         * removed from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.delete({
            name: "Test string",
        });
        /**
         * List all Service Perimeters for an
         * access policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Get an Service Perimeter by resource
         * name.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.get({
            name: "Test string",
        });
        /**
         * Update an Service Perimeter. The
         * longrunning operation from this RPC will have a successful status once the
         * changes to the Service Perimeter have
         * propagated to long-lasting storage. Service Perimeter containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"                ],
                resources: [
                    "Test string"                ],
                restrictedServices: [
                    "Test string"                ],
            },
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Create an Service Perimeter. The
         * longrunning operation from this RPC will have a successful status once the
         * Service Perimeter has
         * propagated to long-lasting storage. Service Perimeters containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"                ],
                resources: [
                    "Test string"                ],
                restrictedServices: [
                    "Test string"                ],
            },
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Delete an Access Level by resource
         * name. The longrunning operation from this RPC will have a successful status
         * once the Access Level has been removed
         * from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.delete({
            name: "Test string",
        });
        /**
         * List all Access Levels for an access
         * policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.list({
            accessLevelFormat: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Get an Access Level by resource
         * name.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.get({
            accessLevelFormat: "Test string",
            name: "Test string",
        });
        /**
         * Update an Access Level. The longrunning
         * operation from this RPC will have a successful status once the changes to
         * the Access Level have propagated
         * to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"                            ],
                            allowedEncryptionStatuses: [
                                "Test string"                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"                        ],
                        members: [
                            "Test string"                        ],
                        negate: true,
                        regions: [
                            "Test string"                        ],
                        requiredAccessLevels: [
                            "Test string"                        ],
                    }                ],
            },
            createTime: "Test string",
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Create an Access Level. The longrunning
         * operation from this RPC will have a successful status once the Access
         * Level has
         * propagated to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.create({
            parent: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"                            ],
                            allowedEncryptionStatuses: [
                                "Test string"                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"                        ],
                        members: [
                            "Test string"                        ],
                        negate: true,
                        regions: [
                            "Test string"                        ],
                        requiredAccessLevels: [
                            "Test string"                        ],
                    }                ],
            },
            createTime: "Test string",
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * List all AccessPolicies under a
         * container.
         */
        await gapi.client.accesscontextmanager.accessPolicies.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Delete an Service Perimeter by resource
         * name. The longrunning operation from this RPC will have a successful status
         * once the Service Perimeter has been
         * removed from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.delete({
            name: "Test string",
        });
        /**
         * List all Service Perimeters for an
         * access policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Get an Service Perimeter by resource
         * name.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.get({
            name: "Test string",
        });
        /**
         * Update an Service Perimeter. The
         * longrunning operation from this RPC will have a successful status once the
         * changes to the Service Perimeter have
         * propagated to long-lasting storage. Service Perimeter containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"                ],
                resources: [
                    "Test string"                ],
                restrictedServices: [
                    "Test string"                ],
            },
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Create an Service Perimeter. The
         * longrunning operation from this RPC will have a successful status once the
         * Service Perimeter has
         * propagated to long-lasting storage. Service Perimeters containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"                ],
                resources: [
                    "Test string"                ],
                restrictedServices: [
                    "Test string"                ],
            },
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Delete an Access Level by resource
         * name. The longrunning operation from this RPC will have a successful status
         * once the Access Level has been removed
         * from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.delete({
            name: "Test string",
        });
        /**
         * List all Access Levels for an access
         * policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.list({
            accessLevelFormat: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Get an Access Level by resource
         * name.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.get({
            accessLevelFormat: "Test string",
            name: "Test string",
        });
        /**
         * Update an Access Level. The longrunning
         * operation from this RPC will have a successful status once the changes to
         * the Access Level have propagated
         * to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"                            ],
                            allowedEncryptionStatuses: [
                                "Test string"                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"                        ],
                        members: [
                            "Test string"                        ],
                        negate: true,
                        regions: [
                            "Test string"                        ],
                        requiredAccessLevels: [
                            "Test string"                        ],
                    }                ],
            },
            createTime: "Test string",
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Create an Access Level. The longrunning
         * operation from this RPC will have a successful status once the Access
         * Level has
         * propagated to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.create({
            parent: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"                            ],
                            allowedEncryptionStatuses: [
                                "Test string"                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"                        ],
                        members: [
                            "Test string"                        ],
                        negate: true,
                        regions: [
                            "Test string"                        ],
                        requiredAccessLevels: [
                            "Test string"                        ],
                    }                ],
            },
            createTime: "Test string",
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Update an AccessPolicy. The
         * longrunning Operation from this RPC will have a successful status once the
         * changes to the AccessPolicy have propagated
         * to long-lasting storage. Syntactic and basic semantic errors will be
         * returned in `metadata` as a BadRequest proto.
         */
        await gapi.client.accesscontextmanager.accessPolicies.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            name: "Test string",
            parent: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Delete an Service Perimeter by resource
         * name. The longrunning operation from this RPC will have a successful status
         * once the Service Perimeter has been
         * removed from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.delete({
            name: "Test string",
        });
        /**
         * List all Service Perimeters for an
         * access policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Get an Service Perimeter by resource
         * name.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.get({
            name: "Test string",
        });
        /**
         * Update an Service Perimeter. The
         * longrunning operation from this RPC will have a successful status once the
         * changes to the Service Perimeter have
         * propagated to long-lasting storage. Service Perimeter containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"                ],
                resources: [
                    "Test string"                ],
                restrictedServices: [
                    "Test string"                ],
            },
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Create an Service Perimeter. The
         * longrunning operation from this RPC will have a successful status once the
         * Service Perimeter has
         * propagated to long-lasting storage. Service Perimeters containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"                ],
                resources: [
                    "Test string"                ],
                restrictedServices: [
                    "Test string"                ],
            },
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Delete an Access Level by resource
         * name. The longrunning operation from this RPC will have a successful status
         * once the Access Level has been removed
         * from long-lasting storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.delete({
            name: "Test string",
        });
        /**
         * List all Access Levels for an access
         * policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.list({
            accessLevelFormat: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Get an Access Level by resource
         * name.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.get({
            accessLevelFormat: "Test string",
            name: "Test string",
        });
        /**
         * Update an Access Level. The longrunning
         * operation from this RPC will have a successful status once the changes to
         * the Access Level have propagated
         * to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"                            ],
                            allowedEncryptionStatuses: [
                                "Test string"                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"                        ],
                        members: [
                            "Test string"                        ],
                        negate: true,
                        regions: [
                            "Test string"                        ],
                        requiredAccessLevels: [
                            "Test string"                        ],
                    }                ],
            },
            createTime: "Test string",
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Create an Access Level. The longrunning
         * operation from this RPC will have a successful status once the Access
         * Level has
         * propagated to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.create({
            parent: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"                            ],
                            allowedEncryptionStatuses: [
                                "Test string"                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"                        ],
                        members: [
                            "Test string"                        ],
                        negate: true,
                        regions: [
                            "Test string"                        ],
                        requiredAccessLevels: [
                            "Test string"                        ],
                    }                ],
            },
            createTime: "Test string",
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
            updateTime: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation.  The server
         * makes a best effort to cancel the operation, but success is not
         * guaranteed.  If the server doesn't support this method, it returns
         * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
         * Operations.GetOperation or
         * other methods to check whether the cancellation succeeded or whether the
         * operation completed despite cancellation. On successful cancellation,
         * the operation is not deleted; instead, it becomes an operation with
         * an Operation.error value with a google.rpc.Status.code of 1,
         * corresponding to `Code.CANCELLED`.
         */
        await gapi.client.accesscontextmanager.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is
         * no longer interested in the operation result. It does not cancel the
         * operation. If the server doesn't support this method, it returns
         * `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.accesscontextmanager.operations.delete({
            name: "Test string",
        });
        /**
         * Gets the latest state of a long-running operation.  Clients can use this
         * method to poll the operation result at intervals as recommended by the API
         * service.
         */
        await gapi.client.accesscontextmanager.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the
         * server doesn't support this method, it returns `UNIMPLEMENTED`.
         *
         * NOTE: the `name` binding allows API services to override the binding
         * to use different resource name schemes, such as `users/&#42;/operations`. To
         * override the binding, API services can add a binding such as
         * `"/v1/{name=users/&#42;}/operations"` to their service configuration.
         * For backwards compatibility, the default name includes the operations
         * collection id, however overriding users must ensure the name binding
         * is the parent resource, without the operations collection id.
         */
        await gapi.client.accesscontextmanager.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
