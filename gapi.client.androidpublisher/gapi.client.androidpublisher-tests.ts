/* This is stub file for gapi.client.androidpublisher definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('androidpublisher', 'v3', () => {
        /** now we can use gapi.client.androidpublisher */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your Google Play Developer account */
            'https://www.googleapis.com/auth/androidpublisher',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Commits/applies the changes made in this edit back to the app. */
        await gapi.client.androidpublisher.edits.commit({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to
         * enterprises using Google Play for Work whose application is configured to restrict distribution to the enterprise domain.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before
         * calling this endpoint (a timeout of 2 minutes is recommended). See: https://developers.google.com/api-client-library/java/google-api-java-client/errors
         * for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads the deobfuscation file of the specified APK. If a deobfuscation file already exists, it will be replaced. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Fetches app details for this edit. This includes the default language and developer support contact information. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Updates app details for this edit. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates app details for this edit. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the Expansion File configuration for the APK specified. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /**
         * Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. This
         * method supports patch semantics.
         */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads and attaches a new Expansion File to the APK specified. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads a new image and adds it to the list of images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes the specified localized store listing from an edit. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all localized listings from an edit. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Fetches information about a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Returns all of the localized store listings attached to this edit. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Creates or updates a localized store listing. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            autoEnrolledAndroidGroups: [
                "Test string"            ],
            autoEnrolledGoogleGroups: [
                "Test string"            ],
            excludedGoogleGroups: [
                "Test string"            ],
            googleGroups: [
                "Test string"            ],
        });
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            autoEnrolledAndroidGroups: [
                "Test string"            ],
            autoEnrolledGoogleGroups: [
                "Test string"            ],
            excludedGoogleGroups: [
                "Test string"            ],
            googleGroups: [
                "Test string"            ],
        });
        /** Fetches the track configuration for the specified track type. Includes the APK version codes that are in this track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all the track configurations for this edit. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Updates the track configuration for the specified track type. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    controls: [
                        {
                            modRanges: [
                                {
                                    end: "Test string",
                                    start: "Test string",
                                }                            ],
                            stratifiedSamplings: [
                                {
                                    modRanges: [
                                        {
                                            end: "Test string",
                                            start: "Test string",
                                        }                                    ],
                                    stratum: {
                                        brand: "Test string",
                                    },
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    pinnedVersions: [
                        {
                            targetings: [
                                {
                                    countryCodes: [
                                        "Test string"                                    ],
                                    devices: [
                                        {
                                            brand: "Test string",
                                            device: "Test string",
                                            product: "Test string",
                                        }                                    ],
                                    phoneskyVersions: [
                                        "Test string"                                    ],
                                    sdkVersions: [
                                        42                                    ],
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    rollbackEnabled: true,
                    sampling: {
                        modRanges: [
                            {
                                end: "Test string",
                                start: "Test string",
                            }                        ],
                        modulus: "Test string",
                        salt: 42,
                        stratifiedSamplings: [
                            {
                                modRanges: [
                                    {
                                        end: "Test string",
                                        start: "Test string",
                                    }                                ],
                                stratum: {
                                    brand: "Test string",
                                },
                            }                        ],
                        useAndroidId: true,
                    },
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Updates the track configuration for the specified track type. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    controls: [
                        {
                            modRanges: [
                                {
                                    end: "Test string",
                                    start: "Test string",
                                }                            ],
                            stratifiedSamplings: [
                                {
                                    modRanges: [
                                        {
                                            end: "Test string",
                                            start: "Test string",
                                        }                                    ],
                                    stratum: {
                                        brand: "Test string",
                                    },
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    pinnedVersions: [
                        {
                            targetings: [
                                {
                                    countryCodes: [
                                        "Test string"                                    ],
                                    devices: [
                                        {
                                            brand: "Test string",
                                            device: "Test string",
                                            product: "Test string",
                                        }                                    ],
                                    phoneskyVersions: [
                                        "Test string"                                    ],
                                    sdkVersions: [
                                        42                                    ],
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    rollbackEnabled: true,
                    sampling: {
                        modRanges: [
                            {
                                end: "Test string",
                                start: "Test string",
                            }                        ],
                        modulus: "Test string",
                        salt: 42,
                        stratifiedSamplings: [
                            {
                                modRanges: [
                                    {
                                        end: "Test string",
                                        start: "Test string",
                                    }                                ],
                                stratum: {
                                    brand: "Test string",
                                },
                            }                        ],
                        useAndroidId: true,
                    },
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /**
         * Deletes an edit for an app. Creating a new edit will automatically delete any of your previous edits so this method need only be called if you want to
         * preemptively abandon an edit.
         */
        await gapi.client.androidpublisher.edits.delete({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to
         * enterprises using Google Play for Work whose application is configured to restrict distribution to the enterprise domain.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before
         * calling this endpoint (a timeout of 2 minutes is recommended). See: https://developers.google.com/api-client-library/java/google-api-java-client/errors
         * for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads the deobfuscation file of the specified APK. If a deobfuscation file already exists, it will be replaced. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Fetches app details for this edit. This includes the default language and developer support contact information. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Updates app details for this edit. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates app details for this edit. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the Expansion File configuration for the APK specified. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /**
         * Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. This
         * method supports patch semantics.
         */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads and attaches a new Expansion File to the APK specified. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads a new image and adds it to the list of images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes the specified localized store listing from an edit. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all localized listings from an edit. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Fetches information about a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Returns all of the localized store listings attached to this edit. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Creates or updates a localized store listing. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            autoEnrolledAndroidGroups: [
                "Test string"            ],
            autoEnrolledGoogleGroups: [
                "Test string"            ],
            excludedGoogleGroups: [
                "Test string"            ],
            googleGroups: [
                "Test string"            ],
        });
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            autoEnrolledAndroidGroups: [
                "Test string"            ],
            autoEnrolledGoogleGroups: [
                "Test string"            ],
            excludedGoogleGroups: [
                "Test string"            ],
            googleGroups: [
                "Test string"            ],
        });
        /** Fetches the track configuration for the specified track type. Includes the APK version codes that are in this track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all the track configurations for this edit. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Updates the track configuration for the specified track type. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    controls: [
                        {
                            modRanges: [
                                {
                                    end: "Test string",
                                    start: "Test string",
                                }                            ],
                            stratifiedSamplings: [
                                {
                                    modRanges: [
                                        {
                                            end: "Test string",
                                            start: "Test string",
                                        }                                    ],
                                    stratum: {
                                        brand: "Test string",
                                    },
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    pinnedVersions: [
                        {
                            targetings: [
                                {
                                    countryCodes: [
                                        "Test string"                                    ],
                                    devices: [
                                        {
                                            brand: "Test string",
                                            device: "Test string",
                                            product: "Test string",
                                        }                                    ],
                                    phoneskyVersions: [
                                        "Test string"                                    ],
                                    sdkVersions: [
                                        42                                    ],
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    rollbackEnabled: true,
                    sampling: {
                        modRanges: [
                            {
                                end: "Test string",
                                start: "Test string",
                            }                        ],
                        modulus: "Test string",
                        salt: 42,
                        stratifiedSamplings: [
                            {
                                modRanges: [
                                    {
                                        end: "Test string",
                                        start: "Test string",
                                    }                                ],
                                stratum: {
                                    brand: "Test string",
                                },
                            }                        ],
                        useAndroidId: true,
                    },
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Updates the track configuration for the specified track type. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    controls: [
                        {
                            modRanges: [
                                {
                                    end: "Test string",
                                    start: "Test string",
                                }                            ],
                            stratifiedSamplings: [
                                {
                                    modRanges: [
                                        {
                                            end: "Test string",
                                            start: "Test string",
                                        }                                    ],
                                    stratum: {
                                        brand: "Test string",
                                    },
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    pinnedVersions: [
                        {
                            targetings: [
                                {
                                    countryCodes: [
                                        "Test string"                                    ],
                                    devices: [
                                        {
                                            brand: "Test string",
                                            device: "Test string",
                                            product: "Test string",
                                        }                                    ],
                                    phoneskyVersions: [
                                        "Test string"                                    ],
                                    sdkVersions: [
                                        42                                    ],
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    rollbackEnabled: true,
                    sampling: {
                        modRanges: [
                            {
                                end: "Test string",
                                start: "Test string",
                            }                        ],
                        modulus: "Test string",
                        salt: 42,
                        stratifiedSamplings: [
                            {
                                modRanges: [
                                    {
                                        end: "Test string",
                                        start: "Test string",
                                    }                                ],
                                stratum: {
                                    brand: "Test string",
                                },
                            }                        ],
                        useAndroidId: true,
                    },
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Returns information about the edit specified. Calls will fail if the edit is no long active (e.g. has been deleted, superseded or expired). */
        await gapi.client.androidpublisher.edits.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to
         * enterprises using Google Play for Work whose application is configured to restrict distribution to the enterprise domain.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before
         * calling this endpoint (a timeout of 2 minutes is recommended). See: https://developers.google.com/api-client-library/java/google-api-java-client/errors
         * for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads the deobfuscation file of the specified APK. If a deobfuscation file already exists, it will be replaced. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Fetches app details for this edit. This includes the default language and developer support contact information. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Updates app details for this edit. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates app details for this edit. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the Expansion File configuration for the APK specified. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /**
         * Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. This
         * method supports patch semantics.
         */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads and attaches a new Expansion File to the APK specified. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads a new image and adds it to the list of images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes the specified localized store listing from an edit. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all localized listings from an edit. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Fetches information about a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Returns all of the localized store listings attached to this edit. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Creates or updates a localized store listing. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            autoEnrolledAndroidGroups: [
                "Test string"            ],
            autoEnrolledGoogleGroups: [
                "Test string"            ],
            excludedGoogleGroups: [
                "Test string"            ],
            googleGroups: [
                "Test string"            ],
        });
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            autoEnrolledAndroidGroups: [
                "Test string"            ],
            autoEnrolledGoogleGroups: [
                "Test string"            ],
            excludedGoogleGroups: [
                "Test string"            ],
            googleGroups: [
                "Test string"            ],
        });
        /** Fetches the track configuration for the specified track type. Includes the APK version codes that are in this track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all the track configurations for this edit. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Updates the track configuration for the specified track type. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    controls: [
                        {
                            modRanges: [
                                {
                                    end: "Test string",
                                    start: "Test string",
                                }                            ],
                            stratifiedSamplings: [
                                {
                                    modRanges: [
                                        {
                                            end: "Test string",
                                            start: "Test string",
                                        }                                    ],
                                    stratum: {
                                        brand: "Test string",
                                    },
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    pinnedVersions: [
                        {
                            targetings: [
                                {
                                    countryCodes: [
                                        "Test string"                                    ],
                                    devices: [
                                        {
                                            brand: "Test string",
                                            device: "Test string",
                                            product: "Test string",
                                        }                                    ],
                                    phoneskyVersions: [
                                        "Test string"                                    ],
                                    sdkVersions: [
                                        42                                    ],
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    rollbackEnabled: true,
                    sampling: {
                        modRanges: [
                            {
                                end: "Test string",
                                start: "Test string",
                            }                        ],
                        modulus: "Test string",
                        salt: 42,
                        stratifiedSamplings: [
                            {
                                modRanges: [
                                    {
                                        end: "Test string",
                                        start: "Test string",
                                    }                                ],
                                stratum: {
                                    brand: "Test string",
                                },
                            }                        ],
                        useAndroidId: true,
                    },
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Updates the track configuration for the specified track type. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    controls: [
                        {
                            modRanges: [
                                {
                                    end: "Test string",
                                    start: "Test string",
                                }                            ],
                            stratifiedSamplings: [
                                {
                                    modRanges: [
                                        {
                                            end: "Test string",
                                            start: "Test string",
                                        }                                    ],
                                    stratum: {
                                        brand: "Test string",
                                    },
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    pinnedVersions: [
                        {
                            targetings: [
                                {
                                    countryCodes: [
                                        "Test string"                                    ],
                                    devices: [
                                        {
                                            brand: "Test string",
                                            device: "Test string",
                                            product: "Test string",
                                        }                                    ],
                                    phoneskyVersions: [
                                        "Test string"                                    ],
                                    sdkVersions: [
                                        42                                    ],
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    rollbackEnabled: true,
                    sampling: {
                        modRanges: [
                            {
                                end: "Test string",
                                start: "Test string",
                            }                        ],
                        modulus: "Test string",
                        salt: 42,
                        stratifiedSamplings: [
                            {
                                modRanges: [
                                    {
                                        end: "Test string",
                                        start: "Test string",
                                    }                                ],
                                stratum: {
                                    brand: "Test string",
                                },
                            }                        ],
                        useAndroidId: true,
                    },
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Creates a new edit for an app, populated with the app's current state. */
        await gapi.client.androidpublisher.edits.insert({
            packageName: "Test string",
        }, {
            expiryTimeSeconds: "Test string",
            id: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to
         * enterprises using Google Play for Work whose application is configured to restrict distribution to the enterprise domain.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before
         * calling this endpoint (a timeout of 2 minutes is recommended). See: https://developers.google.com/api-client-library/java/google-api-java-client/errors
         * for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads the deobfuscation file of the specified APK. If a deobfuscation file already exists, it will be replaced. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Fetches app details for this edit. This includes the default language and developer support contact information. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Updates app details for this edit. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates app details for this edit. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the Expansion File configuration for the APK specified. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /**
         * Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. This
         * method supports patch semantics.
         */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads and attaches a new Expansion File to the APK specified. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads a new image and adds it to the list of images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes the specified localized store listing from an edit. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all localized listings from an edit. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Fetches information about a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Returns all of the localized store listings attached to this edit. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Creates or updates a localized store listing. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            autoEnrolledAndroidGroups: [
                "Test string"            ],
            autoEnrolledGoogleGroups: [
                "Test string"            ],
            excludedGoogleGroups: [
                "Test string"            ],
            googleGroups: [
                "Test string"            ],
        });
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            autoEnrolledAndroidGroups: [
                "Test string"            ],
            autoEnrolledGoogleGroups: [
                "Test string"            ],
            excludedGoogleGroups: [
                "Test string"            ],
            googleGroups: [
                "Test string"            ],
        });
        /** Fetches the track configuration for the specified track type. Includes the APK version codes that are in this track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all the track configurations for this edit. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Updates the track configuration for the specified track type. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    controls: [
                        {
                            modRanges: [
                                {
                                    end: "Test string",
                                    start: "Test string",
                                }                            ],
                            stratifiedSamplings: [
                                {
                                    modRanges: [
                                        {
                                            end: "Test string",
                                            start: "Test string",
                                        }                                    ],
                                    stratum: {
                                        brand: "Test string",
                                    },
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    pinnedVersions: [
                        {
                            targetings: [
                                {
                                    countryCodes: [
                                        "Test string"                                    ],
                                    devices: [
                                        {
                                            brand: "Test string",
                                            device: "Test string",
                                            product: "Test string",
                                        }                                    ],
                                    phoneskyVersions: [
                                        "Test string"                                    ],
                                    sdkVersions: [
                                        42                                    ],
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    rollbackEnabled: true,
                    sampling: {
                        modRanges: [
                            {
                                end: "Test string",
                                start: "Test string",
                            }                        ],
                        modulus: "Test string",
                        salt: 42,
                        stratifiedSamplings: [
                            {
                                modRanges: [
                                    {
                                        end: "Test string",
                                        start: "Test string",
                                    }                                ],
                                stratum: {
                                    brand: "Test string",
                                },
                            }                        ],
                        useAndroidId: true,
                    },
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Updates the track configuration for the specified track type. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    controls: [
                        {
                            modRanges: [
                                {
                                    end: "Test string",
                                    start: "Test string",
                                }                            ],
                            stratifiedSamplings: [
                                {
                                    modRanges: [
                                        {
                                            end: "Test string",
                                            start: "Test string",
                                        }                                    ],
                                    stratum: {
                                        brand: "Test string",
                                    },
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    pinnedVersions: [
                        {
                            targetings: [
                                {
                                    countryCodes: [
                                        "Test string"                                    ],
                                    devices: [
                                        {
                                            brand: "Test string",
                                            device: "Test string",
                                            product: "Test string",
                                        }                                    ],
                                    phoneskyVersions: [
                                        "Test string"                                    ],
                                    sdkVersions: [
                                        42                                    ],
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    rollbackEnabled: true,
                    sampling: {
                        modRanges: [
                            {
                                end: "Test string",
                                start: "Test string",
                            }                        ],
                        modulus: "Test string",
                        salt: 42,
                        stratifiedSamplings: [
                            {
                                modRanges: [
                                    {
                                        end: "Test string",
                                        start: "Test string",
                                    }                                ],
                                stratum: {
                                    brand: "Test string",
                                },
                            }                        ],
                        useAndroidId: true,
                    },
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Checks that the edit can be successfully committed. The edit's changes are not applied to the live app. */
        await gapi.client.androidpublisher.edits.validate({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to
         * enterprises using Google Play for Work whose application is configured to restrict distribution to the enterprise domain.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before
         * calling this endpoint (a timeout of 2 minutes is recommended). See: https://developers.google.com/api-client-library/java/google-api-java-client/errors
         * for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads the deobfuscation file of the specified APK. If a deobfuscation file already exists, it will be replaced. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Fetches app details for this edit. This includes the default language and developer support contact information. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Updates app details for this edit. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates app details for this edit. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the Expansion File configuration for the APK specified. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /**
         * Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. This
         * method supports patch semantics.
         */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads and attaches a new Expansion File to the APK specified. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads a new image and adds it to the list of images for the specified language and image type. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes the specified localized store listing from an edit. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all localized listings from an edit. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Fetches information about a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Returns all of the localized store listings attached to this edit. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Creates or updates a localized store listing. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            autoEnrolledAndroidGroups: [
                "Test string"            ],
            autoEnrolledGoogleGroups: [
                "Test string"            ],
            excludedGoogleGroups: [
                "Test string"            ],
            googleGroups: [
                "Test string"            ],
        });
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            autoEnrolledAndroidGroups: [
                "Test string"            ],
            autoEnrolledGoogleGroups: [
                "Test string"            ],
            excludedGoogleGroups: [
                "Test string"            ],
            googleGroups: [
                "Test string"            ],
        });
        /** Fetches the track configuration for the specified track type. Includes the APK version codes that are in this track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all the track configurations for this edit. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Updates the track configuration for the specified track type. This method supports patch semantics. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    controls: [
                        {
                            modRanges: [
                                {
                                    end: "Test string",
                                    start: "Test string",
                                }                            ],
                            stratifiedSamplings: [
                                {
                                    modRanges: [
                                        {
                                            end: "Test string",
                                            start: "Test string",
                                        }                                    ],
                                    stratum: {
                                        brand: "Test string",
                                    },
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    pinnedVersions: [
                        {
                            targetings: [
                                {
                                    countryCodes: [
                                        "Test string"                                    ],
                                    devices: [
                                        {
                                            brand: "Test string",
                                            device: "Test string",
                                            product: "Test string",
                                        }                                    ],
                                    phoneskyVersions: [
                                        "Test string"                                    ],
                                    sdkVersions: [
                                        42                                    ],
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    rollbackEnabled: true,
                    sampling: {
                        modRanges: [
                            {
                                end: "Test string",
                                start: "Test string",
                            }                        ],
                        modulus: "Test string",
                        salt: 42,
                        stratifiedSamplings: [
                            {
                                modRanges: [
                                    {
                                        end: "Test string",
                                        start: "Test string",
                                    }                                ],
                                stratum: {
                                    brand: "Test string",
                                },
                            }                        ],
                        useAndroidId: true,
                    },
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Updates the track configuration for the specified track type. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    controls: [
                        {
                            modRanges: [
                                {
                                    end: "Test string",
                                    start: "Test string",
                                }                            ],
                            stratifiedSamplings: [
                                {
                                    modRanges: [
                                        {
                                            end: "Test string",
                                            start: "Test string",
                                        }                                    ],
                                    stratum: {
                                        brand: "Test string",
                                    },
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    pinnedVersions: [
                        {
                            targetings: [
                                {
                                    countryCodes: [
                                        "Test string"                                    ],
                                    devices: [
                                        {
                                            brand: "Test string",
                                            device: "Test string",
                                            product: "Test string",
                                        }                                    ],
                                    phoneskyVersions: [
                                        "Test string"                                    ],
                                    sdkVersions: [
                                        42                                    ],
                                }                            ],
                            versionCodes: [
                                "Test string"                            ],
                        }                    ],
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    rollbackEnabled: true,
                    sampling: {
                        modRanges: [
                            {
                                end: "Test string",
                                start: "Test string",
                            }                        ],
                        modulus: "Test string",
                        salt: 42,
                        stratifiedSamplings: [
                            {
                                modRanges: [
                                    {
                                        end: "Test string",
                                        start: "Test string",
                                    }                                ],
                                stratum: {
                                    brand: "Test string",
                                },
                            }                        ],
                        useAndroidId: true,
                    },
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Delete an in-app product for an app. */
        await gapi.client.androidpublisher.inappproducts.delete({
            packageName: "Test string",
            sku: "Test string",
        });
        /** Returns information about the in-app product specified. */
        await gapi.client.androidpublisher.inappproducts.get({
            packageName: "Test string",
            sku: "Test string",
        });
        /** Creates a new in-app product for an app. */
        await gapi.client.androidpublisher.inappproducts.insert({
            autoConvertMissingPrices: true,
            packageName: "Test string",
        }, {
            defaultLanguage: "Test string",
            defaultPrice: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            gracePeriod: "Test string",
            listings: {
                A: {
                    description: "Test string",
                    title: "Test string",
                }            },
            packageName: "Test string",
            prices: {
                A: {
                    currency: "Test string",
                    priceMicros: "Test string",
                }            },
            purchaseType: "Test string",
            sku: "Test string",
            status: "Test string",
            subscriptionPeriod: "Test string",
            trialPeriod: "Test string",
        });
        /** List all the in-app products for an Android app, both subscriptions and managed in-app products.. */
        await gapi.client.androidpublisher.inappproducts.list({
            maxResults: 42,
            packageName: "Test string",
            startIndex: 42,
            token: "Test string",
        });
        /** Updates the details of an in-app product. This method supports patch semantics. */
        await gapi.client.androidpublisher.inappproducts.patch({
            autoConvertMissingPrices: true,
            packageName: "Test string",
            sku: "Test string",
        }, {
            defaultLanguage: "Test string",
            defaultPrice: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            gracePeriod: "Test string",
            listings: {
                A: {
                    description: "Test string",
                    title: "Test string",
                }            },
            packageName: "Test string",
            prices: {
                A: {
                    currency: "Test string",
                    priceMicros: "Test string",
                }            },
            purchaseType: "Test string",
            sku: "Test string",
            status: "Test string",
            subscriptionPeriod: "Test string",
            trialPeriod: "Test string",
        });
        /** Updates the details of an in-app product. */
        await gapi.client.androidpublisher.inappproducts.update({
            autoConvertMissingPrices: true,
            packageName: "Test string",
            sku: "Test string",
        }, {
            defaultLanguage: "Test string",
            defaultPrice: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            gracePeriod: "Test string",
            listings: {
                A: {
                    description: "Test string",
                    title: "Test string",
                }            },
            packageName: "Test string",
            prices: {
                A: {
                    currency: "Test string",
                    priceMicros: "Test string",
                }            },
            purchaseType: "Test string",
            sku: "Test string",
            status: "Test string",
            subscriptionPeriod: "Test string",
            trialPeriod: "Test string",
        });
        /**
         * Uploads an APK to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before
         * calling this endpoint (a timeout of 2 minutes is recommended). See: https://developers.google.com/api-client-library/java/google-api-java-client/errors
         * for an example in java.
         */
        await gapi.client.androidpublisher.internalappsharingartifacts.uploadapk({
            packageName: "Test string",
        });
        /**
         * Uploads an app bundle to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before
         * calling this endpoint (a timeout of 2 minutes is recommended). See: https://developers.google.com/api-client-library/java/google-api-java-client/errors
         * for an example in java.
         */
        await gapi.client.androidpublisher.internalappsharingartifacts.uploadbundle({
            packageName: "Test string",
        });
        /** Refund a user's subscription or in-app purchase order. */
        await gapi.client.androidpublisher.orders.refund({
            orderId: "Test string",
            packageName: "Test string",
            revoke: true,
        });
        /** Returns a single review. */
        await gapi.client.androidpublisher.reviews.get({
            packageName: "Test string",
            reviewId: "Test string",
            translationLanguage: "Test string",
        });
        /** Returns a list of reviews. Only reviews from last week will be returned. */
        await gapi.client.androidpublisher.reviews.list({
            maxResults: 42,
            packageName: "Test string",
            startIndex: 42,
            token: "Test string",
            translationLanguage: "Test string",
        });
        /** Reply to a single review, or update an existing reply. */
        await gapi.client.androidpublisher.reviews.reply({
            packageName: "Test string",
            reviewId: "Test string",
        }, {
            replyText: "Test string",
        });
    }
});
