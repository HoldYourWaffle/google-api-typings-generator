// Type definitions for non-npm package PageSpeed Insights API v5 5.0
// Project: https://developers.google.com/speed/docs/insights/v5/get-started
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://www.googleapis.com/discovery/v1/apis/pagespeedonline/v5/rest

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load PageSpeed Insights API v5 */
    function load(name: "pagespeedonline", version: "v5"): PromiseLike<void>;
    function load(name: "pagespeedonline", version: "v5", callback: () => any): void;

    namespace pagespeedonline {
        // tslint:disable-next-line:no-empty-interface
        interface GoogleprotobufListValue {
        }
        // tslint:disable-next-line:no-empty-interface
        interface GoogleprotobufValue {
        }
        interface LighthouseAuditResultV5 {
            /** The description of the audit. */
            description?: string;
            /** Freeform details section of the audit. */
            details?: Record<string, any>;
            /** The value that should be displayed on the UI for this audit. */
            displayValue?: string;
            /** An error message from a thrown error inside the audit. */
            errorMessage?: string;
            /** An explanation of the errors in the audit. */
            explanation?: string;
            /** The audit's id. */
            id?: string;
            /**
             * A numeric value that has a meaning specific to the audit, e.g. the number of nodes in the DOM or the timestamp of a specific load event. More
             * information can be found in the audit details, if present.
             */
            numericValue?: number;
            score?: any;
            /** The enumerated score display mode. */
            scoreDisplayMode?: string;
            /** The human readable title. */
            title?: string;
            warnings?: any;
        }
        interface LighthouseCategoryV5 {
            /** An array of references to all the audit members of this category. */
            auditRefs?: Array<{
                /** The category group that the audit belongs to (optional). */
                group?: string;
                /** The audit ref id. */
                id?: string;
                /** The weight this audit's score has on the overall category score. */
                weight?: number;
            }>;
            /** A more detailed description of the category and its importance. */
            description?: string;
            /** The string identifier of the category. */
            id?: string;
            /** A description for the manual audits in the category. */
            manualDescription?: string;
            score?: any;
            /** The human-friendly name of the category. */
            title?: string;
        }
        interface LighthouseResultV5 {
            /** Map of audits in the LHR. */
            audits?: Record<string, LighthouseAuditResultV5>;
            /** Map of categories in the LHR. */
            categories?: {
                /** The accessibility category, containing all accessibility related audits. */
                accessibility?: LighthouseCategoryV5;
                /** The best practices category, containing all web best practice related audits. */
                "best-practices"?: LighthouseCategoryV5;
                /** The performance category, containing all performance related audits. */
                performance?: LighthouseCategoryV5;
                /** The Progressive-Web-App (PWA) category, containing all pwa related audits. */
                pwa?: LighthouseCategoryV5;
                /** The Search-Engine-Optimization (SEO) category, containing all seo related audits. */
                seo?: LighthouseCategoryV5;
            };
            /** Map of category groups in the LHR. */
            categoryGroups?: Record<string, {
                /** An optional human readable description of the category group. */
                description?: string;
                /** The title of the category group. */
                title?: string;
            }>;
            /** The configuration settings for this LHR. */
            configSettings?: {
                /** The form factor the emulation should use. */
                emulatedFormFactor?: string;
                /** The locale setting. */
                locale?: string;
                onlyCategories?: any;
            };
            /** Environment settings that were used when making this LHR. */
            environment?: {
                /** The benchmark index number that indicates rough device class. */
                benchmarkIndex?: number;
                /** The user agent string of the version of Chrome used. */
                hostUserAgent?: string;
                /** The user agent string that was sent over the network. */
                networkUserAgent?: string;
            };
            /** The time that this run was fetched. */
            fetchTime?: string;
            /** The final resolved url that was audited. */
            finalUrl?: string;
            /** The internationalization strings that are required to render the LHR. */
            i18n?: {
                /** Internationalized strings that are formatted to the locale in configSettings. */
                rendererFormattedStrings?: {
                    /** The tooltip text on an expandable chevron icon. */
                    auditGroupExpandTooltip?: string;
                    /** The label for the initial request in a critical request chain. */
                    crcInitialNavigation?: string;
                    /** The label for values shown in the summary of critical request chains. */
                    crcLongestDurationLabel?: string;
                    /** The label shown next to an audit or metric that has had an error. */
                    errorLabel?: string;
                    /** The error string shown next to an erroring audit. */
                    errorMissingAuditInfo?: string;
                    /** The title of the lab data performance category. */
                    labDataTitle?: string;
                    /** The disclaimer shown under performance explaning that the network can vary. */
                    lsPerformanceCategoryDescription?: string;
                    /** The heading shown above a list of audits that were not computerd in the run. */
                    manualAuditsGroupTitle?: string;
                    /** The heading shown above a list of audits that do not apply to a page. */
                    notApplicableAuditsGroupTitle?: string;
                    /** The heading for the estimated page load savings opportunity of an audit. */
                    opportunityResourceColumnLabel?: string;
                    /** The heading for the estimated page load savings of opportunity audits. */
                    opportunitySavingsColumnLabel?: string;
                    /** The heading that is shown above a list of audits that are passing. */
                    passedAuditsGroupTitle?: string;
                    /** The label that explains the score gauges scale (0-49, 50-89, 90-100). */
                    scorescaleLabel?: string;
                    /** The label shown preceding important warnings that may have invalidated an entire report. */
                    toplevelWarningsMessage?: string;
                    /** The disclaimer shown below a performance metric value. */
                    varianceDisclaimer?: string;
                    /** The label shown above a bulleted list of warnings. */
                    warningHeader?: string;
                };
            };
            /** The lighthouse version that was used to generate this LHR. */
            lighthouseVersion?: string;
            /** The original requested url. */
            requestedUrl?: string;
            /** List of all run warnings in the LHR. Will always output to at least `[]`. */
            runWarnings?: any;
            /** A top-level error message that, if present, indicates a serious enough problem that this Lighthouse result may need to be discarded. */
            runtimeError?: {
                /** The enumerated Lighthouse Error code. */
                code?: string;
                /** A human readable message explaining the error code. */
                message?: string;
            };
            /** The Stack Pack advice strings. */
            stackPacks?: Array<{
                /** The stack pack advice strings. */
                descriptions?: Record<string, string>;
                /** The stack pack icon data uri. */
                iconDataURL?: string;
                /** The stack pack id. */
                id?: string;
                /** The stack pack title. */
                title?: string;
            }>;
            /** Timing information for this LHR. */
            timing?: {
                /** The total duration of Lighthouse's run. */
                total?: number;
            };
            /** The user agent that was used to run this LHR. */
            userAgent?: string;
        }
        interface PagespeedApiLoadingExperienceV5 {
            /** The url, pattern or origin which the metrics are on. */
            id?: string;
            initial_url?: string;
            metrics?: Record<string, {
                category?: string;
                distributions?: Array<{
                    max?: number;
                    min?: number;
                    proportion?: number;
                }>;
                percentile?: number;
            }>;
            overall_category?: string;
        }
        interface PagespeedApiPagespeedResponseV5 {
            /** The UTC timestamp of this analysis. */
            analysisUTCTimestamp?: string;
            /** The captcha verify result */
            captchaResult?: string;
            /** Canonicalized and final URL for the document, after following page redirects (if any). */
            id?: string;
            /** Kind of result. */
            kind?: string;
            /** Lighthouse response for the audit url as an object. */
            lighthouseResult?: LighthouseResultV5;
            /** Metrics of end users' page loading experience. */
            loadingExperience?: PagespeedApiLoadingExperienceV5;
            /** Metrics of the aggregated page loading experience of the origin */
            originLoadingExperience?: PagespeedApiLoadingExperienceV5;
            /** The version of PageSpeed used to generate these results. */
            version?: {
                /** The major version number of PageSpeed used to generate these results. */
                major?: number;
                /** The minor version number of PageSpeed used to generate these results. */
                minor?: number;
            };
        }
        interface PagespeedapiResource {
            /**
             * Runs PageSpeed analysis on the page at the specified URL, and returns PageSpeed scores, a list of suggestions to make that page faster, and other
             * information.
             */
            runpagespeed(request: {
                /** Data format for the response. */
                alt?: string;
                /** A Lighthouse category to run; if none are given, only Performance category will be run */
                category?: string | string[];
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The locale used to localize formatted results */
                locale?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
                quotaUser?: string;
                /** The analysis strategy (desktop or mobile) to use, and desktop is the default */
                strategy?: string;
                /** The URL to fetch and analyze */
                url: string;
                /** Deprecated. Please use quotaUser instead. */
                userIp?: string;
                /** Campaign name for analytics. */
                utm_campaign?: string;
                /** Campaign source for analytics. */
                utm_source?: string;
            }): Request<PagespeedApiPagespeedResponseV5>;
        }

        const pagespeedapi: PagespeedapiResource;
    }
}
