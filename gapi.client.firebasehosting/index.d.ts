// Type definitions for non-npm package Firebase Hosting API v1beta1 1.0
// Project: https://firebase.google.com/docs/hosting/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://firebasehosting.googleapis.com/$discovery/rest?version=v1beta1
// Revision: 20200317

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Firebase Hosting API v1beta1 */
    function load(name: "firebasehosting", version: "v1beta1"): PromiseLike<void>;
    function load(name: "firebasehosting", version: "v1beta1", callback: () => any): void;

    namespace firebasehosting {
        interface ActingUser {
            /** The email address of the user when the user performed the action. */
            email?: string;
            /**
             * A profile image URL for the user. May not be present if the user has
             * changed their email address or deleted their account.
             */
            imageUrl?: string;
        }
        interface CertDnsChallenge {
            /** The domain name upon which the DNS challenge must be satisfied. */
            domainName?: string;
            /**
             * The value that must be present as a TXT record on the domain name to
             * satisfy the challenge.
             */
            token?: string;
        }
        interface CertHttpChallenge {
            /**
             * The URL path on which to serve the specified token to satisfy the
             * certificate challenge.
             */
            path?: string;
            /**
             * The token to serve at the specified URL path to satisfy the certificate
             * challenge.
             */
            token?: string;
        }
        interface CloneVersionRequest {
            /**
             * If provided, only paths that do not match any of the regexes in this
             * list will be included in the new version.
             */
            exclude?: PathFilter;
            /** If true, immediately finalize the version after cloning is complete. */
            finalize?: boolean;
            /**
             * If provided, only paths that match one or more regexes in this list
             * will be included in the new version.
             */
            include?: PathFilter;
            /**
             * Required. The name of the version to be cloned, in the format:
             * `sites/{site}/versions/{version}`
             */
            sourceVersion?: string;
        }
        interface CloudRunRewrite {
            /**
             * Optional. User-provided region where the Cloud Run service is hosted.<br>
             * Defaults to `us-central1` if not supplied.
             */
            region?: string;
            /** Required. User-defined ID of the Cloud Run service. */
            serviceId?: string;
        }
        interface Domain {
            /** Required. The domain name of the association. */
            domainName?: string;
            /** If set, the domain should redirect with the provided parameters. */
            domainRedirect?: DomainRedirect;
            /**
             * Output only. Information about the provisioning of certificates and the
             * health of the DNS resolution for the domain.
             */
            provisioning?: DomainProvisioning;
            /** Required. The site name of the association. */
            site?: string;
            /** Output only. Additional status of the domain association. */
            status?: string;
            /** Output only. The time at which the domain was last updated. */
            updateTime?: string;
        }
        interface DomainProvisioning {
            /**
             * The TXT records (for the certificate challenge) that were found at the last
             * DNS fetch.
             */
            certChallengeDiscoveredTxt?: string[];
            /** The DNS challenge for generating a certificate. */
            certChallengeDns?: CertDnsChallenge;
            /** The HTTP challenge for generating a certificate. */
            certChallengeHttp?: CertHttpChallenge;
            /**
             * The certificate provisioning status; updated when Firebase Hosting
             * provisions an SSL certificate for the domain.
             */
            certStatus?: string;
            /** The IPs found at the last DNS fetch. */
            discoveredIps?: string[];
            /** The time at which the last DNS fetch occurred. */
            dnsFetchTime?: string;
            /** The DNS record match status as of the last DNS fetch. */
            dnsStatus?: string;
            /** The list of IPs to which the domain is expected to resolve. */
            expectedIps?: string[];
        }
        interface DomainRedirect {
            /** Required. The domain name to redirect to. */
            domainName?: string;
            /** Required. The redirect status code. */
            type?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface Header {
            /**
             * The user-supplied [glob
             * pattern](/docs/hosting/full-config#glob_pattern_matching) to match
             * against the request URL path.
             */
            glob?: string;
            /** Required. The additional headers to add to the response. */
            headers?: Record<string, string>;
            /**
             * The user-supplied RE2 regular expression to match against the request
             * URL path.
             */
            regex?: string;
        }
        interface ListDomainsResponse {
            /** The list of domains, if any exist. */
            domains?: Domain[];
            /** The pagination token, if more results exist. */
            nextPageToken?: string;
        }
        interface ListReleasesResponse {
            /**
             * If there are additional releases remaining beyond the ones in this
             * response, then supply this token in the next
             * [`list`](../sites.versions.files/list) call to continue with the next set
             * of releases.
             */
            nextPageToken?: string;
            /** The list of hashes of files that still need to be uploaded, if any exist. */
            releases?: Release[];
        }
        interface ListVersionFilesResponse {
            /** The list path/hashes in the specified version. */
            files?: VersionFile[];
            /** The pagination token, if more results exist. */
            nextPageToken?: string;
        }
        interface ListVersionsResponse {
            /** The pagination token, if more results exist */
            nextPageToken?: string;
            /** The list of versions, if any exist. */
            versions?: Version[];
        }
        interface Operation {
            /**
             * If the value is `false`, it means the operation is still in progress.
             * If `true`, the operation is completed, and either `error` or `response` is
             * available.
             */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation.  It typically
             * contains progress information and common metadata such as create time.
             * Some services might not provide such metadata.  Any method that returns a
             * long-running operation should document the metadata type, if any.
             */
            metadata?: Record<string, any>;
            /**
             * The server-assigned name, which is only unique within the same service that
             * originally returns it. If you use the default HTTP mapping, the
             * `name` should be a resource name ending with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success.  If the original
             * method returns no data on success, such as `Delete`, the response is
             * `google.protobuf.Empty`.  If the original method is standard
             * `Get`/`Create`/`Update`, the response should be the resource.  For other
             * methods, the response should have the type `XxxResponse`, where `Xxx`
             * is the original method name.  For example, if the original method name
             * is `TakeSnapshot()`, the inferred response type is
             * `TakeSnapshotResponse`.
             */
            response?: Record<string, any>;
        }
        interface PathFilter {
            /** An array of regexes to filter by. */
            regexes?: string[];
        }
        interface PopulateVersionFilesRequest {
            /**
             * A set of file paths to the hashes corresponding to assets that should be
             * added to the version. Note that a file path to an empty hash will remove
             * the path from the version. Calculate a hash by Gzipping the file then
             * taking the SHA256 hash of the newly compressed file.
             */
            files?: Record<string, string>;
        }
        interface PopulateVersionFilesResponse {
            /**
             * The content hashes of the specified files that need to be uploaded to the
             * specified endpoint.
             */
            uploadRequiredHashes?: string[];
            /**
             * The URL to which the files should be uploaded, in the format:
             * <br>"https://upload-firebasehosting.googleapis.com/upload/sites/<var>site-name</var>/versions/<var>versionID</var>/files".
             * <br>Perform a multipart `POST` of the Gzipped file contents to the URL
             * using a forward slash and the hash of the file appended to the end.
             */
            uploadUrl?: string;
        }
        interface PreviewConfig {
            /** If true, preview URLs are enabled for this version. */
            active?: boolean;
            /**
             * Indicates the expiration time for previewing this
             * version; preview URL requests received after this time will 404.
             */
            expireTime?: string;
        }
        interface Redirect {
            /**
             * The user-supplied [glob
             * pattern](/docs/hosting/full-config#glob_pattern_matching) to match
             * against the request URL path.
             */
            glob?: string;
            /**
             * Required. The value to put in the HTTP location header of the response.
             * <br>The location can contain capture group values from the pattern using
             * a `:` prefix to identify the segment and an optional `&#42;` to capture the
             * rest of the URL.
             * For example:
             * <code>"glob": "/:capture&#42;",
             * <br>"statusCode": 301,
             * <br>"location": "https://example.com/foo/:capture"</code>
             */
            location?: string;
            /**
             * The user-supplied RE2 regular expression to match against the request
             * URL path.
             */
            regex?: string;
            /**
             * Required. The status HTTP code to return in the response. It must be a
             * valid 3xx status code.
             */
            statusCode?: number;
        }
        interface Release {
            /**
             * The deploy description when the release was created. The value can be up to
             * 512&nbsp;characters.
             */
            message?: string;
            /**
             * Output only. The unique identifier for the release, in the format:
             * <code>sites/<var>site-name</var>/releases/<var>releaseID</var></code>
             * This name is provided in the response body when you call the
             * [`CreateRelease`](sites.releases/create) endpoint.
             */
            name?: string;
            /** Output only. The time at which the version is set to be public. */
            releaseTime?: string;
            /** Output only. Identifies the user who created the release. */
            releaseUser?: ActingUser;
            /**
             * Explains the reason for the release.
             * <br>Specify a value for this field only when creating a `SITE_DISABLE`
             * type release.
             */
            type?: string;
            /** Output only. The configuration and content that was released. */
            version?: Version;
        }
        interface Rewrite {
            /** The request will be forwarded to Firebase Dynamic Links. */
            dynamicLinks?: boolean;
            /**
             * The function to proxy requests to. Must match the exported function
             * name exactly.
             */
            function?: string;
            /**
             * The user-supplied [glob
             * pattern](/docs/hosting/full-config#glob_pattern_matching) to match
             * against the request URL path.
             */
            glob?: string;
            /** The URL path to rewrite the request to. */
            path?: string;
            /**
             * The user-supplied RE2 regular expression to match against the request
             * URL path.
             */
            regex?: string;
            /** The request will be forwarded to Cloud Run. */
            run?: CloudRunRewrite;
        }
        interface ServingConfig {
            /** How to handle well known App Association files. */
            appAssociation?: string;
            /** Defines whether to drop the file extension from uploaded files. */
            cleanUrls?: boolean;
            /**
             * A list of custom response headers that are added to the content if the
             * request URL path matches the glob.
             */
            headers?: Header[];
            /**
             * A list of globs that will cause the response to redirect to another
             * location.
             */
            redirects?: Redirect[];
            /**
             * A list of rewrites that will act as if the service were given the
             * destination URL.
             */
            rewrites?: Rewrite[];
            /** Defines how to handle a trailing slash in the URL path. */
            trailingSlashBehavior?: string;
        }
        interface SiteConfig {
            /**
             * The number of FINALIZED versions that will be held for a site before
             * automatic deletion. When a new version is deployed, content for versions
             * in storage in excess of this number will be deleted, and will no longer be
             * billed for storage usage. Oldest versions will be deleted first; sites are
             * created with an unlimited number of max_versions by default.
             */
            maxVersions?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /**
             * A list of messages that carry the error details.  There is a common set of
             * message types for APIs to use.
             */
            details?: Array<Record<string, any>>;
            /**
             * A developer-facing error message, which should be in English. Any
             * user-facing error message should be localized and sent in the
             * google.rpc.Status.details field, or localized by the client.
             */
            message?: string;
        }
        interface Version {
            /**
             * The configuration for the behavior of the site. This configuration exists
             * in the [`firebase.json`](/docs/cli/#the_firebasejson_file) file.
             */
            config?: ServingConfig;
            /** Output only. The time at which the version was created. */
            createTime?: string;
            /** Output only. Identifies the user who created the version. */
            createUser?: ActingUser;
            /** Output only. The time at which the version was `DELETED`. */
            deleteTime?: string;
            /** Output only. Identifies the user who `DELETED` the version. */
            deleteUser?: ActingUser;
            /**
             * Output only. The total number of files associated with the version.
             * <br>This value is calculated after a version is `FINALIZED`.
             */
            fileCount?: string;
            /** Output only. The time at which the version was `FINALIZED`. */
            finalizeTime?: string;
            /** Output only. Identifies the user who `FINALIZED` the version. */
            finalizeUser?: ActingUser;
            /** The labels used for extra metadata and/or filtering. */
            labels?: Record<string, string>;
            /**
             * The unique identifier for a version, in the format:
             * <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
             * This name is provided in the response body when you call the
             * [`CreateVersion`](../sites.versions/create) endpoint.
             */
            name?: string;
            /**
             * Version preview configuration for the site version. This configuration
             * specfies whether previewing is enabled for this site version. Version
             * previews allow you to preview your site at a custom URL before
             * releasing it as the live version.
             */
            preview?: PreviewConfig;
            /**
             * The deploy status of a version.
             * <br>
             * <br>For a successful deploy, call the
             * [`CreateVersion`](sites.versions/create) endpoint to make a new version
             * (`CREATED` status),
             * [upload all desired files](sites.versions/populateFiles) to the version,
             * then [update](sites.versions/patch) the version to the `FINALIZED` status.
             * <br>
             * <br>Note that if you leave the version in the `CREATED` state for more
             * than 12&nbsp;hours, the system will automatically mark the version as
             * `ABANDONED`.
             * <br>
             * <br>You can also change the status of a version to `DELETED` by calling the
             * [`DeleteVersion`](sites.versions/delete) endpoint.
             */
            status?: string;
            /**
             * Output only. The total stored bytesize of the version.
             * <br>This value is calculated after a version is `FINALIZED`.
             */
            versionBytes?: string;
        }
        interface VersionFile {
            /** The SHA256 content hash of the file. */
            hash?: string;
            /** The URI at which the file's content should display. */
            path?: string;
            /**
             * Output only. The current status of a particular file in the specified
             * version.
             * <br>The value will be either `pending upload` or `uploaded`.
             */
            status?: string;
        }
        interface OperationsResource {
            /**
             * Gets the latest state of a long-running operation.  Clients can use this
             * method to poll the operation result at intervals as recommended by the API
             * service.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
        }
        interface ReleasesResource {
            /**
             * Creates a new release which makes the content of the specified version
             * actively display on the appropriate URL(s).
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The site that the release belongs to, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * The unique identifier for a version, in the format:
                 * <code>/sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 * The <var>site-name</var> in this version identifier must match the
                 * <var>site-name</var> in the `parent` parameter.
                 * <br>
                 * <br>This query parameter must be empty if the `type` field in the
                 * request body is `SITE_DISABLE`.
                 */
                versionName?: string;
                /** Request body */
                resource: Release;
            }): Request<Release>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The site that the release belongs to, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * The unique identifier for a version, in the format:
                 * <code>/sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 * The <var>site-name</var> in this version identifier must match the
                 * <var>site-name</var> in the `parent` parameter.
                 * <br>
                 * <br>This query parameter must be empty if the `type` field in the
                 * request body is `SITE_DISABLE`.
                 */
                versionName?: string;
            },
            body: Release): Request<Release>;
            /** Lists the releases that have been created on the specified site. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The page size to return. Defaults to 100. */
                pageSize?: number;
                /** The next_page_token from a previous request, if provided. */
                pageToken?: string;
                /**
                 * Required. The parent for which to list files, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListReleasesResponse>;
        }
        interface ChannelsResource {
            releases: ReleasesResource;
        }
        interface ReleasesResource {
            /**
             * Creates a new release which makes the content of the specified version
             * actively display on the appropriate URL(s).
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The site that the release belongs to, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * The unique identifier for a version, in the format:
                 * <code>/sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 * The <var>site-name</var> in this version identifier must match the
                 * <var>site-name</var> in the `parent` parameter.
                 * <br>
                 * <br>This query parameter must be empty if the `type` field in the
                 * request body is `SITE_DISABLE`.
                 */
                versionName?: string;
                /** Request body */
                resource: Release;
            }): Request<Release>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The site that the release belongs to, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * The unique identifier for a version, in the format:
                 * <code>/sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 * The <var>site-name</var> in this version identifier must match the
                 * <var>site-name</var> in the `parent` parameter.
                 * <br>
                 * <br>This query parameter must be empty if the `type` field in the
                 * request body is `SITE_DISABLE`.
                 */
                versionName?: string;
            },
            body: Release): Request<Release>;
            /** Lists the releases that have been created on the specified site. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The page size to return. Defaults to 100. */
                pageSize?: number;
                /** The next_page_token from a previous request, if provided. */
                pageToken?: string;
                /**
                 * Required. The parent for which to list files, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListReleasesResponse>;
        }
        interface SitesResource {
            channels: ChannelsResource;
            releases: ReleasesResource;
        }
        interface ProjectsResource {
            operations: OperationsResource;
            sites: SitesResource;
        }
        interface ReleasesResource {
            /**
             * Creates a new release which makes the content of the specified version
             * actively display on the appropriate URL(s).
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The site that the release belongs to, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * The unique identifier for a version, in the format:
                 * <code>/sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 * The <var>site-name</var> in this version identifier must match the
                 * <var>site-name</var> in the `parent` parameter.
                 * <br>
                 * <br>This query parameter must be empty if the `type` field in the
                 * request body is `SITE_DISABLE`.
                 */
                versionName?: string;
                /** Request body */
                resource: Release;
            }): Request<Release>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The site that the release belongs to, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * The unique identifier for a version, in the format:
                 * <code>/sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 * The <var>site-name</var> in this version identifier must match the
                 * <var>site-name</var> in the `parent` parameter.
                 * <br>
                 * <br>This query parameter must be empty if the `type` field in the
                 * request body is `SITE_DISABLE`.
                 */
                versionName?: string;
            },
            body: Release): Request<Release>;
            /** Lists the releases that have been created on the specified site. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The page size to return. Defaults to 100. */
                pageSize?: number;
                /** The next_page_token from a previous request, if provided. */
                pageToken?: string;
                /**
                 * Required. The parent for which to list files, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListReleasesResponse>;
        }
        interface ChannelsResource {
            releases: ReleasesResource;
        }
        interface DomainsResource {
            /** Creates a domain mapping on the specified site. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The parent to create the domain association for, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Domain;
            }): Request<Domain>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The parent to create the domain association for, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Domain): Request<Domain>;
            /** Deletes the existing domain mapping on the specified site. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the domain association to delete. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets a domain mapping on the specified site. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the domain configuration to get. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Domain>;
            /** Lists the domains for the specified site. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The page size to return. Defaults to 50. */
                pageSize?: number;
                /** The next_page_token from a previous request, if provided. */
                pageToken?: string;
                /**
                 * Required. The parent for which to list domains, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListDomainsResponse>;
            /**
             * Updates the specified domain mapping, creating the mapping as if it does
             * not exist.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The name of the domain association to update or create, if an
                 * association doesn't already exist.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Domain;
            }): Request<Domain>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The name of the domain association to update or create, if an
                 * association doesn't already exist.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Domain): Request<Domain>;
        }
        interface ReleasesResource {
            /**
             * Creates a new release which makes the content of the specified version
             * actively display on the appropriate URL(s).
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The site that the release belongs to, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * The unique identifier for a version, in the format:
                 * <code>/sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 * The <var>site-name</var> in this version identifier must match the
                 * <var>site-name</var> in the `parent` parameter.
                 * <br>
                 * <br>This query parameter must be empty if the `type` field in the
                 * request body is `SITE_DISABLE`.
                 */
                versionName?: string;
                /** Request body */
                resource: Release;
            }): Request<Release>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The site that the release belongs to, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * The unique identifier for a version, in the format:
                 * <code>/sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 * The <var>site-name</var> in this version identifier must match the
                 * <var>site-name</var> in the `parent` parameter.
                 * <br>
                 * <br>This query parameter must be empty if the `type` field in the
                 * request body is `SITE_DISABLE`.
                 */
                versionName?: string;
            },
            body: Release): Request<Release>;
            /** Lists the releases that have been created on the specified site. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The page size to return. Defaults to 100. */
                pageSize?: number;
                /** The next_page_token from a previous request, if provided. */
                pageToken?: string;
                /**
                 * Required. The parent for which to list files, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListReleasesResponse>;
        }
        interface FilesResource {
            /** Lists the remaining files to be uploaded for the specified version. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The page size to return. Defaults to 1000. */
                pageSize?: number;
                /**
                 * The next_page_token from a previous request, if provided. This will be the
                 * encoded version of a firebase.hosting.proto.metadata.ListFilesPageToken.
                 */
                pageToken?: string;
                /**
                 * Required. The parent to list files for, in the format:
                 * <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The type of files in the version that should be listed. */
                status?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListVersionFilesResponse>;
        }
        interface VersionsResource {
            /**
             * Creates a new version on the target site using the content
             * of the specified version.
             */
            clone(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The target site where the cloned version will reside,
                 * in the format: `sites/{site}`
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CloneVersionRequest;
            }): Request<Operation>;
            clone(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The target site where the cloned version will reside,
                 * in the format: `sites/{site}`
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CloneVersionRequest): Request<Operation>;
            /** Creates a new version for a site. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The parent to create the version for, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The self-reported size of the version. This value is used for a pre-emptive
                 * quota check for legacy version uploads.
                 */
                sizeBytes?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * A unique id for the new version. This is only specified for legacy version
                 * creations.
                 */
                versionId?: string;
                /** Request body */
                resource: Version;
            }): Request<Version>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The parent to create the version for, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The self-reported size of the version. This value is used for a pre-emptive
                 * quota check for legacy version uploads.
                 */
                sizeBytes?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * A unique id for the new version. This is only specified for legacy version
                 * creations.
                 */
                versionId?: string;
            },
            body: Version): Request<Version>;
            /** Deletes the specified version. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The name of the version to be deleted, in the format:
                 * <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * Lists the versions that have been created on the specified site.
             * Will include filtering in the future.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The filter string used to return a subset of versions in the response.
                 * Currently supported fields for filtering are: name, status,
                 * and create_time. Filter processing will be implemented in accordance
                 * with go/filtering.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of versions to return. The service may return fewer than
                 * this value.
                 * If unspecified, at most 25 versions will be returned.
                 * The maximum value is 100; values above 100 will be coerced to 100
                 */
                pageSize?: number;
                /** The next_page_token from a previous request, if provided. */
                pageToken?: string;
                /**
                 * Required. The parent for which to list files, in the format:
                 * <code>sites/<var>site-name</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListVersionsResponse>;
            /**
             * Updates the specified metadata for a version. Note that this method will
             * fail with `FAILED_PRECONDITION` in the event of an invalid state
             * transition. The only valid transition for a version is currently from a
             * `CREATED` status to a `FINALIZED` status.
             * Use [`DeleteVersion`](../sites.versions/delete) to set the status of a
             * version to `DELETED`.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The unique identifier for a version, in the format:
                 * <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 * This name is provided in the response body when you call the
                 * [`CreateVersion`](../sites.versions/create) endpoint.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * A set of field names from your [version](../sites.versions) that you want
                 * to update.
                 * <br>A field will be overwritten if, and only if, it's in the mask.
                 * <br>If a mask is not provided then a default mask of only
                 * [`status`](../sites.versions#Version.FIELDS.status) will be used.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Version;
            }): Request<Version>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The unique identifier for a version, in the format:
                 * <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 * This name is provided in the response body when you call the
                 * [`CreateVersion`](../sites.versions/create) endpoint.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * A set of field names from your [version](../sites.versions) that you want
                 * to update.
                 * <br>A field will be overwritten if, and only if, it's in the mask.
                 * <br>If a mask is not provided then a default mask of only
                 * [`status`](../sites.versions#Version.FIELDS.status) will be used.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Version): Request<Version>;
            /** Adds content files to a version. */
            populateFiles(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The version to add files to, in the format:
                 * <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: PopulateVersionFilesRequest;
            }): Request<PopulateVersionFilesResponse>;
            populateFiles(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The version to add files to, in the format:
                 * <code>sites/<var>site-name</var>/versions/<var>versionID</var></code>
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: PopulateVersionFilesRequest): Request<PopulateVersionFilesResponse>;
            files: FilesResource;
        }
        interface SitesResource {
            /** Gets the Hosting metadata for a specific site. */
            getConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The site for which to get the SiteConfig, in the format:
                 * <code>sites/<var>site-name</var>/config</code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<SiteConfig>;
            /** Sets the Hosting metadata for a specific site. */
            updateConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The site for which to update the SiteConfig, in the format:
                 * <code>sites/<var>site-name</var>/config</code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * A set of field names from your [site configuration](../sites.SiteConfig)
                 * that you want to update.
                 * <br>A field will be overwritten if, and only if, it's in the mask.
                 * <br>If a mask is not provided then a default mask of only
                 * [`max_versions`](../sites.SiteConfig.max_versions) will be used.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SiteConfig;
            }): Request<SiteConfig>;
            updateConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The site for which to update the SiteConfig, in the format:
                 * <code>sites/<var>site-name</var>/config</code>
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * A set of field names from your [site configuration](../sites.SiteConfig)
                 * that you want to update.
                 * <br>A field will be overwritten if, and only if, it's in the mask.
                 * <br>If a mask is not provided then a default mask of only
                 * [`max_versions`](../sites.SiteConfig.max_versions) will be used.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SiteConfig): Request<SiteConfig>;
            channels: ChannelsResource;
            domains: DomainsResource;
            releases: ReleasesResource;
            versions: VersionsResource;
        }

        const projects: ProjectsResource;

        const sites: SitesResource;
    }
}
