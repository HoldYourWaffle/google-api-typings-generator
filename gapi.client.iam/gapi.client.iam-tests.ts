/* This is stub file for gapi.client.iam definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('iam', 'v1', () => {
        /** now we can use gapi.client.iam */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Lints a Cloud IAM policy object or its sub fields. Currently supports
         * google.iam.v1.Binding.condition.
         *
         * Each lint operation consists of multiple lint validation units.
         * Each unit inspects the input object in regard to a particular linting
         * aspect and issues a google.iam.admin.v1.LintResult disclosing the
         * result.
         *
         * The set of applicable validation units is determined by the Cloud IAM
         * server and is not configurable.
         *
         * Regardless of any lint issues or their severities, successful calls to
         * `lintPolicy` return an HTTP 200 OK status code.
         */
        await gapi.client.iam.iamPolicies.lintPolicy({
        }, {
            condition: {
                description: "Test string",
                expression: "Test string",
                location: "Test string",
                title: "Test string",
            },
            fullResourceName: "Test string",
        });
        /**
         * Returns a list of services that support service level audit logging
         * configuration for the given resource.
         */
        await gapi.client.iam.iamPolicies.queryAuditableServices({
        }, {
            fullResourceName: "Test string",
        });
        /**
         * Lists the permissions testable on a resource.
         * A permission is testable if it can be tested for an identity on a resource.
         */
        await gapi.client.iam.permissions.queryTestablePermissions({
        }, {
            fullResourceName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets a Role definition. */
        await gapi.client.iam.roles.get({
            name: "Test string",
        });
        /** Lists the Roles defined on a resource. */
        await gapi.client.iam.roles.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            showDeleted: true,
            view: "Test string",
        });
        /**
         * Queries roles that can be granted on a particular resource.
         * A role is grantable if it can be used as the role in a binding for a policy
         * for that resource.
         */
        await gapi.client.iam.roles.queryGrantableRoles({
        }, {
            fullResourceName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
    }
});
