/* This is stub file for gapi.client.proximitybeacon definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('proximitybeacon', 'v1beta1', () => {
        /** now we can use gapi.client.proximitybeacon */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and modify your beacons */
            'https://www.googleapis.com/auth/userlocation.beacon.registry',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Given one or more beacon observations, returns any beacon information
         * and attachments accessible to your application. Authorize by using the
         * [API
         * key](https://developers.google.com/beacons/proximity/get-started#request_a_browser_api_key)
         * for the application.
         */
        await gapi.client.proximitybeacon.beaconinfo.getforobserved({
        }, {
            namespacedTypes: [
                "Test string"            ],
            observations: [
                {
                    advertisedId: {
                        id: "Test string",
                        type: "Test string",
                    },
                    telemetry: "Test string",
                    timestampMs: "Test string",
                }            ],
        });
        /**
         * Activates a beacon. A beacon that is active will return information
         * and attachment data when queried via `beaconinfo.getforobserved`.
         * Calling this method on an already active beacon will do nothing (but
         * will return a successful response code).
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.activate({
            beaconName: "Test string",
            projectId: "Test string",
        });
        /**
         * Associates the given data with the specified beacon. Attachment data must
         * contain two parts:
         * <ul>
         * <li>A namespaced type.</li>
         * <li>The actual attachment data itself.</li>
         * </ul>
         * The namespaced type consists of two parts, the namespace and the type.
         * The namespace must be one of the values returned by the `namespaces`
         * endpoint, while the type can be a string of any characters except for the
         * forward slash (`/`) up to 100 characters in length.
         *
         * Attachment data can be up to 1024 bytes long.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.create({
            beaconName: "Test string",
            projectId: "Test string",
        }, {
            attachmentName: "Test string",
            creationTimeMs: "Test string",
            data: "Test string",
            maxDistanceMeters: 42,
            namespacedType: "Test string",
        });
        /**
         * Deletes multiple attachments on a given beacon. This operation is
         * permanent and cannot be undone.
         *
         * You can optionally specify `namespacedType` to choose which attachments
         * should be deleted. If you do not specify `namespacedType`,  all your
         * attachments on the given beacon will be deleted. You also may explicitly
         * specify `&#42;/&#42;` to delete all.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.batchDelete({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * Deletes the specified attachment for the given beacon. Each attachment has
         * a unique attachment name (`attachmentName`) which is returned when you
         * fetch the attachment data via this API. You specify this with the delete
         * request to control which attachment is removed. This operation cannot be
         * undone.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.delete({
            attachmentName: "Test string",
            projectId: "Test string",
        });
        /**
         * Returns the attachments for the specified beacon that match the specified
         * namespaced-type pattern.
         *
         * To control which namespaced types are returned, you add the
         * `namespacedType` query parameter to the request. You must either use
         * `&#42;/&#42;`, to return all attachments, or the namespace must be one of
         * the ones returned from the  `namespaces` endpoint.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.list({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * List the diagnostics for a single beacon. You can also list diagnostics for
         * all the beacons owned by your Google Developers Console project by using
         * the beacon name `beacons/-`.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.diagnostics.list({
            alertFilter: "Test string",
            beaconName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Deactivates a beacon. Once deactivated, the API will not return
         * information nor attachment data for the beacon when queried via
         * `beaconinfo.getforobserved`. Calling this method on an already inactive
         * beacon will do nothing (but will return a successful response code).
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.deactivate({
            beaconName: "Test string",
            projectId: "Test string",
        });
        /**
         * Associates the given data with the specified beacon. Attachment data must
         * contain two parts:
         * <ul>
         * <li>A namespaced type.</li>
         * <li>The actual attachment data itself.</li>
         * </ul>
         * The namespaced type consists of two parts, the namespace and the type.
         * The namespace must be one of the values returned by the `namespaces`
         * endpoint, while the type can be a string of any characters except for the
         * forward slash (`/`) up to 100 characters in length.
         *
         * Attachment data can be up to 1024 bytes long.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.create({
            beaconName: "Test string",
            projectId: "Test string",
        }, {
            attachmentName: "Test string",
            creationTimeMs: "Test string",
            data: "Test string",
            maxDistanceMeters: 42,
            namespacedType: "Test string",
        });
        /**
         * Deletes multiple attachments on a given beacon. This operation is
         * permanent and cannot be undone.
         *
         * You can optionally specify `namespacedType` to choose which attachments
         * should be deleted. If you do not specify `namespacedType`,  all your
         * attachments on the given beacon will be deleted. You also may explicitly
         * specify `&#42;/&#42;` to delete all.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.batchDelete({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * Deletes the specified attachment for the given beacon. Each attachment has
         * a unique attachment name (`attachmentName`) which is returned when you
         * fetch the attachment data via this API. You specify this with the delete
         * request to control which attachment is removed. This operation cannot be
         * undone.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.delete({
            attachmentName: "Test string",
            projectId: "Test string",
        });
        /**
         * Returns the attachments for the specified beacon that match the specified
         * namespaced-type pattern.
         *
         * To control which namespaced types are returned, you add the
         * `namespacedType` query parameter to the request. You must either use
         * `&#42;/&#42;`, to return all attachments, or the namespace must be one of
         * the ones returned from the  `namespaces` endpoint.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.list({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * List the diagnostics for a single beacon. You can also list diagnostics for
         * all the beacons owned by your Google Developers Console project by using
         * the beacon name `beacons/-`.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.diagnostics.list({
            alertFilter: "Test string",
            beaconName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Decommissions the specified beacon in the service. This beacon will no
         * longer be returned from `beaconinfo.getforobserved`. This operation is
         * permanent -- you will not be able to re-register a beacon with this ID
         * again.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.decommission({
            beaconName: "Test string",
            projectId: "Test string",
        });
        /**
         * Associates the given data with the specified beacon. Attachment data must
         * contain two parts:
         * <ul>
         * <li>A namespaced type.</li>
         * <li>The actual attachment data itself.</li>
         * </ul>
         * The namespaced type consists of two parts, the namespace and the type.
         * The namespace must be one of the values returned by the `namespaces`
         * endpoint, while the type can be a string of any characters except for the
         * forward slash (`/`) up to 100 characters in length.
         *
         * Attachment data can be up to 1024 bytes long.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.create({
            beaconName: "Test string",
            projectId: "Test string",
        }, {
            attachmentName: "Test string",
            creationTimeMs: "Test string",
            data: "Test string",
            maxDistanceMeters: 42,
            namespacedType: "Test string",
        });
        /**
         * Deletes multiple attachments on a given beacon. This operation is
         * permanent and cannot be undone.
         *
         * You can optionally specify `namespacedType` to choose which attachments
         * should be deleted. If you do not specify `namespacedType`,  all your
         * attachments on the given beacon will be deleted. You also may explicitly
         * specify `&#42;/&#42;` to delete all.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.batchDelete({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * Deletes the specified attachment for the given beacon. Each attachment has
         * a unique attachment name (`attachmentName`) which is returned when you
         * fetch the attachment data via this API. You specify this with the delete
         * request to control which attachment is removed. This operation cannot be
         * undone.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.delete({
            attachmentName: "Test string",
            projectId: "Test string",
        });
        /**
         * Returns the attachments for the specified beacon that match the specified
         * namespaced-type pattern.
         *
         * To control which namespaced types are returned, you add the
         * `namespacedType` query parameter to the request. You must either use
         * `&#42;/&#42;`, to return all attachments, or the namespace must be one of
         * the ones returned from the  `namespaces` endpoint.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.list({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * List the diagnostics for a single beacon. You can also list diagnostics for
         * all the beacons owned by your Google Developers Console project by using
         * the beacon name `beacons/-`.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.diagnostics.list({
            alertFilter: "Test string",
            beaconName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Deletes the specified beacon including all diagnostics data for the beacon
         * as well as any attachments on the beacon (including those belonging to
         * other projects). This operation cannot be undone.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.delete({
            beaconName: "Test string",
            projectId: "Test string",
        });
        /**
         * Associates the given data with the specified beacon. Attachment data must
         * contain two parts:
         * <ul>
         * <li>A namespaced type.</li>
         * <li>The actual attachment data itself.</li>
         * </ul>
         * The namespaced type consists of two parts, the namespace and the type.
         * The namespace must be one of the values returned by the `namespaces`
         * endpoint, while the type can be a string of any characters except for the
         * forward slash (`/`) up to 100 characters in length.
         *
         * Attachment data can be up to 1024 bytes long.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.create({
            beaconName: "Test string",
            projectId: "Test string",
        }, {
            attachmentName: "Test string",
            creationTimeMs: "Test string",
            data: "Test string",
            maxDistanceMeters: 42,
            namespacedType: "Test string",
        });
        /**
         * Deletes multiple attachments on a given beacon. This operation is
         * permanent and cannot be undone.
         *
         * You can optionally specify `namespacedType` to choose which attachments
         * should be deleted. If you do not specify `namespacedType`,  all your
         * attachments on the given beacon will be deleted. You also may explicitly
         * specify `&#42;/&#42;` to delete all.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.batchDelete({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * Deletes the specified attachment for the given beacon. Each attachment has
         * a unique attachment name (`attachmentName`) which is returned when you
         * fetch the attachment data via this API. You specify this with the delete
         * request to control which attachment is removed. This operation cannot be
         * undone.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.delete({
            attachmentName: "Test string",
            projectId: "Test string",
        });
        /**
         * Returns the attachments for the specified beacon that match the specified
         * namespaced-type pattern.
         *
         * To control which namespaced types are returned, you add the
         * `namespacedType` query parameter to the request. You must either use
         * `&#42;/&#42;`, to return all attachments, or the namespace must be one of
         * the ones returned from the  `namespaces` endpoint.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.list({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * List the diagnostics for a single beacon. You can also list diagnostics for
         * all the beacons owned by your Google Developers Console project by using
         * the beacon name `beacons/-`.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.diagnostics.list({
            alertFilter: "Test string",
            beaconName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Returns detailed information about the specified beacon.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         *
         * Requests may supply an Eddystone-EID beacon name in the form:
         * `beacons/4!beaconId` where the `beaconId` is the base16 ephemeral ID
         * broadcast by the beacon. The returned `Beacon` object will contain the
         * beacon's stable Eddystone-UID. Clients not authorized to resolve the
         * beacon's ephemeral Eddystone-EID broadcast will receive an error.
         */
        await gapi.client.proximitybeacon.beacons.get({
            beaconName: "Test string",
            projectId: "Test string",
        });
        /**
         * Associates the given data with the specified beacon. Attachment data must
         * contain two parts:
         * <ul>
         * <li>A namespaced type.</li>
         * <li>The actual attachment data itself.</li>
         * </ul>
         * The namespaced type consists of two parts, the namespace and the type.
         * The namespace must be one of the values returned by the `namespaces`
         * endpoint, while the type can be a string of any characters except for the
         * forward slash (`/`) up to 100 characters in length.
         *
         * Attachment data can be up to 1024 bytes long.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.create({
            beaconName: "Test string",
            projectId: "Test string",
        }, {
            attachmentName: "Test string",
            creationTimeMs: "Test string",
            data: "Test string",
            maxDistanceMeters: 42,
            namespacedType: "Test string",
        });
        /**
         * Deletes multiple attachments on a given beacon. This operation is
         * permanent and cannot be undone.
         *
         * You can optionally specify `namespacedType` to choose which attachments
         * should be deleted. If you do not specify `namespacedType`,  all your
         * attachments on the given beacon will be deleted. You also may explicitly
         * specify `&#42;/&#42;` to delete all.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.batchDelete({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * Deletes the specified attachment for the given beacon. Each attachment has
         * a unique attachment name (`attachmentName`) which is returned when you
         * fetch the attachment data via this API. You specify this with the delete
         * request to control which attachment is removed. This operation cannot be
         * undone.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.delete({
            attachmentName: "Test string",
            projectId: "Test string",
        });
        /**
         * Returns the attachments for the specified beacon that match the specified
         * namespaced-type pattern.
         *
         * To control which namespaced types are returned, you add the
         * `namespacedType` query parameter to the request. You must either use
         * `&#42;/&#42;`, to return all attachments, or the namespace must be one of
         * the ones returned from the  `namespaces` endpoint.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.list({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * List the diagnostics for a single beacon. You can also list diagnostics for
         * all the beacons owned by your Google Developers Console project by using
         * the beacon name `beacons/-`.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.diagnostics.list({
            alertFilter: "Test string",
            beaconName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Searches the beacon registry for beacons that match the given search
         * criteria. Only those beacons that the client has permission to list
         * will be returned.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.list({
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
            q: "Test string",
        });
        /**
         * Associates the given data with the specified beacon. Attachment data must
         * contain two parts:
         * <ul>
         * <li>A namespaced type.</li>
         * <li>The actual attachment data itself.</li>
         * </ul>
         * The namespaced type consists of two parts, the namespace and the type.
         * The namespace must be one of the values returned by the `namespaces`
         * endpoint, while the type can be a string of any characters except for the
         * forward slash (`/`) up to 100 characters in length.
         *
         * Attachment data can be up to 1024 bytes long.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.create({
            beaconName: "Test string",
            projectId: "Test string",
        }, {
            attachmentName: "Test string",
            creationTimeMs: "Test string",
            data: "Test string",
            maxDistanceMeters: 42,
            namespacedType: "Test string",
        });
        /**
         * Deletes multiple attachments on a given beacon. This operation is
         * permanent and cannot be undone.
         *
         * You can optionally specify `namespacedType` to choose which attachments
         * should be deleted. If you do not specify `namespacedType`,  all your
         * attachments on the given beacon will be deleted. You also may explicitly
         * specify `&#42;/&#42;` to delete all.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.batchDelete({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * Deletes the specified attachment for the given beacon. Each attachment has
         * a unique attachment name (`attachmentName`) which is returned when you
         * fetch the attachment data via this API. You specify this with the delete
         * request to control which attachment is removed. This operation cannot be
         * undone.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.delete({
            attachmentName: "Test string",
            projectId: "Test string",
        });
        /**
         * Returns the attachments for the specified beacon that match the specified
         * namespaced-type pattern.
         *
         * To control which namespaced types are returned, you add the
         * `namespacedType` query parameter to the request. You must either use
         * `&#42;/&#42;`, to return all attachments, or the namespace must be one of
         * the ones returned from the  `namespaces` endpoint.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.list({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * List the diagnostics for a single beacon. You can also list diagnostics for
         * all the beacons owned by your Google Developers Console project by using
         * the beacon name `beacons/-`.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.diagnostics.list({
            alertFilter: "Test string",
            beaconName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Registers a previously unregistered beacon given its `advertisedId`.
         * These IDs are unique within the system. An ID can be registered only once.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.register({
            projectId: "Test string",
        }, {
            advertisedId: {
                id: "Test string",
                type: "Test string",
            },
            beaconName: "Test string",
            description: "Test string",
            ephemeralIdRegistration: {
                beaconEcdhPublicKey: "Test string",
                beaconIdentityKey: "Test string",
                initialClockValue: "Test string",
                initialEid: "Test string",
                rotationPeriodExponent: 42,
                serviceEcdhPublicKey: "Test string",
            },
            expectedStability: "Test string",
            indoorLevel: {
                name: "Test string",
            },
            latLng: {
                latitude: 42,
                longitude: 42,
            },
            placeId: "Test string",
            properties: {
                A: "Test string"            },
            provisioningKey: "Test string",
            status: "Test string",
        });
        /**
         * Associates the given data with the specified beacon. Attachment data must
         * contain two parts:
         * <ul>
         * <li>A namespaced type.</li>
         * <li>The actual attachment data itself.</li>
         * </ul>
         * The namespaced type consists of two parts, the namespace and the type.
         * The namespace must be one of the values returned by the `namespaces`
         * endpoint, while the type can be a string of any characters except for the
         * forward slash (`/`) up to 100 characters in length.
         *
         * Attachment data can be up to 1024 bytes long.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.create({
            beaconName: "Test string",
            projectId: "Test string",
        }, {
            attachmentName: "Test string",
            creationTimeMs: "Test string",
            data: "Test string",
            maxDistanceMeters: 42,
            namespacedType: "Test string",
        });
        /**
         * Deletes multiple attachments on a given beacon. This operation is
         * permanent and cannot be undone.
         *
         * You can optionally specify `namespacedType` to choose which attachments
         * should be deleted. If you do not specify `namespacedType`,  all your
         * attachments on the given beacon will be deleted. You also may explicitly
         * specify `&#42;/&#42;` to delete all.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.batchDelete({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * Deletes the specified attachment for the given beacon. Each attachment has
         * a unique attachment name (`attachmentName`) which is returned when you
         * fetch the attachment data via this API. You specify this with the delete
         * request to control which attachment is removed. This operation cannot be
         * undone.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.delete({
            attachmentName: "Test string",
            projectId: "Test string",
        });
        /**
         * Returns the attachments for the specified beacon that match the specified
         * namespaced-type pattern.
         *
         * To control which namespaced types are returned, you add the
         * `namespacedType` query parameter to the request. You must either use
         * `&#42;/&#42;`, to return all attachments, or the namespace must be one of
         * the ones returned from the  `namespaces` endpoint.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.list({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * List the diagnostics for a single beacon. You can also list diagnostics for
         * all the beacons owned by your Google Developers Console project by using
         * the beacon name `beacons/-`.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.diagnostics.list({
            alertFilter: "Test string",
            beaconName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Updates the information about the specified beacon. &#42;&#42;Any field that you do
         * not populate in the submitted beacon will be permanently erased&#42;&#42;, so you
         * should follow the "read, modify, write" pattern to avoid inadvertently
         * destroying data.
         *
         * Changes to the beacon status via this method will be  silently ignored.
         * To update beacon status, use the separate methods on this API for
         * activation, deactivation, and decommissioning.
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.update({
            beaconName: "Test string",
            projectId: "Test string",
        }, {
            advertisedId: {
                id: "Test string",
                type: "Test string",
            },
            beaconName: "Test string",
            description: "Test string",
            ephemeralIdRegistration: {
                beaconEcdhPublicKey: "Test string",
                beaconIdentityKey: "Test string",
                initialClockValue: "Test string",
                initialEid: "Test string",
                rotationPeriodExponent: 42,
                serviceEcdhPublicKey: "Test string",
            },
            expectedStability: "Test string",
            indoorLevel: {
                name: "Test string",
            },
            latLng: {
                latitude: 42,
                longitude: 42,
            },
            placeId: "Test string",
            properties: {
                A: "Test string"            },
            provisioningKey: "Test string",
            status: "Test string",
        });
        /**
         * Associates the given data with the specified beacon. Attachment data must
         * contain two parts:
         * <ul>
         * <li>A namespaced type.</li>
         * <li>The actual attachment data itself.</li>
         * </ul>
         * The namespaced type consists of two parts, the namespace and the type.
         * The namespace must be one of the values returned by the `namespaces`
         * endpoint, while the type can be a string of any characters except for the
         * forward slash (`/`) up to 100 characters in length.
         *
         * Attachment data can be up to 1024 bytes long.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.create({
            beaconName: "Test string",
            projectId: "Test string",
        }, {
            attachmentName: "Test string",
            creationTimeMs: "Test string",
            data: "Test string",
            maxDistanceMeters: 42,
            namespacedType: "Test string",
        });
        /**
         * Deletes multiple attachments on a given beacon. This operation is
         * permanent and cannot be undone.
         *
         * You can optionally specify `namespacedType` to choose which attachments
         * should be deleted. If you do not specify `namespacedType`,  all your
         * attachments on the given beacon will be deleted. You also may explicitly
         * specify `&#42;/&#42;` to delete all.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.batchDelete({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * Deletes the specified attachment for the given beacon. Each attachment has
         * a unique attachment name (`attachmentName`) which is returned when you
         * fetch the attachment data via this API. You specify this with the delete
         * request to control which attachment is removed. This operation cannot be
         * undone.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in the Google
         * Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.delete({
            attachmentName: "Test string",
            projectId: "Test string",
        });
        /**
         * Returns the attachments for the specified beacon that match the specified
         * namespaced-type pattern.
         *
         * To control which namespaced types are returned, you add the
         * `namespacedType` query parameter to the request. You must either use
         * `&#42;/&#42;`, to return all attachments, or the namespace must be one of
         * the ones returned from the  `namespaces` endpoint.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.attachments.list({
            beaconName: "Test string",
            namespacedType: "Test string",
            projectId: "Test string",
        });
        /**
         * List the diagnostics for a single beacon. You can also list diagnostics for
         * all the beacons owned by your Google Developers Console project by using
         * the beacon name `beacons/-`.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.beacons.diagnostics.list({
            alertFilter: "Test string",
            beaconName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Lists all attachment namespaces owned by your Google Developers Console
         * project. Attachment data associated with a beacon must include a
         * namespaced type, and the namespace must be owned by your project.
         *
         * Authenticate using an [OAuth access
         * token](https://developers.google.com/identity/protocols/OAuth2) from a
         * signed-in user with &#42;&#42;viewer&#42;&#42;, &#42;&#42;Is owner&#42;&#42; or &#42;&#42;Can edit&#42;&#42; permissions in
         * the Google Developers Console project.
         */
        await gapi.client.proximitybeacon.namespaces.list({
            projectId: "Test string",
        });
        /**
         * Updates the information about the specified namespace. Only the namespace
         * visibility can be updated.
         */
        await gapi.client.proximitybeacon.namespaces.update({
            namespaceName: "Test string",
            projectId: "Test string",
        }, {
            namespaceName: "Test string",
            servingVisibility: "Test string",
        });
        /**
         * Gets the Proximity Beacon API's current public key and associated
         * parameters used to initiate the Diffie-Hellman key exchange required to
         * register a beacon that broadcasts the Eddystone-EID format. This key
         * changes periodically; clients may cache it and re-use the same public key
         * to provision and register multiple beacons. However, clients should be
         * prepared to refresh this key when they encounter an error registering an
         * Eddystone-EID beacon.
         */
        await gapi.client.proximitybeacon.v1beta1.getEidparams({
        });
    }
});
