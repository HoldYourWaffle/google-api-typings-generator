// Type definitions for non-npm package IAM Service Account Credentials API v1 1.0
// Project: https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://iamcredentials.googleapis.com/$discovery/rest?version=v1
// Revision: 20200501

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load IAM Service Account Credentials API v1 */
    function load(name: "iamcredentials", version: "v1"): PromiseLike<void>;
    function load(name: "iamcredentials", version: "v1", callback: () => any): void;

    namespace iamcredentials {
        interface GenerateAccessTokenRequest {
            /**
             * The sequence of service accounts in a delegation chain. Each service
             * account must be granted the `roles/iam.serviceAccountTokenCreator` role
             * on its next service account in the chain. The last service account in the
             * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
             * on the service account that is specified in the `name` field of the
             * request.
             *
             * The delegates must have the following format:
             * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
             * character is required; replacing it with a project ID is invalid.
             */
            delegates?: string[];
            /**
             * The desired lifetime duration of the access token in seconds.
             * Must be set to a value less than or equal to 3600 (1 hour). If a value is
             * not specified, the token's lifetime will be set to a default value of one
             * hour.
             */
            lifetime?: string;
            /**
             * Required. Code to identify the scopes to be included in the OAuth 2.0 access token.
             * See https://developers.google.com/identity/protocols/googlescopes for more
             * information.
             * At least one value required.
             */
            scope?: string[];
        }
        interface GenerateAccessTokenResponse {
            /** The OAuth 2.0 access token. */
            accessToken?: string;
            /**
             * Token expiration time.
             * The expiration time is always set.
             */
            expireTime?: string;
        }
        interface GenerateIdTokenRequest {
            /**
             * Required. The audience for the token, such as the API or account that this token
             * grants access to.
             */
            audience?: string;
            /**
             * The sequence of service accounts in a delegation chain. Each service
             * account must be granted the `roles/iam.serviceAccountTokenCreator` role
             * on its next service account in the chain. The last service account in the
             * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
             * on the service account that is specified in the `name` field of the
             * request.
             *
             * The delegates must have the following format:
             * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
             * character is required; replacing it with a project ID is invalid.
             */
            delegates?: string[];
            /**
             * Include the service account email in the token. If set to `true`, the
             * token will contain `email` and `email_verified` claims.
             */
            includeEmail?: boolean;
        }
        interface GenerateIdTokenResponse {
            /** The OpenId Connect ID token. */
            token?: string;
        }
        interface SignBlobRequest {
            /**
             * The sequence of service accounts in a delegation chain. Each service
             * account must be granted the `roles/iam.serviceAccountTokenCreator` role
             * on its next service account in the chain. The last service account in the
             * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
             * on the service account that is specified in the `name` field of the
             * request.
             *
             * The delegates must have the following format:
             * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
             * character is required; replacing it with a project ID is invalid.
             */
            delegates?: string[];
            /** Required. The bytes to sign. */
            payload?: string;
        }
        interface SignBlobResponse {
            /** The ID of the key used to sign the blob. */
            keyId?: string;
            /** The signature for the blob. Does not include the original blob. */
            signedBlob?: string;
        }
        interface SignJwtRequest {
            /**
             * The sequence of service accounts in a delegation chain. Each service
             * account must be granted the `roles/iam.serviceAccountTokenCreator` role
             * on its next service account in the chain. The last service account in the
             * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
             * on the service account that is specified in the `name` field of the
             * request.
             *
             * The delegates must have the following format:
             * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
             * character is required; replacing it with a project ID is invalid.
             */
            delegates?: string[];
            /**
             * Required. The JWT payload to sign. Must be a serialized JSON object that contains a
             * JWT Claim Set. For example: `{"sub": "user@example.com", "iat": 313435}`
             *
             * If the claim set contains an `exp` claim, it must be an integer timestamp
             * that is not in the past and at most 12 hours in the future.
             */
            payload?: string;
        }
        interface SignJwtResponse {
            /** The ID of the key used to sign the JWT. */
            keyId?: string;
            /**
             * The signed JWT. Contains the automatically generated header; the
             * client-supplied payload; and the signature, which is generated using the
             * key referenced by the `kid` field in the header.
             */
            signedJwt?: string;
        }
        interface ServiceAccountsResource {
            /** Generates an OAuth 2.0 access token for a service account. */
            generateAccessToken(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The resource name of the service account for which the credentials
                 * are requested, in the following format:
                 * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
                 * character is required; replacing it with a project ID is invalid.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GenerateAccessTokenRequest;
            }): Request<GenerateAccessTokenResponse>;
            generateAccessToken(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The resource name of the service account for which the credentials
                 * are requested, in the following format:
                 * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
                 * character is required; replacing it with a project ID is invalid.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GenerateAccessTokenRequest): Request<GenerateAccessTokenResponse>;
            /** Generates an OpenID Connect ID token for a service account. */
            generateIdToken(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The resource name of the service account for which the credentials
                 * are requested, in the following format:
                 * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
                 * character is required; replacing it with a project ID is invalid.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GenerateIdTokenRequest;
            }): Request<GenerateIdTokenResponse>;
            generateIdToken(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The resource name of the service account for which the credentials
                 * are requested, in the following format:
                 * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
                 * character is required; replacing it with a project ID is invalid.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GenerateIdTokenRequest): Request<GenerateIdTokenResponse>;
            /** Signs a blob using a service account's system-managed private key. */
            signBlob(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The resource name of the service account for which the credentials
                 * are requested, in the following format:
                 * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
                 * character is required; replacing it with a project ID is invalid.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SignBlobRequest;
            }): Request<SignBlobResponse>;
            signBlob(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The resource name of the service account for which the credentials
                 * are requested, in the following format:
                 * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
                 * character is required; replacing it with a project ID is invalid.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SignBlobRequest): Request<SignBlobResponse>;
            /** Signs a JWT using a service account's system-managed private key. */
            signJwt(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The resource name of the service account for which the credentials
                 * are requested, in the following format:
                 * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
                 * character is required; replacing it with a project ID is invalid.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SignJwtRequest;
            }): Request<SignJwtResponse>;
            signJwt(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The resource name of the service account for which the credentials
                 * are requested, in the following format:
                 * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
                 * character is required; replacing it with a project ID is invalid.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SignJwtRequest): Request<SignJwtResponse>;
        }
        interface ProjectsResource {
            serviceAccounts: ServiceAccountsResource;
        }

        const projects: ProjectsResource;
    }
}
