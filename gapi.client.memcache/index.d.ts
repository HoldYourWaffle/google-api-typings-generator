// Type definitions for non-npm package Cloud Memorystore for Memcached API v1beta2 1.0
// Project: https://cloud.google.com/memorystore/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://memcache.googleapis.com/$discovery/rest?version=v1beta2
// Revision: 20200414

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Memorystore for Memcached API v1beta2 */
    function load(name: "memcache", version: "v1beta2"): PromiseLike<void>;
    function load(name: "memcache", version: "v1beta2", callback: () => any): void;

    namespace memcache {
        interface ApplyParametersRequest {
            /**
             * Whether to apply instance-level parameter group to all nodes. If set to
             * true, will explicitly restrict users from specifying any nodes, and apply
             * parameter group updates to all nodes within the instance.
             */
            applyAll?: boolean;
            /** Nodes to which we should apply the instance-level parameter group. */
            nodeIds?: string[];
        }
        interface AuditConfig {
            /** The configuration for logging of each type of permission. */
            auditLogConfigs?: AuditLogConfig[];
            /**
             * Specifies a service that will be enabled for audit logging.
             * For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
             * `allServices` is a special value that covers all services.
             */
            service?: string;
        }
        interface AuditLogConfig {
            /**
             * Specifies the identities that do not cause logging for this type of
             * permission.
             * Follows the same format of Binding.members.
             */
            exemptedMembers?: string[];
            /** The log type that this config enables. */
            logType?: string;
        }
        interface Binding {
            /**
             * The condition that is associated with this binding.
             * NOTE: An unsatisfied condition will not allow user access via current
             * binding. Different bindings, including their conditions, are examined
             * independently.
             */
            condition?: Expr;
            /**
             * Specifies the identities requesting access for a Cloud Platform resource.
             * `members` can have the following values:
             *
             * &#42; `allUsers`: A special identifier that represents anyone who is
             * on the internet; with or without a Google account.
             *
             * &#42; `allAuthenticatedUsers`: A special identifier that represents anyone
             * who is authenticated with a Google account or a service account.
             *
             * &#42; `user:{emailid}`: An email address that represents a specific Google
             * account. For example, `alice@example.com` .
             *
             *
             * &#42; `serviceAccount:{emailid}`: An email address that represents a service
             * account. For example, `my-other-app@appspot.gserviceaccount.com`.
             *
             * &#42; `group:{emailid}`: An email address that represents a Google group.
             * For example, `admins@example.com`.
             *
             * &#42; `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
             * identifier) representing a user that has been recently deleted. For
             * example, `alice@example.com?uid=123456789012345678901`. If the user is
             * recovered, this value reverts to `user:{emailid}` and the recovered user
             * retains the role in the binding.
             *
             * &#42; `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus
             * unique identifier) representing a service account that has been recently
             * deleted. For example,
             * `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
             * If the service account is undeleted, this value reverts to
             * `serviceAccount:{emailid}` and the undeleted service account retains the
             * role in the binding.
             *
             * &#42; `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
             * identifier) representing a Google group that has been recently
             * deleted. For example, `admins@example.com?uid=123456789012345678901`. If
             * the group is recovered, this value reverts to `group:{emailid}` and the
             * recovered group retains the role in the binding.
             *
             *
             * &#42; `domain:{domain}`: The G Suite domain (primary) that represents all the
             * users of that domain. For example, `google.com` or `example.com`.
             */
            members?: string[];
            /**
             * Role that is assigned to `members`.
             * For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
             */
            role?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelOperationRequest {
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface Expr {
            /**
             * Optional. Description of the expression. This is a longer text which
             * describes the expression, e.g. when hovered over it in a UI.
             */
            description?: string;
            /**
             * Textual representation of an expression in Common Expression Language
             * syntax.
             */
            expression?: string;
            /**
             * Optional. String indicating the location of the expression for error
             * reporting, e.g. a file name and a position in the file.
             */
            location?: string;
            /**
             * Optional. Title for the expression, i.e. a short string describing
             * its purpose. This can be used e.g. in UIs which allow to enter the
             * expression.
             */
            title?: string;
        }
        interface GoogleCloudMemcacheV1beta2LocationMetadata {
            /**
             * Output only. The set of available zones in the location. The map is keyed
             * by the lowercase ID of each zone, as defined by GCE. These keys can be
             * specified in the `zones` field when creating a Memcached instance.
             */
            availableZones?: Record<string, any>;
        }
        interface GoogleCloudMemcacheV1beta2OperationMetadata {
            /** Output only. API version used to start the operation. */
            apiVersion?: string;
            /**
             * Output only. Identifies whether the user has requested cancellation
             * of the operation. Operations that have successfully been cancelled
             * have Operation.error value with a google.rpc.Status.code of 1,
             * corresponding to `Code.CANCELLED`.
             */
            cancelRequested?: boolean;
            /** Output only. Time when the operation was created. */
            createTime?: string;
            /** Output only. Time when the operation finished running. */
            endTime?: string;
            /** Output only. Human-readable status of the operation, if any. */
            statusDetail?: string;
            /** Output only. Server-defined resource path for the target of the operation. */
            target?: string;
            /** Output only. Name of the verb executed by the operation. */
            verb?: string;
        }
        interface GoogleCloudSaasacceleratorManagementProvidersV1Instance {
            /**
             * consumer_defined_name is the name that is set by the consumer. On the other
             * hand Name field represents system-assigned id of an instance so consumers
             * are not necessarily aware of it.
             * consumer_defined_name is used for notification/UI purposes for consumer to
             * recognize their instances.
             */
            consumerDefinedName?: string;
            /** Output only. Timestamp when the resource was created. */
            createTime?: string;
            /**
             * Optional. Resource labels to represent user provided metadata. Each label
             * is a key-value pair, where both the key and the value are arbitrary strings
             * provided by the user.
             */
            labels?: Record<string, string>;
            /**
             * The MaintenancePolicies that have been attached to the instance.
             * The key must be of the type name of the oneof policy name defined in
             * MaintenancePolicy, and the referenced policy must define the same policy
             * type. For complete details of MaintenancePolicy, please refer to
             * go/cloud-saas-mw-ug.
             */
            maintenancePolicyNames?: Record<string, string>;
            /**
             * The MaintenanceSchedule contains the scheduling information of published
             * maintenance schedule.
             */
            maintenanceSchedules?: Record<string, GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule>;
            /**
             * Unique name of the resource. It uses the form:
             * `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
             */
            name?: string;
            /**
             * Output only. Custom string attributes used primarily to expose
             * producer-specific information in monitoring dashboards.
             * See go/get-instance-metadata.
             */
            producerMetadata?: Record<string, string>;
            /**
             * Output only. The list of data plane resources provisioned for this
             * instance, e.g. compute VMs. See go/get-instance-metadata.
             */
            provisionedResources?: GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource[];
            /**
             * Link to the SLM instance template. Only populated when updating SLM
             * instances via SSA's Actuation service adaptor.
             * Service producers with custom control plane (e.g. Cloud SQL) doesn't
             * need to populate this field. Instead they should use software_versions.
             */
            slmInstanceTemplate?: string;
            /**
             * Output only. SLO metadata for instance classification in the
             * Standardized dataplane SLO platform.
             * See go/cloud-ssa-standard-slo for feature description.
             */
            sloMetadata?: GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata;
            /**
             * Software versions that are used to deploy this instance. This can be
             * mutated by rollout services.
             */
            softwareVersions?: Record<string, string>;
            /**
             * Output only. Current lifecycle state of the resource (e.g. if it's being
             * created or ready to use).
             */
            state?: string;
            /**
             * Output only. ID of the associated GCP tenant project.
             * See go/get-instance-metadata.
             */
            tenantProjectId?: string;
            /** Output only. Timestamp when the resource was last modified. */
            updateTime?: string;
        }
        interface GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule {
            /**
             * Can this scheduled update be rescheduled?
             * By default, it's true and API needs to do explicitly check whether it's
             * set, if it's set as false explicitly, it's false
             */
            canReschedule?: boolean;
            /** The scheduled end time for the maintenance. */
            endTime?: string;
            /**
             * The rollout management policy this maintenance schedule is associated
             * with. When doing reschedule update request, the reschedule should be
             * against this given policy.
             */
            rolloutManagementPolicy?: string;
            /** The scheduled start time for the maintenance. */
            startTime?: string;
        }
        interface GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata {
            /**
             * By default node is eligible if instance is eligible.
             * But individual node might be excluded from SLO by adding entry here.
             * For semantic see SloMetadata.exclusions.
             * If both instance and node level exclusions are present for time period,
             * the node level's reason will be reported by Eligibility Exporter.
             */
            exclusions?: GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion[];
            /** The location of the node, if different from instance location. */
            location?: string;
            /**
             * The id of the node.
             * This should be equal to SaasInstanceNode.node_id.
             */
            nodeId?: string;
        }
        interface GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource {
            /**
             * Type of the resource. This can be either a GCP resource or a custom one
             * (e.g. another cloud provider's VM). For GCP compute resources use singular
             * form of the names listed in GCP compute API documentation
             * (https://cloud.google.com/compute/docs/reference/rest/v1/), prefixed with
             * 'compute-', for example: 'compute-instance', 'compute-disk',
             * 'compute-autoscaler'.
             */
            resourceType?: string;
            /**
             * URL identifying the resource, e.g.
             * "https://www.googleapis.com/compute/v1/projects/...)".
             */
            resourceUrl?: string;
        }
        interface GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility {
            /** Whether an instance is eligible or ineligible. */
            eligible?: boolean;
            /**
             * User-defined reason for the current value of instance eligibility. Usually,
             * this can be directly mapped to the internal state. An empty reason is
             * allowed.
             */
            reason?: string;
        }
        interface GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion {
            /**
             * Exclusion duration. No restrictions on the possible values.
             *
             * When an ongoing operation is taking longer than initially expected,
             * an existing entry in the exclusion list can be updated by extending the
             * duration. This is supported by the subsystem exporting eligibility data
             * as long as such extension is committed at least 10 minutes before the
             * original exclusion expiration - otherwise it is possible that there will
             * be "gaps" in the exclusion application in the exported timeseries.
             */
            duration?: string;
            /**
             * Human-readable reason for the exclusion.
             * This should be a static string (e.g. "Disruptive update in progress")
             * and should not contain dynamically generated data (e.g. instance name).
             * Can be left empty.
             */
            reason?: string;
            /**
             * Name of an SLI that this exclusion applies to. Can be left empty,
             * signaling that the instance should be excluded from all SLIs defined
             * in the service SLO configuration.
             */
            sliName?: string;
            /** Start time of the exclusion. No alignment (e.g. to a full minute) needed. */
            startTime?: string;
        }
        interface GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata {
            /** Optional. User-defined instance eligibility. */
            eligibility?: GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility;
            /**
             * List of SLO exclusion windows. When multiple entries in the list match
             * (matching the exclusion time-window against current time point)
             * the exclusion reason used in the first matching entry will be published.
             *
             * It is not needed to include expired exclusion in this list, as only the
             * currently applicable exclusions are taken into account by the eligibility
             * exporting subsystem (the historical state of exclusions will be reflected
             * in the historically produced timeseries regardless of the current state).
             *
             * This field can be used to mark the instance as temporary ineligible
             * for the purpose of SLO calculation. For permanent instance SLO exclusion,
             * use of custom instance eligibility is recommended. See 'eligibility' field
             * below.
             */
            exclusions?: GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion[];
            /**
             * Optional. List of nodes.
             * Some producers need to use per-node metadata to calculate SLO.
             * This field allows such producers to publish per-node SLO meta data,
             * which will be consumed by SSA Eligibility Exporter and published in the
             * form of per node metric to Monarch.
             */
            nodes?: GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata[];
            /**
             * Name of the SLO tier the Instance belongs to. This name will be expected to
             * match the tiers specified in the service SLO configuration.
             *
             * Field is mandatory and must not be empty.
             */
            tier?: string;
        }
        // tslint:disable-next-line:interface-name
        interface Instance {
            /**
             * Optional. The full name of the Google Compute Engine
             * [network](/compute/docs/networks-and-firewalls#networks) to which the
             * instance is connected. If left unspecified, the `default` network
             * will be used.
             */
            authorizedNetwork?: string;
            /** Output only. The time the instance was created. */
            createTime?: string;
            /** Output only. Endpoint for Discovery API */
            discoveryEndpoint?: string;
            /**
             * Optional. User provided name for the instance only used for display
             * purposes. Cannot be more than 80 characters.
             */
            displayName?: string;
            /** List of messages that describe current statuses of memcached instance. */
            instanceMessages?: InstanceMessage[];
            /**
             * Optional. Resource labels to represent user-provided metadata.
             * Refer to cloud documentation on labels for more details.
             * https://cloud.google.com/compute/docs/labeling-resources
             */
            labels?: Record<string, string>;
            /**
             * Output only. The full version of memcached server running on this instance.
             * System automatically determines the full memcached version for an instance
             * based on the input MemcacheVersion.
             * The full version format will be "memcached-1.5.16".
             */
            memcacheFullVersion?: string;
            /**
             * Output only. List of Memcached nodes.
             * Refer to [Node] message for more details.
             */
            memcacheNodes?: Node[];
            /**
             * Optional. The major version of Memcached software.
             * If not provided, latest supported version will be used. Currently the
             * latest supported major version is MEMCACHE_1_5.
             * The minor version will be automatically determined by our system based on
             * the latest supported minor version.
             */
            memcacheVersion?: string;
            /**
             * Required. Unique name of the resource in this scope including project and
             * location using the form:
             * `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
             *
             * Note: Memcached instances are managed and addressed at regional level so
             * location_id here refers to a GCP region; however, users may choose which
             * zones Memcached nodes within an instances should be provisioned in.
             * Refer to [zones] field for more details.
             */
            name?: string;
            /** Required. Configuration for Memcached nodes. */
            nodeConfig?: NodeConfig;
            /** Required. Number of nodes in the Memcached instance. */
            nodeCount?: number;
            /**
             * Optional: User defined parameters to apply to the memcached process
             * on each node.
             */
            parameters?: MemcacheParameters;
            /** Output only. The state of this Memcached instance. */
            state?: string;
            /** Output only. The time the instance was updated. */
            updateTime?: string;
            /**
             * Optional. Zones where Memcached nodes should be provisioned in.
             * Memcached nodes will be equally distributed across these zones. If not
             * provided, the service will by default create nodes in all zones in the
             * region for the instance.
             */
            zones?: string[];
        }
        // tslint:disable-next-line:interface-name
        interface InstanceMessage {
            /** A code that correspond to one type of user-facing message. */
            code?: string;
            /** Message on memcached instance which will be exposed to users. */
            message?: string;
        }
        interface ListInstancesResponse {
            /**
             * Token to retrieve the next page of results, or empty if there are no more
             * results in the list.
             */
            nextPageToken?: string;
            /**
             * A list of Memcached instances in the project in the specified location,
             * or across all locations.
             *
             * If the `location_id` in the parent field of the request is "-", all regions
             * available to the project are queried, and the results aggregated.
             */
            resources?: Instance[];
            /** Locations that could not be reached. */
            unreachable?: string[];
        }
        interface ListLocationsResponse {
            /** A list of locations that matches the specified filter in the request. */
            locations?: Location[];
            /** The standard List next-page token. */
            nextPageToken?: string;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?: string;
            /** A list of operations that matches the specified filter in the request. */
            operations?: Operation[];
        }
        interface Location {
            /**
             * The friendly name for this location, typically a nearby city name.
             * For example, "Tokyo".
             */
            displayName?: string;
            /**
             * Cross-service attributes for the location. For example
             *
             * {"cloud.googleapis.com/region": "us-east1"}
             */
            labels?: Record<string, string>;
            /** The canonical id for this location. For example: `"us-east1"`. */
            locationId?: string;
            /**
             * Service-specific metadata. For example the available capacity at the given
             * location.
             */
            metadata?: Record<string, any>;
            /**
             * Resource name for the location, which may vary between implementations.
             * For example: `"projects/example-project/locations/us-east1"`
             */
            name?: string;
        }
        interface MemcacheParameters {
            /**
             * Output only. The unique ID associated with this set of parameters. Users
             * can use this id to determine if the parameters associated with the instance
             * differ from the parameters associated with the nodes and any action needs
             * to be taken to apply parameters on nodes.
             */
            id?: string;
            /** User defined set of parameters to use in the memcached process. */
            params?: Record<string, string>;
        }
        interface Node {
            /**
             * Output only. Hostname or IP address of the Memcached node used by the
             * clients to connect to the Memcached server on this node.
             */
            host?: string;
            /**
             * Output only. Identifier of the Memcached node. The node id does not
             * include project or location like the Memcached instance name.
             */
            nodeId?: string;
            /** User defined parameters currently applied to the node. */
            parameters?: MemcacheParameters;
            /** Output only. The port number of the Memcached server on this node. */
            port?: number;
            /** Output only. Current state of the Memcached node. */
            state?: string;
            /** Output only. Location (GCP Zone) for the Memcached node. */
            zone?: string;
        }
        interface NodeConfig {
            /** Required. Number of cpus per Memcached node. */
            cpuCount?: number;
            /** Required. Memory size in MiB for each Memcached node. */
            memorySizeMb?: number;
        }
        interface Operation {
            /**
             * If the value is `false`, it means the operation is still in progress.
             * If `true`, the operation is completed, and either `error` or `response` is
             * available.
             */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation.  It typically
             * contains progress information and common metadata such as create time.
             * Some services might not provide such metadata.  Any method that returns a
             * long-running operation should document the metadata type, if any.
             */
            metadata?: Record<string, any>;
            /**
             * The server-assigned name, which is only unique within the same service that
             * originally returns it. If you use the default HTTP mapping, the
             * `name` should be a resource name ending with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success.  If the original
             * method returns no data on success, such as `Delete`, the response is
             * `google.protobuf.Empty`.  If the original method is standard
             * `Get`/`Create`/`Update`, the response should be the resource.  For other
             * methods, the response should have the type `XxxResponse`, where `Xxx`
             * is the original method name.  For example, if the original method name
             * is `TakeSnapshot()`, the inferred response type is
             * `TakeSnapshotResponse`.
             */
            response?: Record<string, any>;
        }
        interface Policy {
            /** Specifies cloud audit logging configuration for this policy. */
            auditConfigs?: AuditConfig[];
            /**
             * Associates a list of `members` to a `role`. Optionally, may specify a
             * `condition` that determines how and when the `bindings` are applied. Each
             * of the `bindings` must contain at least one member.
             */
            bindings?: Binding[];
            /**
             * `etag` is used for optimistic concurrency control as a way to help
             * prevent simultaneous updates of a policy from overwriting each other.
             * It is strongly suggested that systems make use of the `etag` in the
             * read-modify-write cycle to perform policy updates in order to avoid race
             * conditions: An `etag` is returned in the response to `getIamPolicy`, and
             * systems are expected to put that etag in the request to `setIamPolicy` to
             * ensure that their change will be applied to the same version of the policy.
             *
             * &#42;&#42;Important:&#42;&#42; If you use IAM Conditions, you must include the `etag` field
             * whenever you call `setIamPolicy`. If you omit this field, then IAM allows
             * you to overwrite a version `3` policy with a version `1` policy, and all of
             * the conditions in the version `3` policy are lost.
             */
            etag?: string;
            /**
             * Specifies the format of the policy.
             *
             * Valid values are `0`, `1`, and `3`. Requests that specify an invalid value
             * are rejected.
             *
             * Any operation that affects conditional role bindings must specify version
             * `3`. This requirement applies to the following operations:
             *
             * &#42; Getting a policy that includes a conditional role binding
             * &#42; Adding a conditional role binding to a policy
             * &#42; Changing a conditional role binding in a policy
             * &#42; Removing any role binding, with or without a condition, from a policy
             * that includes conditions
             *
             * &#42;&#42;Important:&#42;&#42; If you use IAM Conditions, you must include the `etag` field
             * whenever you call `setIamPolicy`. If you omit this field, then IAM allows
             * you to overwrite a version `3` policy with a version `1` policy, and all of
             * the conditions in the version `3` policy are lost.
             *
             * If a policy does not include any conditions, operations on that policy may
             * specify any valid version or leave the field unset.
             */
            version?: number;
        }
        interface SetIamPolicyRequest {
            /**
             * REQUIRED: The complete policy to be applied to the `resource`. The size of
             * the policy is limited to a few 10s of KB. An empty policy is a
             * valid policy but certain Cloud Platform services (such as Projects)
             * might reject them.
             */
            policy?: Policy;
            /**
             * OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
             * the fields in the mask will be modified. If no mask is provided, the
             * following default mask is used:
             * paths: "bindings, etag"
             * This field is only used by Cloud IAM.
             */
            updateMask?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /**
             * A list of messages that carry the error details.  There is a common set of
             * message types for APIs to use.
             */
            details?: Array<Record<string, any>>;
            /**
             * A developer-facing error message, which should be in English. Any
             * user-facing error message should be localized and sent in the
             * google.rpc.Status.details field, or localized by the client.
             */
            message?: string;
        }
        interface TestIamPermissionsRequest {
            /**
             * The set of permissions to check for the `resource`. Permissions with
             * wildcards (such as '&#42;' or 'storage.&#42;') are not allowed. For more
             * information see
             * [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
             */
            permissions?: string[];
        }
        interface TestIamPermissionsResponse {
            /**
             * A subset of `TestPermissionsRequest.permissions` that the caller is
             * allowed.
             */
            permissions?: string[];
        }
        interface UpdateParametersRequest {
            /** The parameters to apply to the instance. */
            parameters?: MemcacheParameters;
            /** Required. Mask of fields to update. */
            updateMask?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface ZoneMetadata {
        }
        // tslint:disable-next-line:interface-name
        interface InstancesResource {
            /**
             * ApplyParameters will update current set of Parameters to the set of
             * specified nodes of the Memcached Instance.
             */
            applyParameters(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. Resource name of the Memcached instance for which parameter group updates
                 * should be applied.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ApplyParametersRequest;
            }): Request<Operation>;
            applyParameters(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. Resource name of the Memcached instance for which parameter group updates
                 * should be applied.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ApplyParametersRequest): Request<Operation>;
            /** Creates a new Instance in a given project and location. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Required. The logical name of the Memcached instance in the user
                 * project with the following restrictions:
                 *
                 * &#42; Must contain only lowercase letters, numbers, and hyphens.
                 * &#42; Must start with a letter.
                 * &#42; Must be between 1-40 characters.
                 * &#42; Must end with a number or a letter.
                 * &#42; Must be unique within the user project / location
                 */
                instanceId?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The resource name of the instance location using the form:
                 * `projects/{project_id}/locations/{location_id}`
                 * where `location_id` refers to a GCP region
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Instance;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Required. The logical name of the Memcached instance in the user
                 * project with the following restrictions:
                 *
                 * &#42; Must contain only lowercase letters, numbers, and hyphens.
                 * &#42; Must start with a letter.
                 * &#42; Must be between 1-40 characters.
                 * &#42; Must end with a number or a letter.
                 * &#42; Must be unique within the user project / location
                 */
                instanceId?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The resource name of the instance location using the form:
                 * `projects/{project_id}/locations/{location_id}`
                 * where `location_id` refers to a GCP region
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Instance): Request<Operation>;
            /** Deletes a single Instance. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. Memcached instance resource name in the format:
                 * `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
                 * where `location_id` refers to a GCP region
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Gets details of a single Instance. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. Memcached instance resource name in the format:
                 * `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
                 * where `location_id` refers to a GCP region
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Instance>;
            /**
             * Gets the access control policy for a resource.
             * Returns an empty policy if the resource exists and does not have a policy
             * set.
             */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. The policy format version to be returned.
                 *
                 * Valid values are 0, 1, and 3. Requests specifying an invalid value will be
                 * rejected.
                 *
                 * Requests for policies with any conditional bindings must specify version 3.
                 * Policies without any conditional bindings may specify any valid value or
                 * leave the field unset.
                 */
                "options.requestedPolicyVersion"?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Policy>;
            /** Lists Instances in a given project and location. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * List filter. For example, exclude all Memcached instances with name as
                 * my-instance by specifying "name != my-instance".
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Sort results. Supported values are "name", "name desc" or "" (unsorted). */
                orderBy?: string;
                /**
                 * The maximum number of items to return.
                 *
                 * If not specified, a default value of 1000 will be used by the service.
                 * Regardless of the page_size value, the response may include a partial list
                 * and a caller should only rely on response's
                 * next_page_token
                 * to determine if there are more instances left to be queried.
                 */
                pageSize?: number;
                /**
                 * The next_page_token value returned from a previous List request,
                 * if any.
                 */
                pageToken?: string;
                /**
                 * Required. The resource name of the instance location using the form:
                 * `projects/{project_id}/locations/{location_id}`
                 * where `location_id` refers to a GCP region
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListInstancesResponse>;
            /** Updates an existing Instance in a given project and location. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. Unique name of the resource in this scope including project and
                 * location using the form:
                 * `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
                 *
                 * Note: Memcached instances are managed and addressed at regional level so
                 * location_id here refers to a GCP region; however, users may choose which
                 * zones Memcached nodes within an instances should be provisioned in.
                 * Refer to [zones] field for more details.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Required. Mask of fields to update.
                 * &#42;   `displayName`
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Instance;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. Unique name of the resource in this scope including project and
                 * location using the form:
                 * `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
                 *
                 * Note: Memcached instances are managed and addressed at regional level so
                 * location_id here refers to a GCP region; however, users may choose which
                 * zones Memcached nodes within an instances should be provisioned in.
                 * Refer to [zones] field for more details.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Required. Mask of fields to update.
                 * &#42;   `displayName`
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Instance): Request<Operation>;
            /**
             * Sets the access control policy on the specified resource. Replaces any
             * existing policy.
             *
             * Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being specified.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns permissions that a caller has on the specified resource.
             * If the resource does not exist, this will return an empty set of
             * permissions, not a NOT_FOUND error.
             *
             * Note: This operation is designed to be used for building permission-aware
             * UIs and command-line tools, not for authorization checking. This operation
             * may "fail open" without warning.
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            /**
             * Updates the defined Memcached Parameters for an existing Instance.
             * This method only stages the parameters, it must be followed by
             * ApplyParameters to apply the parameters to nodes of the Memcached Instance.
             */
            updateParameters(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. Resource name of the Memcached instance for which the parameters should be
                 * updated.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UpdateParametersRequest;
            }): Request<Operation>;
            updateParameters(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. Resource name of the Memcached instance for which the parameters should be
                 * updated.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UpdateParametersRequest): Request<Operation>;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation.  The server
             * makes a best effort to cancel the operation, but success is not
             * guaranteed.  If the server doesn't support this method, it returns
             * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
             * Operations.GetOperation or
             * other methods to check whether the cancellation succeeded or whether the
             * operation completed despite cancellation. On successful cancellation,
             * the operation is not deleted; instead, it becomes an operation with
             * an Operation.error value with a google.rpc.Status.code of 1,
             * corresponding to `Code.CANCELLED`.
             */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CancelOperationRequest;
            }): Request<{}>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CancelOperationRequest): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is
             * no longer interested in the operation result. It does not cancel the
             * operation. If the server doesn't support this method, it returns
             * `google.rpc.Code.UNIMPLEMENTED`.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be deleted. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * Gets the latest state of a long-running operation.  Clients can use this
             * method to poll the operation result at intervals as recommended by the API
             * service.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Lists operations that match the specified filter in the request. If the
             * server doesn't support this method, it returns `UNIMPLEMENTED`.
             *
             * NOTE: the `name` binding allows API services to override the binding
             * to use different resource name schemes, such as `users/&#42;/operations`. To
             * override the binding, API services can add a binding such as
             * `"/v1/{name=users/&#42;}/operations"` to their service configuration.
             * For backwards compatibility, the default name includes the operations
             * collection id, however overriding users must ensure the name binding
             * is the parent resource, without the operations collection id.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation's parent resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListOperationsResponse>;
        }
        interface LocationsResource {
            /** Gets information about a location. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Resource name for the location. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Location>;
            /** Lists information about the supported locations for this service. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource that owns the locations collection, if applicable. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListLocationsResponse>;
            instances: InstancesResource;
            operations: OperationsResource;
        }
        interface ProjectsResource {
            locations: LocationsResource;
        }

        const projects: ProjectsResource;
    }
}
