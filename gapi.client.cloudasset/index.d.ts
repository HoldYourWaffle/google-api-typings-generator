// Type definitions for non-npm package Cloud Asset API v1 1.0
// Project: https://cloud.google.com/asset-inventory/docs/quickstart
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://cloudasset.googleapis.com/$discovery/rest?version=v1

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Asset API v1 */
    function load(name: "cloudasset", version: "v1"): PromiseLike<void>;
    function load(name: "cloudasset", version: "v1", callback: () => any): void;

    namespace cloudasset {
        interface Asset {
            accessLevel?: GoogleIdentityAccesscontextmanagerV1AccessLevel;
            accessPolicy?: GoogleIdentityAccesscontextmanagerV1AccessPolicy;
            /**
             * Asset's ancestry path in Cloud Resource Manager (CRM) hierarchy,
             * represented as a list of relative resource names. Ancestry path starts with
             * the closest CRM ancestor and ends at root. If the asset is a CRM
             * project/folder/organization, this starts from the asset itself.
             *
             * Example: ["projects/123456789", "folders/5432", "organizations/1234"]
             */
            ancestors?: string[];
            /** Type of the asset. Example: "compute.googleapis.com/Disk". */
            assetType?: string;
            /**
             * Representation of the actual Cloud IAM policy set on a cloud resource. For
             * each resource, there must be at most one Cloud IAM policy set on it.
             */
            iamPolicy?: Policy;
            /**
             * The full name of the asset. For example:
             * `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
             * See [Resource
             * Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
             * for more information.
             */
            name?: string;
            /**
             * Representation of the Cloud Organization Policy set on an asset. For each
             * asset, there could be multiple Organization policies with different
             * constraints.
             */
            orgPolicy?: GoogleCloudOrgpolicyV1Policy[];
            /** Representation of the resource. */
            resource?: Resource;
            servicePerimeter?: GoogleIdentityAccesscontextmanagerV1ServicePerimeter;
        }
        interface AuditConfig {
            /** The configuration for logging of each type of permission. */
            auditLogConfigs?: AuditLogConfig[];
            /**
             * Specifies a service that will be enabled for audit logging.
             * For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
             * `allServices` is a special value that covers all services.
             */
            service?: string;
        }
        interface AuditLogConfig {
            /**
             * Specifies the identities that do not cause logging for this type of
             * permission.
             * Follows the same format of Binding.members.
             */
            exemptedMembers?: string[];
            /** The log type that this config enables. */
            logType?: string;
        }
        interface BatchGetAssetsHistoryResponse {
            /** A list of assets with valid time windows. */
            assets?: TemporalAsset[];
        }
        interface BigQueryDestination {
            /**
             * Required. The BigQuery dataset in format
             * "projects/projectId/datasets/datasetId", to which the snapshot result
             * should be exported. If this dataset does not exist, the export call returns
             * an error.
             */
            dataset?: string;
            /**
             * If the destination table already exists and this flag is `TRUE`, the
             * table will be overwritten by the contents of assets snapshot. If the flag
             * is not set and the destination table already exists, the export call
             * returns an error.
             */
            force?: boolean;
            /**
             * Required. The BigQuery table to which the snapshot result should be
             * written. If this table does not exist, a new table with the given name
             * will be created.
             */
            table?: string;
        }
        interface Binding {
            /**
             * The condition that is associated with this binding.
             * NOTE: An unsatisfied condition will not allow user access via current
             * binding. Different bindings, including their conditions, are examined
             * independently.
             */
            condition?: Expr;
            /**
             * Specifies the identities requesting access for a Cloud Platform resource.
             * `members` can have the following values:
             *
             * &#42; `allUsers`: A special identifier that represents anyone who is
             * on the internet; with or without a Google account.
             *
             * &#42; `allAuthenticatedUsers`: A special identifier that represents anyone
             * who is authenticated with a Google account or a service account.
             *
             * &#42; `user:{emailid}`: An email address that represents a specific Google
             * account. For example, `alice@example.com` .
             *
             *
             * &#42; `serviceAccount:{emailid}`: An email address that represents a service
             * account. For example, `my-other-app@appspot.gserviceaccount.com`.
             *
             * &#42; `group:{emailid}`: An email address that represents a Google group.
             * For example, `admins@example.com`.
             *
             * &#42; `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
             * identifier) representing a user that has been recently deleted. For
             * example, `alice@example.com?uid=123456789012345678901`. If the user is
             * recovered, this value reverts to `user:{emailid}` and the recovered user
             * retains the role in the binding.
             *
             * &#42; `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus
             * unique identifier) representing a service account that has been recently
             * deleted. For example,
             * `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
             * If the service account is undeleted, this value reverts to
             * `serviceAccount:{emailid}` and the undeleted service account retains the
             * role in the binding.
             *
             * &#42; `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
             * identifier) representing a Google group that has been recently
             * deleted. For example, `admins@example.com?uid=123456789012345678901`. If
             * the group is recovered, this value reverts to `group:{emailid}` and the
             * recovered group retains the role in the binding.
             *
             *
             * &#42; `domain:{domain}`: The G Suite domain (primary) that represents all the
             * users of that domain. For example, `google.com` or `example.com`.
             */
            members?: string[];
            /**
             * Role that is assigned to `members`.
             * For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
             */
            role?: string;
        }
        interface CreateFeedRequest {
            /**
             * Required. The feed details. The field `name` must be empty and it will be generated
             * in the format of:
             * projects/project_number/feeds/feed_id
             * folders/folder_number/feeds/feed_id
             * organizations/organization_number/feeds/feed_id
             */
            feed?: Feed;
            /**
             * Required. This is the client-assigned asset feed identifier and it needs to
             * be unique under a specific parent project/folder/organization.
             */
            feedId?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface ExportAssetsRequest {
            /**
             * A list of asset types of which to take a snapshot for. For example:
             * "compute.googleapis.com/Disk". If specified, only matching assets will be
             * returned. See [Introduction to Cloud Asset
             * Inventory](https://cloud.google.com/asset-inventory/docs/overview)
             * for all supported asset types.
             */
            assetTypes?: string[];
            /**
             * Asset content type. If not specified, no content but the asset name will be
             * returned.
             */
            contentType?: string;
            /**
             * Required. Output configuration indicating where the results will be output
             * to. All results will be in newline delimited JSON format.
             */
            outputConfig?: OutputConfig;
            /**
             * Timestamp to take an asset snapshot. This can only be set to a timestamp
             * between 2018-10-02 UTC (inclusive) and the current time. If not specified,
             * the current time will be used. Due to delays in resource data collection
             * and indexing, there is a volatile window during which running the same
             * query may get different results.
             */
            readTime?: string;
        }
        interface Expr {
            /**
             * Optional. Description of the expression. This is a longer text which
             * describes the expression, e.g. when hovered over it in a UI.
             */
            description?: string;
            /**
             * Textual representation of an expression in Common Expression Language
             * syntax.
             */
            expression?: string;
            /**
             * Optional. String indicating the location of the expression for error
             * reporting, e.g. a file name and a position in the file.
             */
            location?: string;
            /**
             * Optional. Title for the expression, i.e. a short string describing
             * its purpose. This can be used e.g. in UIs which allow to enter the
             * expression.
             */
            title?: string;
        }
        interface Feed {
            /**
             * A list of the full names of the assets to receive updates. You must specify
             * either or both of asset_names and asset_types. Only asset updates matching
             * specified asset_names and asset_types are exported to the feed. For
             * example:
             * `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
             * See [Resource
             * Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
             * for more info.
             */
            assetNames?: string[];
            /**
             * A list of types of the assets to receive updates. You must specify either
             * or both of asset_names and asset_types. Only asset updates matching
             * specified asset_names and asset_types are exported to the feed.
             * For example: `"compute.googleapis.com/Disk"`
             *
             * See [this
             * topic](https://cloud.google.com/asset-inventory/docs/supported-asset-types)
             * for a list of all supported asset types.
             */
            assetTypes?: string[];
            /**
             * Asset content type. If not specified, no content but the asset name and
             * type will be returned.
             */
            contentType?: string;
            /**
             * Required. Feed output configuration defining where the asset updates are
             * published to.
             */
            feedOutputConfig?: FeedOutputConfig;
            /**
             * Required. The format will be
             * projects/{project_number}/feeds/{client-assigned_feed_identifier} or
             * folders/{folder_number}/feeds/{client-assigned_feed_identifier} or
             * organizations/{organization_number}/feeds/{client-assigned_feed_identifier}
             *
             * The client-assigned feed identifier must be unique within the parent
             * project/folder/organization.
             */
            name?: string;
        }
        interface FeedOutputConfig {
            /** Destination on Cloud Pubsub. */
            pubsubDestination?: PubsubDestination;
        }
        interface GcsDestination {
            /**
             * The uri of the Cloud Storage object. It's the same uri that is used by
             * gsutil. For example: "gs://bucket_name/object_name". See [Viewing and
             * Editing Object
             * Metadata](https://cloud.google.com/storage/docs/viewing-editing-metadata)
             * for more information.
             */
            uri?: string;
            /**
             * The uri prefix of all generated Cloud Storage objects. For example:
             * "gs://bucket_name/object_name_prefix". Each object uri is in format:
             * "gs://bucket_name/object_name_prefix/<asset type>/<shard number> and only
             * contains assets for that type. <shard number> starts from 0. For example:
             * "gs://bucket_name/object_name_prefix/compute.googleapis.com/Disk/0" is
             * the first shard of output objects containing all
             * compute.googleapis.com/Disk assets. An INVALID_ARGUMENT error will be
             * returned if file with the same name "gs://bucket_name/object_name_prefix"
             * already exists.
             */
            uriPrefix?: string;
        }
        interface GoogleCloudOrgpolicyV1BooleanPolicy {
            /**
             * If `true`, then the `Policy` is enforced. If `false`, then any
             * configuration is acceptable.
             *
             * Suppose you have a `Constraint`
             * `constraints/compute.disableSerialPortAccess` with `constraint_default`
             * set to `ALLOW`. A `Policy` for that `Constraint` exhibits the following
             * behavior:
             * - If the `Policy` at this resource has enforced set to `false`, serial
             * port connection attempts will be allowed.
             * - If the `Policy` at this resource has enforced set to `true`, serial
             * port connection attempts will be refused.
             * - If the `Policy` at this resource is `RestoreDefault`, serial port
             * connection attempts will be allowed.
             * - If no `Policy` is set at this resource or anywhere higher in the
             * resource hierarchy, serial port connection attempts will be allowed.
             * - If no `Policy` is set at this resource, but one exists higher in the
             * resource hierarchy, the behavior is as if the`Policy` were set at
             * this resource.
             *
             * The following examples demonstrate the different possible layerings:
             *
             * Example 1 (nearest `Constraint` wins):
             * `organizations/foo` has a `Policy` with:
             * {enforced: false}
             * `projects/bar` has no `Policy` set.
             * The constraint at `projects/bar` and `organizations/foo` will not be
             * enforced.
             *
             * Example 2 (enforcement gets replaced):
             * `organizations/foo` has a `Policy` with:
             * {enforced: false}
             * `projects/bar` has a `Policy` with:
             * {enforced: true}
             * The constraint at `organizations/foo` is not enforced.
             * The constraint at `projects/bar` is enforced.
             *
             * Example 3 (RestoreDefault):
             * `organizations/foo` has a `Policy` with:
             * {enforced: true}
             * `projects/bar` has a `Policy` with:
             * {RestoreDefault: {}}
             * The constraint at `organizations/foo` is enforced.
             * The constraint at `projects/bar` is not enforced, because
             * `constraint_default` for the `Constraint` is `ALLOW`.
             */
            enforced?: boolean;
        }
        interface GoogleCloudOrgpolicyV1ListPolicy {
            /** The policy all_values state. */
            allValues?: string;
            /**
             * List of values allowed  at this resource. Can only be set if `all_values`
             * is set to `ALL_VALUES_UNSPECIFIED`.
             */
            allowedValues?: string[];
            /**
             * List of values denied at this resource. Can only be set if `all_values`
             * is set to `ALL_VALUES_UNSPECIFIED`.
             */
            deniedValues?: string[];
            /**
             * Determines the inheritance behavior for this `Policy`.
             *
             * By default, a `ListPolicy` set at a resource supercedes any `Policy` set
             * anywhere up the resource hierarchy. However, if `inherit_from_parent` is
             * set to `true`, then the values from the effective `Policy` of the parent
             * resource are inherited, meaning the values set in this `Policy` are
             * added to the values inherited up the hierarchy.
             *
             * Setting `Policy` hierarchies that inherit both allowed values and denied
             * values isn't recommended in most circumstances to keep the configuration
             * simple and understandable. However, it is possible to set a `Policy` with
             * `allowed_values` set that inherits a `Policy` with `denied_values` set.
             * In this case, the values that are allowed must be in `allowed_values` and
             * not present in `denied_values`.
             *
             * For example, suppose you have a `Constraint`
             * `constraints/serviceuser.services`, which has a `constraint_type` of
             * `list_constraint`, and with `constraint_default` set to `ALLOW`.
             * Suppose that at the Organization level, a `Policy` is applied that
             * restricts the allowed API activations to {`E1`, `E2`}. Then, if a
             * `Policy` is applied to a project below the Organization that has
             * `inherit_from_parent` set to `false` and field all_values set to DENY,
             * then an attempt to activate any API will be denied.
             *
             * The following examples demonstrate different possible layerings for
             * `projects/bar` parented by `organizations/foo`:
             *
             * Example 1 (no inherited values):
             * `organizations/foo` has a `Policy` with values:
             * {allowed_values: "E1" allowed_values:"E2"}
             * `projects/bar` has `inherit_from_parent` `false` and values:
             * {allowed_values: "E3" allowed_values: "E4"}
             * The accepted values at `organizations/foo` are `E1`, `E2`.
             * The accepted values at `projects/bar` are `E3`, and `E4`.
             *
             * Example 2 (inherited values):
             * `organizations/foo` has a `Policy` with values:
             * {allowed_values: "E1" allowed_values:"E2"}
             * `projects/bar` has a `Policy` with values:
             * {value: "E3" value: "E4" inherit_from_parent: true}
             * The accepted values at `organizations/foo` are `E1`, `E2`.
             * The accepted values at `projects/bar` are `E1`, `E2`, `E3`, and `E4`.
             *
             * Example 3 (inheriting both allowed and denied values):
             * `organizations/foo` has a `Policy` with values:
             * {allowed_values: "E1" allowed_values: "E2"}
             * `projects/bar` has a `Policy` with:
             * {denied_values: "E1"}
             * The accepted values at `organizations/foo` are `E1`, `E2`.
             * The value accepted at `projects/bar` is `E2`.
             *
             * Example 4 (RestoreDefault):
             * `organizations/foo` has a `Policy` with values:
             * {allowed_values: "E1" allowed_values:"E2"}
             * `projects/bar` has a `Policy` with values:
             * {RestoreDefault: {}}
             * The accepted values at `organizations/foo` are `E1`, `E2`.
             * The accepted values at `projects/bar` are either all or none depending on
             * the value of `constraint_default` (if `ALLOW`, all; if
             * `DENY`, none).
             *
             * Example 5 (no policy inherits parent policy):
             * `organizations/foo` has no `Policy` set.
             * `projects/bar` has no `Policy` set.
             * The accepted values at both levels are either all or none depending on
             * the value of `constraint_default` (if `ALLOW`, all; if
             * `DENY`, none).
             *
             * Example 6 (ListConstraint allowing all):
             * `organizations/foo` has a `Policy` with values:
             * {allowed_values: "E1" allowed_values: "E2"}
             * `projects/bar` has a `Policy` with:
             * {all: ALLOW}
             * The accepted values at `organizations/foo` are `E1`, E2`.
             * Any value is accepted at `projects/bar`.
             *
             * Example 7 (ListConstraint allowing none):
             * `organizations/foo` has a `Policy` with values:
             * {allowed_values: "E1" allowed_values: "E2"}
             * `projects/bar` has a `Policy` with:
             * {all: DENY}
             * The accepted values at `organizations/foo` are `E1`, E2`.
             * No value is accepted at `projects/bar`.
             *
             * Example 10 (allowed and denied subtrees of Resource Manager hierarchy):
             * Given the following resource hierarchy
             * O1->{F1, F2}; F1->{P1}; F2->{P2, P3},
             * `organizations/foo` has a `Policy` with values:
             * {allowed_values: "under:organizations/O1"}
             * `projects/bar` has a `Policy` with:
             * {allowed_values: "under:projects/P3"}
             * {denied_values: "under:folders/F2"}
             * The accepted values at `organizations/foo` are `organizations/O1`,
             * `folders/F1`, `folders/F2`, `projects/P1`, `projects/P2`,
             * `projects/P3`.
             * The accepted values at `projects/bar` are `organizations/O1`,
             * `folders/F1`, `projects/P1`.
             */
            inheritFromParent?: boolean;
            /**
             * Optional. The Google Cloud Console will try to default to a configuration
             * that matches the value specified in this `Policy`. If `suggested_value`
             * is not set, it will inherit the value specified higher in the hierarchy,
             * unless `inherit_from_parent` is `false`.
             */
            suggestedValue?: string;
        }
        interface GoogleCloudOrgpolicyV1Policy {
            /** For boolean `Constraints`, whether to enforce the `Constraint` or not. */
            booleanPolicy?: GoogleCloudOrgpolicyV1BooleanPolicy;
            /**
             * The name of the `Constraint` the `Policy` is configuring, for example,
             * `constraints/serviceuser.services`.
             *
             * Immutable after creation.
             */
            constraint?: string;
            /**
             * An opaque tag indicating the current version of the `Policy`, used for
             * concurrency control.
             *
             * When the `Policy` is returned from either a `GetPolicy` or a
             * `ListOrgPolicy` request, this `etag` indicates the version of the current
             * `Policy` to use when executing a read-modify-write loop.
             *
             * When the `Policy` is returned from a `GetEffectivePolicy` request, the
             * `etag` will be unset.
             *
             * When the `Policy` is used in a `SetOrgPolicy` method, use the `etag` value
             * that was returned from a `GetOrgPolicy` request as part of a
             * read-modify-write loop for concurrency control. Not setting the `etag`in a
             * `SetOrgPolicy` request will result in an unconditional write of the
             * `Policy`.
             */
            etag?: string;
            /** List of values either allowed or disallowed. */
            listPolicy?: GoogleCloudOrgpolicyV1ListPolicy;
            /**
             * Restores the default behavior of the constraint; independent of
             * `Constraint` type.
             */
            restoreDefault?: any;
            /**
             * The time stamp the `Policy` was previously updated. This is set by the
             * server, not specified by the caller, and represents the last time a call to
             * `SetOrgPolicy` was made for that `Policy`. Any value set by the client will
             * be ignored.
             */
            updateTime?: string;
            /** Version of the `Policy`. Default version is 0; */
            version?: number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface GoogleCloudOrgpolicyV1RestoreDefault {
        }
        interface GoogleIdentityAccesscontextmanagerV1AccessLevel {
            /** A `BasicLevel` composed of `Conditions`. */
            basic?: GoogleIdentityAccesscontextmanagerV1BasicLevel;
            /** Output only. Time the `AccessLevel` was created in UTC. */
            createTime?: string;
            /** A `CustomLevel` written in the Common Expression Language. */
            custom?: GoogleIdentityAccesscontextmanagerV1CustomLevel;
            /** Description of the `AccessLevel` and its use. Does not affect behavior. */
            description?: string;
            /**
             * Required. Resource name for the Access Level. The `short_name` component
             * must begin with a letter and only include alphanumeric and '_'. Format:
             * `accessPolicies/{policy_id}/accessLevels/{short_name}`
             */
            name?: string;
            /** Human readable title. Must be unique within the Policy. */
            title?: string;
            /** Output only. Time the `AccessLevel` was updated in UTC. */
            updateTime?: string;
        }
        interface GoogleIdentityAccesscontextmanagerV1AccessPolicy {
            /** Output only. Time the `AccessPolicy` was created in UTC. */
            createTime?: string;
            /**
             * Output only. Resource name of the `AccessPolicy`. Format:
             * `accessPolicies/{policy_id}`
             */
            name?: string;
            /**
             * Required. The parent of this `AccessPolicy` in the Cloud Resource
             * Hierarchy. Currently immutable once created. Format:
             * `organizations/{organization_id}`
             */
            parent?: string;
            /** Required. Human readable title. Does not affect behavior. */
            title?: string;
            /** Output only. Time the `AccessPolicy` was updated in UTC. */
            updateTime?: string;
        }
        interface GoogleIdentityAccesscontextmanagerV1BasicLevel {
            /**
             * How the `conditions` list should be combined to determine if a request is
             * granted this `AccessLevel`. If AND is used, each `Condition` in
             * `conditions` must be satisfied for the `AccessLevel` to be applied. If OR
             * is used, at least one `Condition` in `conditions` must be satisfied for the
             * `AccessLevel` to be applied. Default behavior is AND.
             */
            combiningFunction?: string;
            /** Required. A list of requirements for the `AccessLevel` to be granted. */
            conditions?: GoogleIdentityAccesscontextmanagerV1Condition[];
        }
        interface GoogleIdentityAccesscontextmanagerV1Condition {
            /**
             * Device specific restrictions, all restrictions must hold for the
             * Condition to be true. If not specified, all devices are allowed.
             */
            devicePolicy?: GoogleIdentityAccesscontextmanagerV1DevicePolicy;
            /**
             * CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for
             * a CIDR IP address block, the specified IP address portion must be properly
             * truncated (i.e. all the host bits must be zero) or the input is considered
             * malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is
             * not. Similarly, for IPv6, "2001:db8::/32" is accepted whereas
             * "2001:db8::1/32" is not. The originating IP of a request must be in one of
             * the listed subnets in order for this Condition to be true. If empty, all IP
             * addresses are allowed.
             */
            ipSubnetworks?: string[];
            /**
             * The request must be made by one of the provided user or service
             * accounts. Groups are not supported.
             * Syntax:
             * `user:{emailid}`
             * `serviceAccount:{emailid}`
             * If not specified, a request may come from any user.
             */
            members?: string[];
            /**
             * Whether to negate the Condition. If true, the Condition becomes a NAND over
             * its non-empty fields, each field must be false for the Condition overall to
             * be satisfied. Defaults to false.
             */
            negate?: boolean;
            /**
             * The request must originate from one of the provided countries/regions.
             * Must be valid ISO 3166-1 alpha-2 codes.
             */
            regions?: string[];
            /**
             * A list of other access levels defined in the same `Policy`, referenced by
             * resource name. Referencing an `AccessLevel` which does not exist is an
             * error. All access levels listed must be granted for the Condition
             * to be true. Example:
             * "`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME"`
             */
            requiredAccessLevels?: string[];
        }
        interface GoogleIdentityAccesscontextmanagerV1CustomLevel {
            /** Required. A Cloud CEL expression evaluating to a boolean. */
            expr?: Expr;
        }
        interface GoogleIdentityAccesscontextmanagerV1DevicePolicy {
            /**
             * Allowed device management levels, an empty list allows all management
             * levels.
             */
            allowedDeviceManagementLevels?: string[];
            /** Allowed encryptions statuses, an empty list allows all statuses. */
            allowedEncryptionStatuses?: string[];
            /** Allowed OS versions, an empty list allows all types and all versions. */
            osConstraints?: GoogleIdentityAccesscontextmanagerV1OsConstraint[];
            /** Whether the device needs to be approved by the customer admin. */
            requireAdminApproval?: boolean;
            /** Whether the device needs to be corp owned. */
            requireCorpOwned?: boolean;
            /**
             * Whether or not screenlock is required for the DevicePolicy to be true.
             * Defaults to `false`.
             */
            requireScreenlock?: boolean;
        }
        interface GoogleIdentityAccesscontextmanagerV1OsConstraint {
            /**
             * The minimum allowed OS version. If not set, any version of this OS
             * satisfies the constraint. Format: `"major.minor.patch"`.
             * Examples: `"10.5.301"`, `"9.2.1"`.
             */
            minimumVersion?: string;
            /** Required. The allowed OS type. */
            osType?: string;
            /**
             * Only allows requests from devices with a verified Chrome OS.
             * Verifications includes requirements that the device is enterprise-managed,
             * conformant to domain policies, and the caller has permission to call
             * the API targeted by the request.
             */
            requireVerifiedChromeOs?: boolean;
        }
        interface GoogleIdentityAccesscontextmanagerV1ServicePerimeter {
            /** Output only. Time the `ServicePerimeter` was created in UTC. */
            createTime?: string;
            /**
             * Description of the `ServicePerimeter` and its use. Does not affect
             * behavior.
             */
            description?: string;
            /**
             * Required. Resource name for the ServicePerimeter.  The `short_name`
             * component must begin with a letter and only include alphanumeric and '_'.
             * Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
             */
            name?: string;
            /**
             * Perimeter type indicator. A single project is
             * allowed to be a member of single regular perimeter, but multiple service
             * perimeter bridges. A project cannot be a included in a perimeter bridge
             * without being included in regular perimeter. For perimeter bridges,
             * the restricted service list as well as access level lists must be
             * empty.
             */
            perimeterType?: string;
            /**
             * Current ServicePerimeter configuration. Specifies sets of resources,
             * restricted services and access levels that determine perimeter
             * content and boundaries.
             */
            status?: GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig;
            /** Human readable title. Must be unique within the Policy. */
            title?: string;
            /** Output only. Time the `ServicePerimeter` was updated in UTC. */
            updateTime?: string;
        }
        interface GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig {
            /**
             * A list of `AccessLevel` resource names that allow resources within the
             * `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed
             * must be in the same policy as this `ServicePerimeter`. Referencing a
             * nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are
             * listed, resources within the perimeter can only be accessed via GCP calls
             * with request origins within the perimeter. Example:
             * `"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL"`.
             * For Service Perimeter Bridge, must be empty.
             */
            accessLevels?: string[];
            /**
             * A list of GCP resources that are inside of the service perimeter.
             * Currently only projects are allowed. Format: `projects/{project_number}`
             */
            resources?: string[];
            /**
             * GCP services that are subject to the Service Perimeter restrictions. For
             * example, if `storage.googleapis.com` is specified, access to the storage
             * buckets inside the perimeter must meet the perimeter's access restrictions.
             */
            restrictedServices?: string[];
        }
        interface ListFeedsResponse {
            /** A list of feeds. */
            feeds?: Feed[];
        }
        interface Operation {
            /**
             * If the value is `false`, it means the operation is still in progress.
             * If `true`, the operation is completed, and either `error` or `response` is
             * available.
             */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation.  It typically
             * contains progress information and common metadata such as create time.
             * Some services might not provide such metadata.  Any method that returns a
             * long-running operation should document the metadata type, if any.
             */
            metadata?: Record<string, any>;
            /**
             * The server-assigned name, which is only unique within the same service that
             * originally returns it. If you use the default HTTP mapping, the
             * `name` should be a resource name ending with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success.  If the original
             * method returns no data on success, such as `Delete`, the response is
             * `google.protobuf.Empty`.  If the original method is standard
             * `Get`/`Create`/`Update`, the response should be the resource.  For other
             * methods, the response should have the type `XxxResponse`, where `Xxx`
             * is the original method name.  For example, if the original method name
             * is `TakeSnapshot()`, the inferred response type is
             * `TakeSnapshotResponse`.
             */
            response?: Record<string, any>;
        }
        interface OutputConfig {
            /**
             * Destination on BigQuery. The output table stores the fields in asset
             * proto as columns in BigQuery. The resource/iam_policy field is converted
             * to a record with each field to a column, except metadata to a single JSON
             * string.
             */
            bigqueryDestination?: BigQueryDestination;
            /** Destination on Cloud Storage. */
            gcsDestination?: GcsDestination;
        }
        interface Policy {
            /** Specifies cloud audit logging configuration for this policy. */
            auditConfigs?: AuditConfig[];
            /**
             * Associates a list of `members` to a `role`. Optionally, may specify a
             * `condition` that determines how and when the `bindings` are applied. Each
             * of the `bindings` must contain at least one member.
             */
            bindings?: Binding[];
            /**
             * `etag` is used for optimistic concurrency control as a way to help
             * prevent simultaneous updates of a policy from overwriting each other.
             * It is strongly suggested that systems make use of the `etag` in the
             * read-modify-write cycle to perform policy updates in order to avoid race
             * conditions: An `etag` is returned in the response to `getIamPolicy`, and
             * systems are expected to put that etag in the request to `setIamPolicy` to
             * ensure that their change will be applied to the same version of the policy.
             *
             * &#42;&#42;Important:&#42;&#42; If you use IAM Conditions, you must include the `etag` field
             * whenever you call `setIamPolicy`. If you omit this field, then IAM allows
             * you to overwrite a version `3` policy with a version `1` policy, and all of
             * the conditions in the version `3` policy are lost.
             */
            etag?: string;
            /**
             * Specifies the format of the policy.
             *
             * Valid values are `0`, `1`, and `3`. Requests that specify an invalid value
             * are rejected.
             *
             * Any operation that affects conditional role bindings must specify version
             * `3`. This requirement applies to the following operations:
             *
             * &#42; Getting a policy that includes a conditional role binding
             * &#42; Adding a conditional role binding to a policy
             * &#42; Changing a conditional role binding in a policy
             * &#42; Removing any role binding, with or without a condition, from a policy
             * that includes conditions
             *
             * &#42;&#42;Important:&#42;&#42; If you use IAM Conditions, you must include the `etag` field
             * whenever you call `setIamPolicy`. If you omit this field, then IAM allows
             * you to overwrite a version `3` policy with a version `1` policy, and all of
             * the conditions in the version `3` policy are lost.
             *
             * If a policy does not include any conditions, operations on that policy may
             * specify any valid version or leave the field unset.
             */
            version?: number;
        }
        interface PubsubDestination {
            /**
             * The name of the Cloud Pub/Sub topic to publish to.
             * For example: `projects/PROJECT_ID/topics/TOPIC_ID`.
             */
            topic?: string;
        }
        interface Resource {
            /**
             * The content of the resource, in which some sensitive fields are scrubbed
             * away and may not be present.
             */
            data?: Record<string, any>;
            /**
             * The URL of the discovery document containing the resource's JSON schema.
             * For example:
             * `"https://www.googleapis.com/discovery/v1/apis/compute/v1/rest"`.
             * It will be left unspecified for resources without a discovery-based API,
             * such as Cloud Bigtable.
             */
            discoveryDocumentUri?: string;
            /**
             * The JSON schema name listed in the discovery document.
             * Example: "Project". It will be left unspecified for resources (such as
             * Cloud Bigtable) without a discovery-based API.
             */
            discoveryName?: string;
            /**
             * The full name of the immediate parent of this resource. See
             * [Resource
             * Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
             * for more information.
             *
             * For GCP assets, it is the parent resource defined in the [Cloud IAM policy
             * hierarchy](https://cloud.google.com/iam/docs/overview#policy_hierarchy).
             * For example:
             * `"//cloudresourcemanager.googleapis.com/projects/my_project_123"`.
             *
             * For third-party assets, it is up to the users to define.
             */
            parent?: string;
            /**
             * The REST URL for accessing the resource. An HTTP GET operation using this
             * URL returns the resource itself.
             * Example:
             * `https://cloudresourcemanager.googleapis.com/v1/projects/my-project-123`.
             * It will be left unspecified for resources without a REST API.
             */
            resourceUrl?: string;
            /** The API version. Example: "v1". */
            version?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /**
             * A list of messages that carry the error details.  There is a common set of
             * message types for APIs to use.
             */
            details?: Array<Record<string, any>>;
            /**
             * A developer-facing error message, which should be in English. Any
             * user-facing error message should be localized and sent in the
             * google.rpc.Status.details field, or localized by the client.
             */
            message?: string;
        }
        interface TemporalAsset {
            /** Asset. */
            asset?: Asset;
            /** If the asset is deleted or not. */
            deleted?: boolean;
            /** The time window when the asset data and state was observed. */
            window?: TimeWindow;
        }
        interface TimeWindow {
            /**
             * End time of the time window (inclusive).
             * Current timestamp if not specified.
             */
            endTime?: string;
            /** Start time of the time window (exclusive). */
            startTime?: string;
        }
        interface UpdateFeedRequest {
            /**
             * Required. The new values of feed details. It must match an existing feed and the
             * field `name` must be in the format of:
             * projects/project_number/feeds/feed_id or
             * folders/folder_number/feeds/feed_id or
             * organizations/organization_number/feeds/feed_id.
             */
            feed?: Feed;
            /**
             * Required. Only updates the `feed` fields indicated by this mask.
             * The field mask must not be empty, and it must not contain fields that
             * are immutable or only set by the server.
             */
            updateMask?: string;
        }
        interface FeedsResource {
            /**
             * Creates a feed in a parent project/folder/organization to listen to its
             * asset updates.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The name of the project/folder/organization where this feed
                 * should be created in. It can only be an organization number (such as
                 * "organizations/123"), a folder number (such as "folders/123"), a project ID
                 * (such as "projects/my-project-id")", or a project number (such as
                 * "projects/12345").
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Request body */
                resource: CreateFeedRequest;
            }): Request<Feed>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The name of the project/folder/organization where this feed
                 * should be created in. It can only be an organization number (such as
                 * "organizations/123"), a folder number (such as "folders/123"), a project ID
                 * (such as "projects/my-project-id")", or a project number (such as
                 * "projects/12345").
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            },
            body: CreateFeedRequest): Request<Feed>;
            /** Deletes an asset feed. */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The name of the feed and it must be in the format of:
                 * projects/project_number/feeds/feed_id
                 * folders/folder_number/feeds/feed_id
                 * organizations/organization_number/feeds/feed_id
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<{}>;
            /** Gets details about an asset feed. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The name of the Feed and it must be in the format of:
                 * projects/project_number/feeds/feed_id
                 * folders/folder_number/feeds/feed_id
                 * organizations/organization_number/feeds/feed_id
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Feed>;
            /** Lists all asset feeds in a parent project/folder/organization. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The parent project/folder/organization whose feeds are to be
                 * listed. It can only be using project/folder/organization number (such as
                 * "folders/12345")", or a project ID (such as "projects/my-project-id").
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<ListFeedsResponse>;
            /** Updates an asset feed configuration. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The format will be
                 * projects/{project_number}/feeds/{client-assigned_feed_identifier} or
                 * folders/{folder_number}/feeds/{client-assigned_feed_identifier} or
                 * organizations/{organization_number}/feeds/{client-assigned_feed_identifier}
                 *
                 * The client-assigned feed identifier must be unique within the parent
                 * project/folder/organization.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Request body */
                resource: UpdateFeedRequest;
            }): Request<Feed>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The format will be
                 * projects/{project_number}/feeds/{client-assigned_feed_identifier} or
                 * folders/{folder_number}/feeds/{client-assigned_feed_identifier} or
                 * organizations/{organization_number}/feeds/{client-assigned_feed_identifier}
                 *
                 * The client-assigned feed identifier must be unique within the parent
                 * project/folder/organization.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            },
            body: UpdateFeedRequest): Request<Feed>;
        }
        interface OperationsResource {
            /**
             * Gets the latest state of a long-running operation.  Clients can use this
             * method to poll the operation result at intervals as recommended by the API
             * service.
             */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Operation>;
        }
        interface V1Resource {
            /**
             * Batch gets the update history of assets that overlap a time window.
             * For RESOURCE content, this API outputs history with asset in both
             * non-delete or deleted status.
             * For IAM_POLICY content, this API outputs history when the asset and its
             * attached IAM POLICY both exist. This can create gaps in the output history.
             * If a specified asset does not exist, this API returns an INVALID_ARGUMENT
             * error.
             */
            batchGetAssetsHistory(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /**
                 * A list of the full names of the assets. For example:
                 * `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
                 * See [Resource
                 * Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
                 * and [Resource Name
                 * Format](https://cloud.google.com/asset-inventory/docs/resource-name-format)
                 * for more info.
                 *
                 * The request becomes a no-op if the asset name list is empty, and the max
                 * size of the asset name list is 100 in one request.
                 */
                assetNames?: string | string[];
                /** JSONP */
                callback?: string;
                /** Optional. The content type. */
                contentType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The relative name of the root asset. It can only be an
                 * organization number (such as "organizations/123"), a project ID (such as
                 * "projects/my-project-id")", or a project number (such as "projects/12345").
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * End time of the time window (inclusive).
                 * Current timestamp if not specified.
                 */
                "readTimeWindow.endTime"?: string;
                /** Start time of the time window (exclusive). */
                "readTimeWindow.startTime"?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<BatchGetAssetsHistoryResponse>;
            /**
             * Exports assets with time and resource types to a given Cloud Storage
             * location. The output format is newline-delimited JSON.
             * This API implements the google.longrunning.Operation API allowing you
             * to keep track of the export.
             */
            exportAssets(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The relative name of the root asset. This can only be an
                 * organization number (such as "organizations/123"), a project ID (such as
                 * "projects/my-project-id"), or a project number (such as "projects/12345"),
                 * or a folder number (such as "folders/123").
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Request body */
                resource: ExportAssetsRequest;
            }): Request<Operation>;
            exportAssets(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The relative name of the root asset. This can only be an
                 * organization number (such as "organizations/123"), a project ID (such as
                 * "projects/my-project-id"), or a project number (such as "projects/12345"),
                 * or a folder number (such as "folders/123").
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            },
            body: ExportAssetsRequest): Request<Operation>;
        }

        const feeds: FeedsResource;

        const operations: OperationsResource;

        const v1: V1Resource;
    }
}
