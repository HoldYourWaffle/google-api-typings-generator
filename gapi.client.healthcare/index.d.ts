// Type definitions for non-npm package Cloud Healthcare API v1beta1 1.0
// Project: https://cloud.google.com/healthcare
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://healthcare.googleapis.com/$discovery/rest?version=v1beta1

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Healthcare API v1beta1 */
    function load(name: "healthcare", version: "v1beta1"): PromiseLike<void>;
    function load(name: "healthcare", version: "v1beta1", callback: () => any): void;

    namespace healthcare {
        interface AuditConfig {
            /** The configuration for logging of each type of permission. */
            auditLogConfigs?: AuditLogConfig[];
            /**
             * Specifies a service that will be enabled for audit logging.
             * For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
             * `allServices` is a special value that covers all services.
             */
            service?: string;
        }
        interface AuditLogConfig {
            /**
             * Specifies the identities that do not cause logging for this type of
             * permission.
             * Follows the same format of Binding.members.
             */
            exemptedMembers?: string[];
            /** The log type that this config enables. */
            logType?: string;
        }
        interface Binding {
            /**
             * The condition that is associated with this binding.
             * NOTE: An unsatisfied condition will not allow user access via current
             * binding. Different bindings, including their conditions, are examined
             * independently.
             */
            condition?: Expr;
            /**
             * Specifies the identities requesting access for a Cloud Platform resource.
             * `members` can have the following values:
             *
             * &#42; `allUsers`: A special identifier that represents anyone who is
             * on the internet; with or without a Google account.
             *
             * &#42; `allAuthenticatedUsers`: A special identifier that represents anyone
             * who is authenticated with a Google account or a service account.
             *
             * &#42; `user:{emailid}`: An email address that represents a specific Google
             * account. For example, `alice@example.com` .
             *
             *
             * &#42; `serviceAccount:{emailid}`: An email address that represents a service
             * account. For example, `my-other-app@appspot.gserviceaccount.com`.
             *
             * &#42; `group:{emailid}`: An email address that represents a Google group.
             * For example, `admins@example.com`.
             *
             * &#42; `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
             * identifier) representing a user that has been recently deleted. For
             * example, `alice@example.com?uid=123456789012345678901`. If the user is
             * recovered, this value reverts to `user:{emailid}` and the recovered user
             * retains the role in the binding.
             *
             * &#42; `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus
             * unique identifier) representing a service account that has been recently
             * deleted. For example,
             * `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
             * If the service account is undeleted, this value reverts to
             * `serviceAccount:{emailid}` and the undeleted service account retains the
             * role in the binding.
             *
             * &#42; `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
             * identifier) representing a Google group that has been recently
             * deleted. For example, `admins@example.com?uid=123456789012345678901`. If
             * the group is recovered, this value reverts to `group:{emailid}` and the
             * recovered group retains the role in the binding.
             *
             *
             * &#42; `domain:{domain}`: The G Suite domain (primary) that represents all the
             * users of that domain. For example, `google.com` or `example.com`.
             */
            members?: string[];
            /**
             * Role that is assigned to `members`.
             * For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
             */
            role?: string;
        }
        interface CharacterMaskConfig {
            /** Character to mask the sensitive values. If not supplied, defaults to "&#42;". */
            maskingCharacter?: string;
        }
        interface CreateMessageRequest {
            /** HL7v2 message. */
            message?: Message;
        }
        interface CryptoHashConfig {
            /**
             * An AES 128/192/256 bit key. Causes the hash to be computed based on this
             * key. A default key is generated for each Deidentify operation and is used
             * wherever crypto_key is not specified.
             */
            cryptoKey?: string;
        }
        interface Dataset {
            /**
             * Output only. Resource name of the dataset, of the form
             * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
             */
            name?: string;
            /**
             * The default timezone used by this dataset. Must be a either a valid IANA
             * time zone name such as "America/New_York" or empty, which defaults to UTC.
             * This is used for parsing times in resources, such as HL7 messages, where no
             * explicit timezone is specified.
             */
            timeZone?: string;
        }
        interface DateShiftConfig {
            /**
             * An AES 128/192/256 bit key. Causes the shift to be computed based on this
             * key and the patient ID. A default key is generated for each
             * Deidentify operation and is used wherever crypto_key is not specified.
             */
            cryptoKey?: string;
        }
        interface DeidentifyConfig {
            /** Configures de-id of application/DICOM content. */
            dicom?: DicomConfig;
            /** Configures de-id of application/FHIR content. */
            fhir?: FhirConfig;
            /**
             * Configures de-identification of image pixels wherever they are found in the
             * source_dataset.
             */
            image?: ImageConfig;
            /**
             * Configures de-identification of text wherever it is found in the
             * source_dataset.
             */
            text?: TextConfig;
        }
        interface DeidentifyDatasetRequest {
            /** Deidentify configuration. */
            config?: DeidentifyConfig;
            /**
             * The name of the dataset resource to create and write the redacted data to.
             *
             * &#42; The destination dataset must not exist.
             * &#42; The destination dataset must be in the same project and location as the
             * source dataset. De-identifying data across multiple projects or locations
             * is not supported.
             */
            destinationDataset?: string;
        }
        interface DeidentifyDicomStoreRequest {
            /** De-identify configuration. */
            config?: DeidentifyConfig;
            /**
             * The name of the DICOM store to create and write the redacted data to.
             * For example,
             * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
             *
             * &#42; The destination dataset must exist.
             * &#42; The source dataset and destination dataset must both reside in the same
             * project. De-identifying data across multiple projects is not supported.
             * &#42; The destination DICOM store must not exist.
             * &#42; The caller must have the necessary permissions to create the destination
             * DICOM store.
             */
            destinationStore?: string;
            /** Filter configuration. */
            filterConfig?: DicomFilterConfig;
        }
        interface DeidentifyErrorDetails {
            /** Number of resources that failed to process. */
            failureResourceCount?: string;
            /** Number of stores that failed to process. */
            failureStoreCount?: string;
            /** Number of resources successfully processed. */
            successResourceCount?: string;
            /** Number of stores successfully processed. */
            successStoreCount?: string;
        }
        interface DeidentifyFhirStoreRequest {
            /** Deidentify configuration. */
            config?: DeidentifyConfig;
            /**
             * The name of the FHIR store to create and write the redacted data to.
             * For example,
             * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
             *
             * &#42; The destination dataset must exist.
             * &#42; The source dataset and destination dataset must both reside in the same
             * project. De-identifying data across multiple projects is not supported.
             * &#42; The destination FHIR store must not exist.
             * &#42; The caller must have the necessary permissions to create the destination
             * FHIR store.
             */
            destinationStore?: string;
            /**
             * A filter specifying the resources to include in the output. If not
             * specified, all resources are included in the output.
             */
            resourceFilter?: FhirFilter;
        }
        interface DeidentifySummary {
            /**
             * Number of resources that failed to process.
             * The failures might be caused by:
             *
             * &#42; Invalid user input data
             * &#42; Transient errors that could be skipped
             */
            failureResourceCount?: string;
            /** Number of resources successfully processed. */
            successResourceCount?: string;
            /** Number of stores successfully processed. */
            successStoreCount?: string;
        }
        interface DicomConfig {
            /** Tag filtering profile that determines which tags to keep/remove. */
            filterProfile?: string;
            /** List of tags to keep. Remove all other tags. */
            keepList?: TagFilterList;
            /** List of tags to remove. Keep all other tags. */
            removeList?: TagFilterList;
            /**
             * If true, skip replacing StudyInstanceUID, SeriesInstanceUID,
             * SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched.
             * The Cloud Healthcare API regenerates these UIDs by default based on the
             * DICOM Standard's reasoning: "Whilst these UIDs cannot be mapped directly
             * to an individual out of context, given access to the original images, or
             * to a database of the original images containing the UIDs, it would be
             * possible to recover the individual's identity."
             * http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
             */
            skipIdRedaction?: boolean;
        }
        interface DicomFilterConfig {
            /**
             * The Cloud Storage location of the filter configuration file.
             * The `gcs_uri` must be in the format `gs://bucket/path/to/object`.
             * The filter configuration file must contain a list of resource paths
             * separated by newline characters (\n or \r\n). Each resource path
             * must be in the format
             * "/studies/{studyUID}[/series/{seriesUID}[/instances/{instanceUID}]]"
             *
             * The Cloud Healthcare API service account must have the
             * `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage
             * location.
             */
            resourcePathsGcsUri?: string;
        }
        interface DicomStore {
            /**
             * User-supplied key-value pairs used to organize DICOM stores.
             *
             * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding
             * of maximum 128 bytes, and must conform to the
             * following PCRE regular expression:
             * \p{Ll}\p{Lo}{0,62}
             *
             * Label values are optional, must be between 1 and 63 characters long, have
             * a UTF-8 encoding of maximum 128 bytes, and must conform to the
             * following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
             *
             * No more than 64 labels can be associated with a given store.
             */
            labels?: Record<string, string>;
            /**
             * Output only. Resource name of the DICOM store, of the form
             * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
             */
            name?: string;
            /**
             * Notification destination for new DICOM instances.
             * Supplied by the client.
             */
            notificationConfig?: NotificationConfig;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface ErrorDetail {
            /** The status of the error. */
            error?: Status;
            /** The identifier of the resource. */
            resource?: string;
        }
        interface ExportDicomDataRequest {
            /**
             * The BigQuery output destination.
             *
             * You can only export to a BigQuery dataset that's in the same project as
             * the DICOM store you're exporting from.
             *
             * The BigQuery location requires two IAM roles:
             * `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`.
             */
            bigqueryDestination?: GoogleCloudHealthcareV1beta1DicomBigQueryDestination;
            /**
             * The Cloud Storage output destination.
             *
             * The Cloud Storage location requires the `roles/storage.objectAdmin` Cloud
             * IAM role.
             */
            gcsDestination?: GoogleCloudHealthcareV1beta1DicomGcsDestination;
        }
        interface ExportResourcesRequest {
            /**
             * The BigQuery output destination.
             *
             * The BigQuery location requires two IAM roles:
             * `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`.
             *
             * The output will be one BigQuery table per resource type.
             */
            bigqueryDestination?: GoogleCloudHealthcareV1beta1FhirBigQueryDestination;
            /**
             * The Cloud Storage output destination.
             *
             * The Cloud Storage location requires the `roles/storage.objectAdmin` Cloud
             * IAM role.
             *
             * The exported outputs are
             * organized by FHIR resource types. The server will create one object per
             * resource type. Each object contains newline delimited JSON, and each line
             * is a FHIR resource.
             */
            gcsDestination?: GoogleCloudHealthcareV1beta1FhirRestGcsDestination;
        }
        interface Expr {
            /**
             * Optional. Description of the expression. This is a longer text which
             * describes the expression, e.g. when hovered over it in a UI.
             */
            description?: string;
            /**
             * Textual representation of an expression in Common Expression Language
             * syntax.
             */
            expression?: string;
            /**
             * Optional. String indicating the location of the expression for error
             * reporting, e.g. a file name and a position in the file.
             */
            location?: string;
            /**
             * Optional. Title for the expression, i.e. a short string describing
             * its purpose. This can be used e.g. in UIs which allow to enter the
             * expression.
             */
            title?: string;
        }
        interface FhirConfig {
            /**
             * Specifies FHIR paths to match and how to transform them. Any field that
             * is not matched by a FieldMetadata is passed through to the output
             * dataset unmodified. All extensions are removed in the output.
             * If a field can be matched by more than one FieldMetadata, the first
             * FieldMetadata.Action is applied.
             */
            fieldMetadataList?: FieldMetadata[];
        }
        interface FhirFilter {
            /**
             * List of resources to include in the output. If this list is empty or
             * not specified, all resources are included in the output.
             */
            resources?: Resources;
        }
        interface FhirStore {
            /**
             * Whether to disable referential integrity in this FHIR store. This field is
             * immutable after FHIR store creation.
             * The default value is false, meaning that the API enforces referential
             * integrity and fails the requests that result in inconsistent state in
             * the FHIR store.
             * When this field is set to true, the API skips referential integrity
             * checks. Consequently, operations that rely on references, such as
             * GetPatientEverything, do not return all the results if broken references
             * exist.
             */
            disableReferentialIntegrity?: boolean;
            /**
             * Whether to disable resource versioning for this FHIR store. This field can
             * not be changed after the creation of FHIR store.
             * If set to false, which is the default behavior, all write operations
             * cause historical versions to be recorded automatically. The historical
             * versions can be fetched through the history APIs, but cannot be updated.
             * If set to true, no historical versions are kept. The server sends
             * errors for attempts to read the historical versions.
             */
            disableResourceVersioning?: boolean;
            /**
             * Whether this FHIR store has the [updateCreate
             * capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate).
             * This determines if the client can use an Update operation to create a new
             * resource with a client-specified ID. If false, all IDs are server-assigned
             * through the Create operation and attempts to update a non-existent resource
             * return errors. Please treat the audit logs with appropriate levels of
             * care if client-specified resource IDs contain sensitive data such as
             * patient identifiers, those IDs are part of the FHIR resource path
             * recorded in Cloud audit logs and Cloud Pub/Sub notifications.
             */
            enableUpdateCreate?: boolean;
            /**
             * User-supplied key-value pairs used to organize FHIR stores.
             *
             * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding
             * of maximum 128 bytes, and must conform to the
             * following PCRE regular expression:
             * \p{Ll}\p{Lo}{0,62}
             *
             * Label values are optional, must be between 1 and 63 characters long, have
             * a UTF-8 encoding of maximum 128 bytes, and must conform to the
             * following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
             *
             * No more than 64 labels can be associated with a given store.
             */
            labels?: Record<string, string>;
            /**
             * Output only. Resource name of the FHIR store, of the form
             * `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
             */
            name?: string;
            /**
             * If non-empty, publish all resource modifications of this FHIR store to
             * this destination. The Cloud Pub/Sub message attributes contain a map
             * with a string describing the action that has triggered the notification.
             * For example, "action":"CreateResource".
             */
            notificationConfig?: NotificationConfig;
            /**
             * The FHIR specification version that this FHIR store supports natively. This
             * field is immutable after store creation. Requests are rejected if they
             * contain FHIR resources of a different version.
             * An empty value is treated as STU3.
             */
            version?: string;
        }
        interface FieldMetadata {
            /** Deidentify action for one field. */
            action?: string;
            /**
             * List of paths to FHIR fields to redact. Each path is a
             * period-separated list where each component is either a field name or
             * FHIR type name. All types begin with an upper case letter. For example,
             * the resource field "Patient.Address.city", which uses a string type,
             * can be matched by "Patient.Address.String". Path also supports partial
             * matching. For example, "Patient.Address.city" can be matched by
             * "Address.city" (Patient omitted). Partial matching and type matching
             * can be combined, for example "Patient.Address.city" can be matched by
             * "Address.String". For "choice" types (those defined in the FHIR spec
             * with the form: field[x]), use two separate components. For example,
             * "deceasedAge.unit" is matched by "Deceased.Age.unit". Supported types
             * are: AdministrativeGenderCode, Code, Date, DateTime, Decimal,
             * HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml.
             * The sub-type for HumanName(for example HumanName.given,
             * HumanName.family) can be omitted.
             */
            paths?: string[];
        }
        interface GoogleCloudHealthcareV1beta1DeidentifyDeidentifyDicomStoreSummary {
            /** Number of objects that processing failed for. */
            failureResourceCount?: string;
            /** Number of objects successfully processed. */
            successResourceCount?: string;
        }
        interface GoogleCloudHealthcareV1beta1DeidentifyDeidentifyFhirStoreSummary {
            /** Number of resources successfully processed. */
            successResourceCount?: string;
        }
        interface GoogleCloudHealthcareV1beta1DicomBigQueryDestination {
            /**
             * If the destination table already exists and this flag is `TRUE`, the table
             * is overwritten by the contents of the DICOM store. If the flag is not
             * set and the destination table already exists, the export call returns an
             * error.
             */
            force?: boolean;
            /**
             * BigQuery URI to a table, up to 2000 characters long, in the format
             * `bq://projectId.bqDatasetId.tableId`
             */
            tableUri?: string;
        }
        interface GoogleCloudHealthcareV1beta1DicomGcsDestination {
            /**
             * MIME types supported by DICOM spec.
             * Each file is written in the following format:
             * `.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}`
             * The frame_number component exists only for multi-frame instances.
             *
             * Refer to the DICOM conformance statement for permissible MIME types:
             * https://cloud.google.com/healthcare/docs/dicom#retrieve_transaction
             *
             * The following extensions are used for output files:
             * application/dicom -> .dcm
             * image/jpeg -> .jpg
             * image/png -> .png
             *
             * If unspecified, the instances are exported in their original
             * DICOM format.
             */
            mimeType?: string;
            /**
             * The Cloud Storage destination to export to.
             *
             * URI for a Cloud Storage directory where the server writes the result files,
             * in the format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no
             * trailing slash, the service appends one when composing the object path.
             * The user is responsible for creating the Cloud Storage bucket referenced in
             * `uri_prefix`.
             */
            uriPrefix?: string;
        }
        interface GoogleCloudHealthcareV1beta1DicomGcsSource {
            /**
             * Points to a Cloud Storage URI containing file(s) with
             * content only. The URI must be in the following format:
             * `gs://{bucket_id}/{object_id}`. The URI can include wildcards in
             * `object_id` and thus identify multiple files. Supported wildcards:
             * '&#42;' to match 0 or more non-separator characters
             * '&#42;&#42;' to match 0 or more characters (including separators). Must be used at
             * the end of a path and with no other wildcards in the
             * path. Can also be used with a file extension (such as .dcm), which
             * imports all files with the extension in the specified directory and
             * its sub-directories. For example,
             * `gs://my-bucket/my-directory/&#42;&#42;.dcm` imports all files with .dcm
             * extensions in `my-directory/` and its sub-directories.
             * '?' to match 1 character
             * All other URI formats are invalid.
             * Files matching the wildcard are expected to contain content only, no
             * metadata.
             */
            uri?: string;
        }
        interface GoogleCloudHealthcareV1beta1FhirBigQueryDestination {
            /**
             * BigQuery URI to a dataset, up to 2000 characters long, in the format
             * `bq://projectId.bqDatasetId`
             */
            datasetUri?: string;
            /**
             * If this flag is `TRUE`, all tables will be deleted from the dataset before
             * the new exported tables are written. If the flag is not set and the
             * destination dataset contains tables, the export call returns an error.
             */
            force?: boolean;
            /** The configuration for the exported BigQuery schema. */
            schemaConfig?: SchemaConfig;
        }
        interface GoogleCloudHealthcareV1beta1FhirRestExportResourcesErrorDetails {
            /** The number of resources that had errors. */
            errorCount?: string;
            /**
             * The name of the FHIR store where resources have been exported, in the
             * format
             * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
             */
            fhirStore?: string;
            /**
             * The total number of resources included in the export operation. This is
             * the sum of the success and error counts.
             */
            resourceCount?: string;
            /** The number of resources that were exported. */
            successCount?: string;
        }
        interface GoogleCloudHealthcareV1beta1FhirRestExportResourcesResponse {
            /**
             * The name of the FHIR store where resources have been exported, in the
             * format
             * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
             */
            fhirStore?: string;
            /** The total number of resources exported from the requested FHIR store. */
            resourceCount?: string;
        }
        interface GoogleCloudHealthcareV1beta1FhirRestGcsDestination {
            /**
             * URI for a Cloud Storage directory where result files should be written (in
             * the format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no
             * trailing slash, the service will append one when composing the object path.
             * The user is responsible for creating the Cloud Storage bucket referenced in
             * `uri_prefix`.
             */
            uriPrefix?: string;
        }
        interface GoogleCloudHealthcareV1beta1FhirRestGcsSource {
            /**
             * Points to a Cloud Storage URI containing file(s) to import.
             *
             * The URI must be in the following format: `gs://{bucket_id}/{object_id}`.
             * The URI can include wildcards in `object_id` and thus identify multiple
             * files. Supported wildcards:
             *
             * &#42;  `&#42;` to match 0 or more non-separator characters
             * &#42;  `&#42;&#42;` to match 0 or more characters (including separators). Must be used
             * at the end of a path and with no other wildcards in the
             * path. Can also be used with a file extension (such as .ndjson), which
             * imports all files with the extension in the specified directory and
             * its sub-directories. For example, `gs://my-bucket/my-directory/&#42;&#42;.ndjson`
             * imports all files with `.ndjson` extensions in `my-directory/` and its
             * sub-directories.
             * &#42;  `?` to match 1 character
             *
             * Files matching the wildcard are expected to contain content only, no
             * metadata.
             */
            uri?: string;
        }
        interface GoogleCloudHealthcareV1beta1FhirRestImportResourcesErrorDetails {
            /** The number of resources that had errors. */
            errorCount?: string;
            /**
             * The name of the FHIR store where resources have been imported, in the
             * format
             * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
             */
            fhirStore?: string;
            /**
             * The total number of resources included in the source data. This is the sum
             * of the success and error counts.
             */
            inputSize?: string;
            /** The number of resources that have been imported. */
            successCount?: string;
        }
        interface GoogleCloudHealthcareV1beta1FhirRestImportResourcesResponse {
            /**
             * The name of the FHIR store where the resources have been imported, in the
             * format
             * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
             */
            fhirStore?: string;
            /** The total number of resources included in the source data. */
            inputSize?: string;
        }
        interface Hl7V2Store {
            /**
             * User-supplied key-value pairs used to organize HL7v2 stores.
             *
             * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding
             * of maximum 128 bytes, and must conform to the
             * following PCRE regular expression:
             * \p{Ll}\p{Lo}{0,62}
             *
             * Label values are optional, must be between 1 and 63 characters long, have
             * a UTF-8 encoding of maximum 128 bytes, and must conform to the
             * following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
             *
             * No more than 64 labels can be associated with a given store.
             */
            labels?: Record<string, string>;
            /**
             * Output only. Resource name of the HL7v2 store, of the form
             * `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
             */
            name?: string;
            /**
             * The notification destination all messages (both Ingest & Create) are
             * published on. Only the message name is sent as part of the notification. If
             * this is unset, no notifications are sent. Supplied by the client.
             */
            notificationConfig?: NotificationConfig;
            /**
             * The configuration for the parser. It determines how the server parses the
             * messages.
             */
            parserConfig?: ParserConfig;
            /**
             * Determines whether duplicate messages should be rejected. A duplicate
             * message is a message with the same raw bytes as a message that has already
             * been ingested/created in this HL7v2 store.
             * The default value is false, meaning that the store accepts the duplicate
             * messages and it also returns the same ACK message in the
             * IngestMessageResponse as has been returned previously. Note that only
             * one resource is created in the store.
             * When this field is set to true,
             * CreateMessage/IngestMessage
             * requests with a duplicate message will be rejected by the store, and
             * IngestMessageErrorDetail returns a NACK message upon rejection.
             */
            rejectDuplicateMessage?: boolean;
        }
        interface HttpBody {
            /** The HTTP Content-Type header value specifying the content type of the body. */
            contentType?: string;
            /** The HTTP request/response body as raw binary. */
            data?: string;
            /**
             * Application specific response metadata. Must be set in the first response
             * for streaming APIs.
             */
            extensions?: Array<Record<string, any>>;
        }
        interface ImageConfig {
            /** Determines how to redact text from image. */
            textRedactionMode?: string;
        }
        interface ImportDicomDataErrorDetails {
            /**
             * Deprecated. Use only for debugging purposes.
             *
             * Contains sample errors encountered in imports of individual resources.
             * For example, a Cloud Storage object.
             */
            sampleErrors?: ErrorDetail[];
        }
        interface ImportDicomDataRequest {
            /**
             * Cloud Storage source data location and import configuration.
             *
             * The Cloud Storage location requires the `roles/storage.objectViewer`
             * Cloud IAM role.
             */
            gcsSource?: GoogleCloudHealthcareV1beta1DicomGcsSource;
        }
        interface ImportResourcesRequest {
            /**
             * The content structure in the source location. If not specified, the server
             * treats the input source files as BUNDLE.
             */
            contentStructure?: string;
            /**
             * Cloud Storage source data location and import configuration.
             *
             * The Cloud Storage location requires the `roles/storage.objectViewer`
             * Cloud IAM role.
             *
             * Each Cloud Storage object should be a text file that contains the format
             * specified in ContentStructure.
             */
            gcsSource?: GoogleCloudHealthcareV1beta1FhirRestGcsSource;
        }
        interface InfoTypeTransformation {
            /** Config for character mask. */
            characterMaskConfig?: CharacterMaskConfig;
            /** Config for crypto hash. */
            cryptoHashConfig?: CryptoHashConfig;
            /** Config for date shift. */
            dateShiftConfig?: DateShiftConfig;
            /**
             * InfoTypes to apply this transformation to. If this is not specified, this
             * transformation becomes the default transformation, and is used for any
             * info_type that is not specified in another transformation.
             */
            infoTypes?: string[];
            /** Config for text redaction. */
            redactConfig?: any;
            /** Config for replace with InfoType. */
            replaceWithInfoTypeConfig?: any;
        }
        interface IngestMessageRequest {
            /** HL7v2 message to ingest. */
            message?: Message;
        }
        interface IngestMessageResponse {
            /** HL7v2 ACK message. */
            hl7Ack?: string;
            /** Created message resource. */
            message?: Message;
        }
        interface ListDatasetsResponse {
            /** The first page of datasets. */
            datasets?: Dataset[];
            /**
             * Token to retrieve the next page of results, or empty if there are no
             * more results in the list.
             */
            nextPageToken?: string;
        }
        interface ListDicomStoresResponse {
            /**
             * The returned DICOM stores. Won't be more DICOM stores than the value of
             * page_size in the request.
             */
            dicomStores?: DicomStore[];
            /**
             * Token to retrieve the next page of results or empty if there are no more
             * results in the list.
             */
            nextPageToken?: string;
        }
        interface ListFhirStoresResponse {
            /**
             * The returned FHIR stores. Won't be more FHIR stores than the value of
             * page_size in the request.
             */
            fhirStores?: FhirStore[];
            /**
             * Token to retrieve the next page of results or empty if there are no more
             * results in the list.
             */
            nextPageToken?: string;
        }
        interface ListHl7V2StoresResponse {
            /**
             * The returned HL7v2 stores. Won't be more HL7v2 stores than the value of
             * page_size in the request.
             */
            hl7V2Stores?: Hl7V2Store[];
            /**
             * Token to retrieve the next page of results or empty if there are no more
             * results in the list.
             */
            nextPageToken?: string;
        }
        interface ListLocationsResponse {
            /** A list of locations that matches the specified filter in the request. */
            locations?: Location[];
            /** The standard List next-page token. */
            nextPageToken?: string;
        }
        interface ListMessagesResponse {
            /**
             * The returned Messages. Won't be more Messages than the value of
             * page_size in the request. See
             * view for
             * populated fields.
             */
            hl7V2Messages?: Message[];
            /**
             * Deprecated. Use `hl7_v2_messages` instead.
             * The returned message names. Won't be more values than the value of
             * page_size in the request.
             */
            messages?: string[];
            /**
             * Token to retrieve the next page of results or empty if there are no more
             * results in the list.
             */
            nextPageToken?: string;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?: string;
            /** A list of operations that matches the specified filter in the request. */
            operations?: Operation[];
        }
        interface Location {
            /**
             * The friendly name for this location, typically a nearby city name.
             * For example, "Tokyo".
             */
            displayName?: string;
            /**
             * Cross-service attributes for the location. For example
             *
             * {"cloud.googleapis.com/region": "us-east1"}
             */
            labels?: Record<string, string>;
            /** The canonical id for this location. For example: `"us-east1"`. */
            locationId?: string;
            /**
             * Service-specific metadata. For example the available capacity at the given
             * location.
             */
            metadata?: Record<string, any>;
            /**
             * Resource name for the location, which may vary between implementations.
             * For example: `"projects/example-project/locations/us-east1"`
             */
            name?: string;
        }
        interface Message {
            /** Output only. The datetime when the message was created. Set by the server. */
            createTime?: string;
            /** Raw message bytes. */
            data?: string;
            /**
             * User-supplied key-value pairs used to organize HL7v2 stores.
             *
             * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding
             * of maximum 128 bytes, and must conform to the
             * following PCRE regular expression:
             * \p{Ll}\p{Lo}{0,62}
             *
             * Label values are optional, must be between 1 and 63 characters long, have
             * a UTF-8 encoding of maximum 128 bytes, and must conform to the
             * following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
             *
             * No more than 64 labels can be associated with a given store.
             */
            labels?: Record<string, string>;
            /** The message type and trigger event for this message. MSH-9. */
            messageType?: string;
            /**
             * Resource name of the Message, of the form
             * `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
             * Assigned by the server.
             */
            name?: string;
            /** Output only. The parsed version of the raw message data. */
            parsedData?: ParsedData;
            /**
             * All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this
             * message.
             */
            patientIds?: PatientId[];
            /** The hospital that this message came from. MSH-4. */
            sendFacility?: string;
            /** The datetime the sending application sent this message. MSH-7. */
            sendTime?: string;
        }
        interface NotificationConfig {
            /**
             * The [Cloud Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that
             * notifications of changes are published on. Supplied by the client.
             * PubsubMessage.Data contains the resource name.
             * PubsubMessage.MessageId is the ID of this message. It is guaranteed to be
             * unique within the topic.
             * PubsubMessage.PublishTime is the time at which the message was published.
             * Notifications are only sent if the topic is
             * non-empty. [Topic
             * names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped
             * to a project. cloud-healthcare@system.gserviceaccount.com must have
             * publisher permissions on the given Cloud Pub/Sub topic. Not having adequate
             * permissions causes the calls that send notifications to fail.
             */
            pubsubTopic?: string;
        }
        interface Operation {
            /**
             * If the value is `false`, it means the operation is still in progress.
             * If `true`, the operation is completed, and either `error` or `response` is
             * available.
             */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation.  It typically
             * contains progress information and common metadata such as create time.
             * Some services might not provide such metadata.  Any method that returns a
             * long-running operation should document the metadata type, if any.
             */
            metadata?: Record<string, any>;
            /**
             * The server-assigned name, which is only unique within the same service that
             * originally returns it. If you use the default HTTP mapping, the
             * `name` should be a resource name ending with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success.  If the original
             * method returns no data on success, such as `Delete`, the response is
             * `google.protobuf.Empty`.  If the original method is standard
             * `Get`/`Create`/`Update`, the response should be the resource.  For other
             * methods, the response should have the type `XxxResponse`, where `Xxx`
             * is the original method name.  For example, if the original method name
             * is `TakeSnapshot()`, the inferred response type is
             * `TakeSnapshotResponse`.
             */
            response?: Record<string, any>;
        }
        interface OperationMetadata {
            /** The name of the API method that initiated the operation. */
            apiMethodName?: string;
            counter?: ProgressCounter;
            /** The time at which the operation was created by the API. */
            createTime?: string;
            /** The time at which execution was completed. */
            endTime?: string;
        }
        interface ParsedData {
            segments?: Segment[];
        }
        interface ParserConfig {
            /** Determines whether messages with no header are allowed. */
            allowNullHeader?: boolean;
            /**
             * Byte(s) to use as the segment terminator. If this is unset, '\r' is
             * used as segment terminator.
             */
            segmentTerminator?: string;
        }
        interface PatientId {
            /** ID type. For example, MRN or NHS. */
            type?: string;
            /** The patient's unique identifier. */
            value?: string;
        }
        interface Policy {
            /** Specifies cloud audit logging configuration for this policy. */
            auditConfigs?: AuditConfig[];
            /**
             * Associates a list of `members` to a `role`. Optionally, may specify a
             * `condition` that determines how and when the `bindings` are applied. Each
             * of the `bindings` must contain at least one member.
             */
            bindings?: Binding[];
            /**
             * `etag` is used for optimistic concurrency control as a way to help
             * prevent simultaneous updates of a policy from overwriting each other.
             * It is strongly suggested that systems make use of the `etag` in the
             * read-modify-write cycle to perform policy updates in order to avoid race
             * conditions: An `etag` is returned in the response to `getIamPolicy`, and
             * systems are expected to put that etag in the request to `setIamPolicy` to
             * ensure that their change will be applied to the same version of the policy.
             *
             * &#42;&#42;Important:&#42;&#42; If you use IAM Conditions, you must include the `etag` field
             * whenever you call `setIamPolicy`. If you omit this field, then IAM allows
             * you to overwrite a version `3` policy with a version `1` policy, and all of
             * the conditions in the version `3` policy are lost.
             */
            etag?: string;
            /**
             * Specifies the format of the policy.
             *
             * Valid values are `0`, `1`, and `3`. Requests that specify an invalid value
             * are rejected.
             *
             * Any operation that affects conditional role bindings must specify version
             * `3`. This requirement applies to the following operations:
             *
             * &#42; Getting a policy that includes a conditional role binding
             * &#42; Adding a conditional role binding to a policy
             * &#42; Changing a conditional role binding in a policy
             * &#42; Removing any role binding, with or without a condition, from a policy
             * that includes conditions
             *
             * &#42;&#42;Important:&#42;&#42; If you use IAM Conditions, you must include the `etag` field
             * whenever you call `setIamPolicy`. If you omit this field, then IAM allows
             * you to overwrite a version `3` policy with a version `1` policy, and all of
             * the conditions in the version `3` policy are lost.
             *
             * If a policy does not include any conditions, operations on that policy may
             * specify any valid version or leave the field unset.
             */
            version?: number;
        }
        interface ProgressCounter {
            /** The number of units that failed in the operation. */
            failure?: string;
            /** The number of units that are pending in the operation. */
            pending?: string;
            /** The number of units that succeeded in the operation. */
            success?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface RedactConfig {
        }
        // tslint:disable-next-line:no-empty-interface
        interface ReplaceWithInfoTypeConfig {
        }
        interface Resources {
            /** List of resources IDs. For example, "Patient/1234". */
            resources?: string[];
        }
        interface SchemaConfig {
            /**
             * The depth for all recursive structures in the output analytics
             * schema. For example, `concept` in the CodeSystem resource is a recursive
             * structure; when the depth is 2, the CodeSystem table will have a column
             * called `concept.concept` but not `concept.concept.concept`. If not
             * specified or set to 0, the server will use the default value 2. The
             * maximum depth allowed is 5.
             */
            recursiveStructureDepth?: string;
            /**
             * Specifies the output schema type. If unspecified, the default is
             * `LOSSLESS`.
             */
            schemaType?: string;
        }
        interface SearchResourcesRequest {
            /**
             * The FHIR resource type to search, such as Patient or Observation. For a
             * complete list, see the FHIR Resource Index
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
             * [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
             */
            resourceType?: string;
        }
        interface Segment {
            /**
             * A mapping from the positional location to the value.
             * The key string uses zero-based indexes separated by dots to identify
             * Fields, components and sub-components. A bracket notation is also used to
             * identify different instances of a repeated field.
             * Regex for key: (\d+)(\[\d+\])?(.\d+)?(.\d+)?
             *
             * Examples of (key, value) pairs:
             *
             * &#42; (0.1, "hemoglobin") denotes that the first component of Field 0 has the
             * value "hemoglobin".
             *
             * &#42; (1.1.2, "CBC") denotes that the second sub-component of the first
             * component of Field 1 has the value "CBC".
             *
             * &#42; (1[0].1, "HbA1c") denotes that the first component of the
             * first Instance of Field 1, which is repeated, has the value "HbA1c".
             */
            fields?: Record<string, string>;
            /** A string that indicates the type of segment. For example, EVN or PID. */
            segmentId?: string;
            /**
             * Set ID for segments that can be in a set. This can be empty if it's
             * missing or isn't applicable.
             */
            setId?: string;
        }
        interface SetIamPolicyRequest {
            /**
             * REQUIRED: The complete policy to be applied to the `resource`. The size of
             * the policy is limited to a few 10s of KB. An empty policy is a
             * valid policy but certain Cloud Platform services (such as Projects)
             * might reject them.
             */
            policy?: Policy;
            /**
             * OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
             * the fields in the mask will be modified. If no mask is provided, the
             * following default mask is used:
             * paths: "bindings, etag"
             * This field is only used by Cloud IAM.
             */
            updateMask?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /**
             * A list of messages that carry the error details.  There is a common set of
             * message types for APIs to use.
             */
            details?: Array<Record<string, any>>;
            /**
             * A developer-facing error message, which should be in English. Any
             * user-facing error message should be localized and sent in the
             * google.rpc.Status.details field, or localized by the client.
             */
            message?: string;
        }
        interface TagFilterList {
            /**
             * Tags to be filtered. Tags must be DICOM Data Elements, File Meta
             * Elements, or Directory Structuring Elements, as defined at:
             * http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,.
             * They may be provided by "Keyword" or "Tag". For example "PatientID",
             * "00100010".
             */
            tags?: string[];
        }
        interface TestIamPermissionsRequest {
            /**
             * The set of permissions to check for the `resource`. Permissions with
             * wildcards (such as '&#42;' or 'storage.&#42;') are not allowed. For more
             * information see
             * [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
             */
            permissions?: string[];
        }
        interface TestIamPermissionsResponse {
            /**
             * A subset of `TestPermissionsRequest.permissions` that the caller is
             * allowed.
             */
            permissions?: string[];
        }
        interface TextConfig {
            /** The transformations to apply to the detected data. */
            transformations?: InfoTypeTransformation[];
        }
        interface AnnotationStoresResource {
            /**
             * Gets the access control policy for a resource.
             * Returns an empty policy if the resource exists and does not have a policy
             * set.
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. The policy format version to be returned.
                 *
                 * Valid values are 0, 1, and 3. Requests specifying an invalid value will be
                 * rejected.
                 *
                 * Requests for policies with any conditional bindings must specify version 3.
                 * Policies without any conditional bindings may specify any valid value or
                 * leave the field unset.
                 */
                "options.requestedPolicyVersion"?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Policy>;
            /**
             * Sets the access control policy on the specified resource. Replaces any
             * existing policy.
             *
             * Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being specified.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns permissions that a caller has on the specified resource.
             * If the resource does not exist, this will return an empty set of
             * permissions, not a NOT_FOUND error.
             *
             * Note: This operation is designed to be used for building permission-aware
             * UIs and command-line tools, not for authorization checking. This operation
             * may "fail open" without warning.
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
        }
        interface FramesResource {
            /**
             * RetrieveFrames returns instances associated with the given study, series,
             * SOP Instance UID and frame numbers. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4.
             */
            retrieveFrames(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the RetrieveFrames DICOMweb request. For example,
                 * `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * RetrieveRenderedFrames returns instances associated with the given study,
             * series, SOP Instance UID and frame numbers in an acceptable Rendered Media
             * Type. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4.
             */
            retrieveRendered(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the RetrieveRenderedFrames DICOMweb request. For example,
                 * `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}/rendered`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
        }
        interface InstancesResource {
            /**
             * DeleteInstance deletes an instance associated with the given study, series,
             * and SOP Instance UID. Delete requests are equivalent to the GET requests
             * specified in the Retrieve transaction.
             */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the DeleteInstance request. For example,
                 * `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * RetrieveInstance returns instance associated with the given study, series,
             * and SOP Instance UID. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4.
             */
            retrieveInstance(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the RetrieveInstance DICOMweb request. For example,
                 * `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * RetrieveInstanceMetadata returns instance associated with the given study,
             * series, and SOP Instance UID presented as metadata with the bulk data
             * removed. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4.
             */
            retrieveMetadata(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the RetrieveInstanceMetadata DICOMweb request. For example,
                 * `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/metadata`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * RetrieveRenderedInstance returns instance associated with the given study,
             * series, and SOP Instance UID in an acceptable Rendered Media Type. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4.
             */
            retrieveRendered(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the RetrieveRenderedInstance DICOMweb request. For example,
                 * `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/rendered`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            frames: FramesResource;
        }
        interface SeriesResource {
            /**
             * DeleteSeries deletes all instances within the given study and series.
             * Delete requests are equivalent to the GET requests specified in the
             * Retrieve transaction.
             */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the DeleteSeries request. For example,
                 * `studies/{study_uid}/series/{series_uid}`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * RetrieveSeriesMetadata returns instance associated with the given study and
             * series, presented as metadata with the bulk data removed. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4.
             */
            retrieveMetadata(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the RetrieveSeriesMetadata DICOMweb request. For example,
                 * `studies/{study_uid}/series/{series_uid}/metadata`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * RetrieveSeries returns all instances within the given study and series. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4.
             */
            retrieveSeries(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the RetrieveSeries DICOMweb request. For example,
                 * `studies/{study_uid}/series/{series_uid}`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * SearchForInstances returns a list of matching instances. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6.
             */
            searchForInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the SearchForInstancesRequest DICOMweb request. For example,
                 * `instances`, `series/{series_uid}/instances`, or
                 * `studies/{study_uid}/instances`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            instances: InstancesResource;
        }
        interface StudiesResource {
            /**
             * DeleteStudy deletes all instances within the given study. Delete requests
             * are equivalent to the GET requests specified in the Retrieve transaction.
             */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The path of the DeleteStudy request. For example, `studies/{study_uid}`. */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * RetrieveStudyMetadata returns instance associated with the given study
             * presented as metadata with the bulk data removed. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4.
             */
            retrieveMetadata(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the RetrieveStudyMetadata DICOMweb request. For example,
                 * `studies/{study_uid}/metadata`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * RetrieveStudy returns all instances within the given study. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4.
             */
            retrieveStudy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the RetrieveStudy DICOMweb request. For example,
                 * `studies/{study_uid}`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * SearchForInstances returns a list of matching instances. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6.
             */
            searchForInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the SearchForInstancesRequest DICOMweb request. For example,
                 * `instances`, `series/{series_uid}/instances`, or
                 * `studies/{study_uid}/instances`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * SearchForSeries returns a list of matching series. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6.
             */
            searchForSeries(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the SearchForSeries DICOMweb request. For example, `series` or
                 * `studies/{study_uid}/series`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * StoreInstances stores DICOM instances associated with study instance unique
             * identifiers (SUID). See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5.
             */
            storeInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the StoreInstances DICOMweb request. For example,
                 * `studies/[{study_uid}]`. Note that the `study_uid` is optional.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: HttpBody;
            }): Request<HttpBody>;
            storeInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the StoreInstances DICOMweb request. For example,
                 * `studies/[{study_uid}]`. Note that the `study_uid` is optional.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: HttpBody): Request<HttpBody>;
            series: SeriesResource;
        }
        interface DicomStoresResource {
            /** Creates a new DICOM store within the parent dataset. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The ID of the DICOM store that is being created.
                 * Any string value up to 256 characters in length.
                 */
                dicomStoreId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the dataset this DICOM store belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DicomStore;
            }): Request<DicomStore>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The ID of the DICOM store that is being created.
                 * Any string value up to 256 characters in length.
                 */
                dicomStoreId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the dataset this DICOM store belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DicomStore): Request<DicomStore>;
            /**
             * De-identifies data from the source store and writes it to the destination
             * store. The metadata field type
             * is OperationMetadata.
             * If the request is successful, the
             * response field type is
             * DeidentifyDicomStoreSummary. If errors occur,
             * error
             * details field type is
             * DeidentifyErrorDetails.
             * Errors are also logged to Stackdriver
             * (see [Viewing logs](/healthcare/docs/how-tos/stackdriver-logging)).
             */
            deidentify(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Source DICOM store resource name. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                sourceStore: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DeidentifyDicomStoreRequest;
            }): Request<Operation>;
            deidentify(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Source DICOM store resource name. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                sourceStore: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DeidentifyDicomStoreRequest): Request<Operation>;
            /**
             * Deletes the specified DICOM store and removes all images that are contained
             * within it.
             */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the DICOM store to delete. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * Exports data to the specified destination by copying it from the DICOM
             * store.
             * The metadata field type is
             * OperationMetadata.
             */
            export(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The DICOM store resource name from which to export the data. For
                 * example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ExportDicomDataRequest;
            }): Request<Operation>;
            export(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The DICOM store resource name from which to export the data. For
                 * example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ExportDicomDataRequest): Request<Operation>;
            /** Gets the specified DICOM store. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the DICOM store to get. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DicomStore>;
            /**
             * Gets the access control policy for a resource.
             * Returns an empty policy if the resource exists and does not have a policy
             * set.
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. The policy format version to be returned.
                 *
                 * Valid values are 0, 1, and 3. Requests specifying an invalid value will be
                 * rejected.
                 *
                 * Requests for policies with any conditional bindings must specify version 3.
                 * Policies without any conditional bindings may specify any valid value or
                 * leave the field unset.
                 */
                "options.requestedPolicyVersion"?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Policy>;
            /**
             * Imports data into the DICOM store by copying it from the specified source.
             * For errors, the Operation is populated with error details (in the form
             * of ImportDicomDataErrorDetails in error.details), which hold
             * finer-grained error information. Errors are also logged to Stackdriver
             * Logging. For more information,
             * see [Viewing logs](/healthcare/docs/how-tos/stackdriver-logging).
             * The metadata field type is
             * OperationMetadata.
             */
            import(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The name of the DICOM store resource into which the data is imported.
                 * For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ImportDicomDataRequest;
            }): Request<Operation>;
            import(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The name of the DICOM store resource into which the data is imported.
                 * For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ImportDicomDataRequest): Request<Operation>;
            /** Lists the DICOM stores in the given dataset. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Restricts stores returned to those matching a filter. Syntax:
                 * https://cloud.google.com/appengine/docs/standard/python/search/query_strings
                 * Only filtering on labels is supported. For example, `labels.key=value`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Limit on the number of DICOM stores to return in a single response.
                 * If zero the default page size of 100 is used.
                 */
                pageSize?: number;
                /** The next_page_token value returned from the previous List request, if any. */
                pageToken?: string;
                /** Name of the dataset. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListDicomStoresResponse>;
            /** Updates the specified DICOM store. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Output only. Resource name of the DICOM store, of the form
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The update mask applies to the resource. For the `FieldMask` definition,
                 * see
                 * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DicomStore;
            }): Request<DicomStore>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Output only. Resource name of the DICOM store, of the form
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The update mask applies to the resource. For the `FieldMask` definition,
                 * see
                 * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DicomStore): Request<DicomStore>;
            /**
             * SearchForInstances returns a list of matching instances. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6.
             */
            searchForInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the SearchForInstancesRequest DICOMweb request. For example,
                 * `instances`, `series/{series_uid}/instances`, or
                 * `studies/{study_uid}/instances`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * SearchForSeries returns a list of matching series. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6.
             */
            searchForSeries(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the SearchForSeries DICOMweb request. For example, `series` or
                 * `studies/{study_uid}/series`.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * SearchForStudies returns a list of matching studies. See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6.
             */
            searchForStudies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The path of the SearchForStudies DICOMweb request. For example, `studies`. */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * Sets the access control policy on the specified resource. Replaces any
             * existing policy.
             *
             * Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being specified.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * StoreInstances stores DICOM instances associated with study instance unique
             * identifiers (SUID). See
             * http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5.
             */
            storeInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the StoreInstances DICOMweb request. For example,
                 * `studies/[{study_uid}]`. Note that the `study_uid` is optional.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: HttpBody;
            }): Request<HttpBody>;
            storeInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The path of the StoreInstances DICOMweb request. For example,
                 * `studies/[{study_uid}]`. Note that the `study_uid` is optional.
                 */
                dicomWebPath: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the DICOM store that is being accessed. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: HttpBody): Request<HttpBody>;
            /**
             * Returns permissions that a caller has on the specified resource.
             * If the resource does not exist, this will return an empty set of
             * permissions, not a NOT_FOUND error.
             *
             * Note: This operation is designed to be used for building permission-aware
             * UIs and command-line tools, not for authorization checking. This operation
             * may "fail open" without warning.
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            studies: StudiesResource;
        }
        interface FhirResource {
            /**
             * Gets the FHIR capability statement
             * ([STU3](http://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html),
             * [R4](http://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)),
             * or the [conformance
             * statement](http://hl7.org/implement/standards/fhir/DSTU2/conformance.html)
             * in the DSTU2 case for the store, which contains a description of
             * functionality supported by the server.
             *
             * Implements the FHIR standard capabilities interaction
             * ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#capabilities),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#capabilities)),
             * or the [conformance
             * interaction](http://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance)
             * in the DSTU2 case.
             *
             * On success, the response body will contain a JSON-encoded representation
             * of a `CapabilityStatement` resource.
             */
            capabilities(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the FHIR store to retrieve the capabilities for. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * Deletes FHIR resources that match a search query.
             *
             * Implements the FHIR standard conditional delete interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.12.1),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.13.1),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#3.1.0.7.1)).
             * If multiple resources match, all of them will be deleted.
             *
             * Search terms are provided as query parameters following the same pattern as
             * the search method.
             *
             * Note: Unless resource versioning is disabled by setting the
             * disable_resource_versioning flag
             * on the FHIR store, the deleted resources will be moved to a history
             * repository that can still be retrieved through vread
             * and related methods, unless they are removed by the
             * purge method.
             */
            conditionalDelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the FHIR store this resource belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The FHIR resource type to delete, such as Patient or Observation. For a
                 * complete list, see the FHIR Resource Index
                 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
                 * [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
                 * [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
                 */
                type: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * If a resource is found based on the search criteria specified in the query
             * parameters, updates part of that resource by applying the operations
             * specified in a [JSON Patch](http://jsonpatch.com/) document.
             *
             * Implements the FHIR standard conditional patch interaction
             * ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#patch),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#patch)).
             *
             * DSTU2 doesn't define a conditional patch method, but the server supports it
             * in the same way it supports STU3.
             *
             * Search terms are provided as query parameters following the same pattern as
             * the search method.
             *
             * If the search criteria identify more than one match, the request will
             * return a `412 Precondition Failed` error.
             *
             * The request body must contain a JSON Patch document, and the request
             * headers must contain `Content-Type: application/json-patch+json`.
             *
             * On success, the response body will contain a JSON-encoded representation
             * of the updated resource, including the server-assigned version ID.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             */
            conditionalPatch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the FHIR store this resource belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The FHIR resource type to update, such as Patient or Observation. For a
                 * complete list, see the FHIR Resource Index
                 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
                 * [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
                 * [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
                 */
                type: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: HttpBody;
            }): Request<HttpBody>;
            conditionalPatch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the FHIR store this resource belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The FHIR resource type to update, such as Patient or Observation. For a
                 * complete list, see the FHIR Resource Index
                 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
                 * [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
                 * [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
                 */
                type: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: HttpBody): Request<HttpBody>;
            /**
             * If a resource is found based on the search criteria specified in the query
             * parameters, updates the entire contents of that resource.
             *
             * Implements the FHIR standard conditional update interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.10.2),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#cond-update),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#cond-update)).
             *
             * Search terms are provided as query parameters following the same pattern as
             * the search method.
             *
             * If the search criteria identify more than one match, the request will
             * return a `412 Precondition Failed` error.
             * If the search criteria identify zero matches, and the supplied resource
             * body contains an `id`, and the FHIR store has
             * enable_update_create set, creates the
             * resource with the client-specified ID. If the search criteria identify zero
             * matches, and the supplied resource body does not contain an `id`, the
             * resource will be created with a server-assigned ID as per the
             * create method.
             *
             * The request body must contain a JSON-encoded FHIR resource, and the request
             * headers must contain `Content-Type: application/fhir+json`.
             *
             * On success, the response body will contain a JSON-encoded representation
             * of the updated resource, including the server-assigned version ID.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             */
            conditionalUpdate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the FHIR store this resource belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The FHIR resource type to update, such as Patient or Observation. For a
                 * complete list, see the FHIR Resource Index
                 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
                 * [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
                 * [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
                 * Must match the resource type in the provided content.
                 */
                type: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: HttpBody;
            }): Request<HttpBody>;
            conditionalUpdate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the FHIR store this resource belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The FHIR resource type to update, such as Patient or Observation. For a
                 * complete list, see the FHIR Resource Index
                 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
                 * [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
                 * [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
                 * Must match the resource type in the provided content.
                 */
                type: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: HttpBody): Request<HttpBody>;
            /**
             * Creates a FHIR resource.
             *
             * Implements the FHIR standard create interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)),
             * which creates a new resource with a server-assigned resource ID.
             *
             * Also supports the FHIR standard conditional create interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#ccreate),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#ccreate),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#ccreate)),
             * specified by supplying an `If-None-Exist` header containing a FHIR search
             * query. If no resources match this search query, the server processes the
             * create operation as normal.
             *
             * The request body must contain a JSON-encoded FHIR resource, and the request
             * headers must contain `Content-Type: application/fhir+json`.
             *
             * On success, the response body will contain a JSON-encoded representation
             * of the resource as it was created on the server, including the
             * server-assigned resource ID and version ID.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the FHIR store this resource belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The FHIR resource type to create, such as Patient or Observation. For a
                 * complete list, see the FHIR Resource Index
                 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
                 * [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
                 * [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
                 * Must match the resource type in the provided content.
                 */
                type: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: HttpBody;
            }): Request<HttpBody>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the FHIR store this resource belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The FHIR resource type to create, such as Patient or Observation. For a
                 * complete list, see the FHIR Resource Index
                 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
                 * [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
                 * [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
                 * Must match the resource type in the provided content.
                 */
                type: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: HttpBody): Request<HttpBody>;
            /**
             * Deletes a FHIR resource.
             *
             * Implements the FHIR standard delete interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#delete),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#delete),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#delete)).
             *
             * Note: Unless resource versioning is disabled by setting the
             * disable_resource_versioning flag
             * on the FHIR store, the deleted resources will be moved to a history
             * repository that can still be retrieved through vread
             * and related methods, unless they are removed by the
             * purge method.
             */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the resource to delete. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * Executes all the requests in the given Bundle.
             *
             * Implements the FHIR standard batch/transaction interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#transaction),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#transaction)).
             *
             * Supports all interactions within a bundle, except search. This method
             * accepts Bundles of type `batch` and `transaction`, processing them
             * according to the batch processing rules
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#brules))
             * and transaction processing rules
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#trules)).
             *
             * The request body must contain a JSON-encoded FHIR `Bundle` resource, and
             * the request headers must contain `Content-Type: application/fhir+json`.
             *
             * For a batch bundle or a successful transaction the response body will
             * contain a JSON-encoded representation of a `Bundle` resource of type
             * `batch-response` or `transaction-response` containing one entry for each
             * entry in the request, with the outcome of processing the entry. In the
             * case of an error for a transaction bundle, the response body will contain
             * a JSON-encoded `OperationOutcome` resource describing the reason for the
             * error. If the request cannot be mapped to a valid API method on a FHIR
             * store, a generic GCP error might be returned instead.
             */
            executeBundle(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the FHIR store in which this bundle will be executed. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: HttpBody;
            }): Request<HttpBody>;
            executeBundle(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the FHIR store in which this bundle will be executed. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: HttpBody): Request<HttpBody>;
            /**
             * Lists all the versions of a resource (including the current version and
             * deleted versions) from the FHIR store.
             *
             * Implements the per-resource form of the FHIR standard history interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)).
             *
             * On success, the response body will contain a JSON-encoded representation
             * of a `Bundle` resource of type `history`, containing the version history
             * sorted from most recent to oldest versions.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             */
            history(request: {
                /**
                 * Only include resource versions that were current at some point during the
                 * time period specified in the date time value. The date parameter format is
                 * yyyy-mm-ddThh:mm:ss[Z|(+|-)hh:mm]
                 *
                 * Clients may specify any of the following:
                 *
                 * &#42;  An entire year: `_at=2019`
                 * &#42;  An entire month: `_at=2019-01`
                 * &#42;  A specific day: `_at=2019-01-20`
                 * &#42;  A specific second: `_at=2018-12-31T23:59:58Z`
                 */
                _at?: string;
                /** The maximum number of search results on a page. Defaults to 1000. */
                _count?: number;
                /**
                 * Used to retrieve the first, previous, next, or last page of resource
                 * versions when using pagination. Value should be set to the value of
                 * `_page_token` set in next or previous page links' URLs. Next and previous
                 * page are returned in the response bundle's links field, where
                 * `link.relation` is "previous" or "next".
                 *
                 * Omit `_page_token` if no previous request has been made.
                 */
                _page_token?: string;
                /**
                 * Only include resource versions that were created at or after the given
                 * instant in time. The instant in time uses the format
                 * YYYY-MM-DDThh:mm:ss.sss+zz:zz (for example 2015-02-07T13:28:17.239+02:00 or
                 * 2017-01-01T00:00:00Z). The time must be specified to the second and
                 * include a time zone.
                 */
                _since?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the resource to retrieve. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * Retrieves the N most recent `Observation` resources for a subject matching
             * search criteria specified as query parameters, grouped by
             * `Observation.code`, sorted from most recent to oldest.
             *
             * Implements the FHIR extended operation Observation-lastn
             * ([STU3](http://hl7.org/implement/standards/fhir/STU3/observation-operations.html#lastn),
             * [R4](http://hl7.org/implement/standards/fhir/R4/observation-operations.html#lastn)).
             *
             * DSTU2 doesn't define the Observation-lastn method, but the server supports
             * it the same way it supports STU3.
             *
             * Search terms are provided as query parameters following the same pattern as
             * the search method. The following search parameters must
             * be provided:
             *
             * - `subject` or `patient` to specify a subject for the Observation.
             * - `code`, `category` or any of the composite parameters that include
             * `code`.
             *
             * Any other valid Observation search parameters can also be provided. This
             * operation accepts an additional query parameter `max`, which specifies N,
             * the maximum number of Observations to return from each group, with a
             * default of 1.
             *
             * Searches with over 1000 results are rejected. Results are counted before
             * grouping and limiting the results with `max`. To stay within the limit,
             * constrain these searches using Observation search parameters such as
             * `_lastUpdated` or `date`.
             *
             * On success, the response body will contain a JSON-encoded representation
             * of a `Bundle` resource of type `searchset`, containing the results of the
             * operation.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             */
            "Observation-lastn"(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the FHIR store to retrieve resources from. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * Updates part of an existing resource by applying the operations specified
             * in a [JSON Patch](http://jsonpatch.com/) document.
             *
             * Implements the FHIR standard patch interaction
             * ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#patch),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#patch)]).
             *
             * DSTU2 doesn't define a patch method, but the server supports it in the same
             * way it supports STU3.
             *
             * The request body must contain a JSON Patch document, and the request
             * headers must contain `Content-Type: application/json-patch+json`.
             *
             * On success, the response body will contain a JSON-encoded representation
             * of the updated resource, including the server-assigned version ID.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the resource to update. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: HttpBody;
            }): Request<HttpBody>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the resource to update. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: HttpBody): Request<HttpBody>;
            /**
             * On success, the response body will contain a JSON-encoded representation
             * of a `Bundle` resource of type `searchset`, containing the results of the
             * operation.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             */
            "Patient-everything"(request: {
                /** Maximum number of resources in a page. Defaults to 100. */
                _count?: number;
                /**
                 * Used to retrieve the next or previous page of results
                 * when using pagination. Value should be set to the value of page_token set
                 * in next or previous page links' urls. Next and previous page are returned
                 * in the response bundle's links field, where `link.relation` is "previous"
                 * or "next".
                 *
                 * Omit `page_token` if no previous request has been made.
                 */
                _page_token?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The response includes records prior to the end date. If no end date is
                 * provided, all records subsequent to the start date are in scope.
                 */
                end?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the `Patient` resource for which the information is required. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The response includes records subsequent to the start date. If no start
                 * date is provided, all records prior to the end date are in scope.
                 */
                start?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * Gets the contents of a FHIR resource.
             *
             * Implements the FHIR standard read interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#read),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#read),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#read)).
             *
             * Also supports the FHIR standard conditional read interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#cread),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#cread),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#cread))
             * specified by supplying an `If-Modified-Since` header with a date/time value
             * or an `If-None-Match` header with an ETag value.
             *
             * On success, the response body will contain a JSON-encoded representation
             * of the resource.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             */
            read(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the resource to retrieve. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /**
             * Deletes all the historical versions of a resource (excluding the current
             * version) from the FHIR store. To remove all versions of a resource, first
             * delete the current version and then call this method.
             *
             * This is not a FHIR standard operation.
             */
            "Resource-purge"(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the resource to purge. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * Searches for resources in the given FHIR store according to criteria
             * specified as query parameters.
             *
             * Implements the FHIR standard search interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search))
             * using the search semantics described in the FHIR Search specification
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html),
             * [R4](http://hl7.org/implement/standards/fhir/R4/search.html)).
             *
             * Supports three methods of search defined by the specification:
             *
             * &#42;  `GET [base]?[parameters]` to search across all resources.
             * &#42;  `GET [base]/[type]?[parameters]` to search resources of a specified
             * type.
             * &#42;  `POST [base]/[type]/_search?[parameters]` as an alternate form having
             * the same semantics as the `GET` method.
             *
             * The `GET` methods do not support compartment searches. The `POST` method
             * does not support `application/x-www-form-urlencoded` search parameters.
             *
             * On success, the response body will contain a JSON-encoded representation
             * of a `Bundle` resource of type `searchset`, containing the results of the
             * search.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             *
             * The server's capability statement, retrieved through
             * capabilities, indicates what search parameters
             * are supported on each FHIR resource. A list of all search parameters
             * defined by the specification can be found in the FHIR Search Parameter
             * Registry
             * ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
             * [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)).
             * FHIR search parameters for DSTU2 can be found on each resource's definition
             * page.
             *
             * Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`,
             * `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `:recurse`.
             *
             * Supported search result parameters: `_sort`, `_count`, `_include`,
             * `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`.
             *
             * The maximum number of search results returned defaults to 100, which can
             * be overridden by the `_count` parameter up to a maximum limit of 1000. If
             * there are additional results, the returned `Bundle` will contain
             * pagination links.
             *
             * Resources with a total size larger than 5MB or a field count larger than
             * 50,000 might not be fully searchable as the server might trim its generated
             * search index in those cases.
             *
             * Note: FHIR resources are indexed asynchronously, so there might be a slight
             * delay between the time a resource is created or changes and when the change
             * is reflected in search results.
             */
            search(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the FHIR store to retrieve resources from. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SearchResourcesRequest;
            }): Request<HttpBody>;
            search(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the FHIR store to retrieve resources from. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SearchResourcesRequest): Request<HttpBody>;
            /**
             * Updates the entire contents of a resource.
             *
             * Implements the FHIR standard update interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#update),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#update),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#update)).
             *
             * If the specified resource does
             * not exist and the FHIR store has
             * enable_update_create set, creates the
             * resource with the client-specified ID.
             *
             * The request body must contain a JSON-encoded FHIR resource, and the request
             * headers must contain `Content-Type: application/fhir+json`. The resource
             * must contain an `id` element having an identical value to the ID in the
             * REST path of the request.
             *
             * On success, the response body will contain a JSON-encoded representation
             * of the updated resource, including the server-assigned version ID.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the resource to update. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: HttpBody;
            }): Request<HttpBody>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the resource to update. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: HttpBody): Request<HttpBody>;
            /**
             * Gets the contents of a version (current or historical) of a FHIR resource
             * by version ID.
             *
             * Implements the FHIR standard vread interaction
             * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#vread),
             * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#vread),
             * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#vread)).
             *
             * On success, the response body will contain a JSON-encoded representation
             * of the resource.
             * Errors generated by the FHIR store will contain a JSON-encoded
             * `OperationOutcome` resource describing the reason for the error. If the
             * request cannot be mapped to a valid API method on a FHIR store, a generic
             * GCP error might be returned instead.
             */
            vread(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the resource version to retrieve. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
        }
        interface FhirStoresResource {
            /** Creates a new FHIR store within the parent dataset. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The ID of the FHIR store that is being created.
                 * The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.
                 */
                fhirStoreId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the dataset this FHIR store belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: FhirStore;
            }): Request<FhirStore>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The ID of the FHIR store that is being created.
                 * The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.
                 */
                fhirStoreId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the dataset this FHIR store belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: FhirStore): Request<FhirStore>;
            /**
             * De-identifies data from the source store and writes it to the destination
             * store. The metadata field type
             * is OperationMetadata.
             * If the request is successful, the
             * response field type is
             * DeidentifyFhirStoreSummary. If errors occur,
             * error
             * details field type is
             * DeidentifyErrorDetails.
             * Errors are also logged to Stackdriver
             * (see [Viewing logs](/healthcare/docs/how-tos/stackdriver-logging)).
             */
            deidentify(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Source FHIR store resource name. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
                 */
                sourceStore: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DeidentifyFhirStoreRequest;
            }): Request<Operation>;
            deidentify(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Source FHIR store resource name. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
                 */
                sourceStore: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DeidentifyFhirStoreRequest): Request<Operation>;
            /** Deletes the specified FHIR store and removes all resources within it. */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the FHIR store to delete. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * Export resources from the FHIR store to the specified destination.
             *
             * This method returns an Operation that can
             * be used to track the status of the export by calling
             * GetOperation.
             *
             * Immediate fatal errors appear in the
             * error field, errors are also logged
             * to Stackdriver (see [Viewing
             * logs](/healthcare/docs/how-tos/stackdriver-logging)).
             * Otherwise, when the operation finishes, a detailed response of type
             * ExportResourcesResponse is returned in the
             * response field.
             * The metadata field type for this
             * operation is OperationMetadata.
             */
            export(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The name of the FHIR store to export resource from. The name should be in
                 * the format of
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ExportResourcesRequest;
            }): Request<Operation>;
            export(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The name of the FHIR store to export resource from. The name should be in
                 * the format of
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ExportResourcesRequest): Request<Operation>;
            /** Gets the configuration of the specified FHIR store. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the FHIR store to get. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<FhirStore>;
            /**
             * Gets the access control policy for a resource.
             * Returns an empty policy if the resource exists and does not have a policy
             * set.
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. The policy format version to be returned.
                 *
                 * Valid values are 0, 1, and 3. Requests specifying an invalid value will be
                 * rejected.
                 *
                 * Requests for policies with any conditional bindings must specify version 3.
                 * Policies without any conditional bindings may specify any valid value or
                 * leave the field unset.
                 */
                "options.requestedPolicyVersion"?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Policy>;
            /**
             * Import resources to the FHIR store by loading data from the specified
             * sources. This method is optimized to load large quantities of data using
             * import semantics that ignore some FHIR store configuration options and are
             * not suitable for all use cases. It is primarily intended to load data into
             * an empty FHIR store that is not being used by other clients. In cases
             * where this method is not appropriate, consider using ExecuteBundle to
             * load data.
             *
             * Every resource in the input must contain a client-supplied ID, and will be
             * stored using that ID regardless of the
             * enable_update_create setting on the FHIR
             * store.
             *
             * The import process does not enforce referential integrity, regardless of
             * the
             * disable_referential_integrity
             * setting on the FHIR store. This allows the import of resources with
             * arbitrary interdependencies without considering grouping or ordering, but
             * if the input data contains invalid references or if some resources fail to
             * be imported, the FHIR store might be left in a state that violates
             * referential integrity.
             *
             * If a resource with the specified ID already exists, the most recent
             * version of the resource is overwritten without creating a new historical
             * version, regardless of the
             * disable_resource_versioning
             * setting on the FHIR store. If transient failures occur during the import,
             * it is possible that successfully imported resources will be overwritten
             * more than once.
             *
             * The import operation is idempotent unless the input data contains multiple
             * valid resources with the same ID but different contents. In that case,
             * after the import completes, the store will contain exactly one resource
             * with that ID but there is no ordering guarantee on which version of the
             * contents it will have. The operation result counters do not count
             * duplicate IDs as an error and will count one success for each resource in
             * the input, which might result in a success count larger than the number
             * of resources in the FHIR store. This often occurs when importing data
             * organized in bundles produced by Patient-everything
             * where each bundle contains its own copy of a resource such as Practitioner
             * that might be referred to by many patients.
             *
             * If some resources fail to import, for example due to parsing errors,
             * successfully imported resources are not rolled back.
             *
             * The location and format of the input data is specified by the parameters
             * below. Note that if no format is specified, this method assumes the
             * `BUNDLE` format. When using the `BUNDLE` format this method ignores the
             * `Bundle.type` field, except that `history` bundles are rejected, and does
             * not apply any of the bundle processing semantics for batch or transaction
             * bundles. Unlike in ExecuteBundle, transaction bundles are not executed
             * as a single transaction and bundle-internal references are not rewritten.
             * The bundle is treated as a collection of resources to be written as
             * provided in `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As
             * an example, this allows the import of `searchset` bundles produced by a
             * FHIR search or
             * Patient-everything operation.
             *
             * This method returns an Operation that can
             * be used to track the status of the import by calling
             * GetOperation.
             *
             * Immediate fatal errors appear in the
             * error field, errors are also logged
             * to Stackdriver (see [Viewing
             * logs](/healthcare/docs/how-tos/stackdriver-logging)). Otherwise, when the
             * operation finishes, a detailed response of type ImportResourcesResponse
             * is returned in the response field.
             * The metadata field type for this
             * operation is OperationMetadata.
             */
            import(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The name of the FHIR store to import FHIR resources to. The name should be
                 * in the format of
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ImportResourcesRequest;
            }): Request<Operation>;
            import(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The name of the FHIR store to import FHIR resources to. The name should be
                 * in the format of
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ImportResourcesRequest): Request<Operation>;
            /** Lists the FHIR stores in the given dataset. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Restricts stores returned to those matching a filter. Syntax:
                 * https://cloud.google.com/appengine/docs/standard/python/search/query_strings
                 * Only filtering on labels is supported, for example `labels.key=value`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Limit on the number of FHIR stores to return in a single response.  If zero
                 * the default page size of 100 is used.
                 */
                pageSize?: number;
                /** The next_page_token value returned from the previous List request, if any. */
                pageToken?: string;
                /** Name of the dataset. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListFhirStoresResponse>;
            /** Updates the configuration of the specified FHIR store. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Output only. Resource name of the FHIR store, of the form
                 * `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The update mask applies to the resource. For the `FieldMask` definition,
                 * see
                 * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: FhirStore;
            }): Request<FhirStore>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Output only. Resource name of the FHIR store, of the form
                 * `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The update mask applies to the resource. For the `FieldMask` definition,
                 * see
                 * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: FhirStore): Request<FhirStore>;
            /**
             * Sets the access control policy on the specified resource. Replaces any
             * existing policy.
             *
             * Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being specified.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns permissions that a caller has on the specified resource.
             * If the resource does not exist, this will return an empty set of
             * permissions, not a NOT_FOUND error.
             *
             * Note: This operation is designed to be used for building permission-aware
             * UIs and command-line tools, not for authorization checking. This operation
             * may "fail open" without warning.
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            fhir: FhirResource;
        }
        interface MessagesResource {
            /**
             * Creates a message and sends a notification to the Cloud Pub/Sub topic. If
             * configured, the MLLP adapter listens to messages created by this method and
             * sends those back to the hospital. A successful response indicates the
             * message has been persisted to storage and a Cloud Pub/Sub notification has
             * been sent. Sending to the hospital by the MLLP adapter happens
             * asynchronously.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the dataset this message belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CreateMessageRequest;
            }): Request<Message>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the dataset this message belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CreateMessageRequest): Request<Message>;
            /** Deletes an HL7v2 message. */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the HL7v2 message to delete. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets an HL7v2 message. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the HL7v2 message to retrieve. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * Specifies which parts of the Message resource to return in the response.
                 * When unspecified, equivalent to FULL.
                 */
                view?: string;
            }): Request<Message>;
            /**
             * Ingests a new HL7v2 message from the hospital and sends a notification to
             * the Cloud Pub/Sub topic. Return is an HL7v2 ACK message if the message was
             * successfully stored. Otherwise an error is returned.
             */
            ingest(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the HL7v2 store this message belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: IngestMessageRequest;
            }): Request<IngestMessageResponse>;
            ingest(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the HL7v2 store this message belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: IngestMessageRequest): Request<IngestMessageResponse>;
            /**
             * Lists all the messages in the given HL7v2 store with support for filtering.
             *
             * Note: HL7v2 messages are indexed asynchronously, so there might be a slight
             * delay between the time a message is created and when it can be found
             * through a filter.
             */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Restricts messages returned to those matching a filter. Syntax:
                 * https://cloud.google.com/appengine/docs/standard/python/search/query_strings
                 *
                 * Fields/functions available for filtering are:
                 *
                 * &#42;  `message_type`, from the MSH-9 segment. For example,
                 * `NOT message_type = "ADT"`.
                 * &#42;  `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in
                 * the dataset's time_zone, from the MSH-7 segment. For example,
                 * `send_date < "2017-01-02"`.
                 * &#42;  `send_time`, the timestamp when the message was sent, using the
                 * RFC3339 time format for comparisons, from the MSH-7 segment. For example,
                 * `send_time < "2017-01-02T00:00:00-05:00"`.
                 * &#42;  `send_facility`, the care center that the message came from, from the
                 * MSH-4 segment. For example, `send_facility = "ABC"`.
                 * &#42;  `PatientId(value, type)`, which matches if the message lists a patient
                 * having an ID of the given value and type in the PID-2, PID-3, or PID-4
                 * segments. For example, `PatientId("123456", "MRN")`.
                 * &#42;  `labels.x`, a string value of the label with key `x` as set using the
                 * Message.labels
                 * map. For example, `labels."priority"="high"`. The operator `:&#42;` can be used
                 * to assert the existence of a label. For example, `labels."priority":&#42;`.
                 *
                 * Limitations on conjunctions:
                 *
                 * &#42;  Negation on the patient ID function or the labels field is not
                 * supported. For example, these queries are invalid:
                 * `NOT PatientId("123456", "MRN")`, `NOT labels."tag1":&#42;`,
                 * `NOT labels."tag2"="val2"`.
                 * &#42;  Conjunction of multiple patient ID functions is not supported, for
                 * example this query is invalid:
                 * `PatientId("123456", "MRN") AND PatientId("456789", "MRN")`.
                 * &#42;  Conjunction of multiple labels fields is also not supported, for
                 * example this query is invalid: `labels."tag1":&#42; AND labels."tag2"="val2"`.
                 * &#42;  Conjunction of one patient ID function, one labels field and conditions
                 * on other fields is supported. For example, this query is valid:
                 * `PatientId("123456", "MRN") AND labels."tag1":&#42; AND message_type = "ADT"`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Orders messages returned by the specified order_by clause.
                 * Syntax: https://cloud.google.com/apis/design/design_patterns#sorting_order
                 *
                 * Fields available for ordering are:
                 *
                 * &#42;  `send_time`
                 */
                orderBy?: string;
                /**
                 * Limit on the number of messages to return in a single response.
                 * If zero the default page size of 100 is used.
                 */
                pageSize?: number;
                /** The next_page_token value returned from the previous List request, if any. */
                pageToken?: string;
                /** Name of the HL7v2 store to retrieve messages from. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * Specifies the parts of the Message to return in the response.
                 * When unspecified, equivalent to BASIC.
                 */
                view?: string;
            }): Request<ListMessagesResponse>;
            /**
             * Update the message.
             *
             * The contents of the message in Message.data and data extracted from
             * the contents such as Message.create_time cannot be altered. Only the
             * Message.labels field is allowed to be updated. The labels in the
             * request are merged with the existing set of labels. Existing labels with
             * the same keys are updated.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Resource name of the Message, of the form
                 * `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
                 * Assigned by the server.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The update mask applies to the resource. For the `FieldMask` definition,
                 * see
                 * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Message;
            }): Request<Message>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Resource name of the Message, of the form
                 * `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
                 * Assigned by the server.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The update mask applies to the resource. For the `FieldMask` definition,
                 * see
                 * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Message): Request<Message>;
        }
        interface Hl7V2StoresResource {
            /** Creates a new HL7v2 store within the parent dataset. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The ID of the HL7v2 store that is being created.
                 * The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.
                 */
                hl7V2StoreId?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the dataset this HL7v2 store belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Hl7V2Store;
            }): Request<Hl7V2Store>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The ID of the HL7v2 store that is being created.
                 * The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.
                 */
                hl7V2StoreId?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the dataset this HL7v2 store belongs to. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Hl7V2Store): Request<Hl7V2Store>;
            /**
             * Deletes the specified HL7v2 store and removes all messages that are
             * contained within it.
             */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the HL7v2 store to delete. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets the specified HL7v2 store. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the HL7v2 store to get. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Hl7V2Store>;
            /**
             * Gets the access control policy for a resource.
             * Returns an empty policy if the resource exists and does not have a policy
             * set.
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. The policy format version to be returned.
                 *
                 * Valid values are 0, 1, and 3. Requests specifying an invalid value will be
                 * rejected.
                 *
                 * Requests for policies with any conditional bindings must specify version 3.
                 * Policies without any conditional bindings may specify any valid value or
                 * leave the field unset.
                 */
                "options.requestedPolicyVersion"?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Policy>;
            /** Lists the HL7v2 stores in the given dataset. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Restricts stores returned to those matching a filter. Syntax:
                 * https://cloud.google.com/appengine/docs/standard/python/search/query_strings
                 * Only filtering on labels is supported. For example, `labels.key=value`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Limit on the number of HL7v2 stores to return in a single response.
                 * If zero the default page size of 100 is used.
                 */
                pageSize?: number;
                /** The next_page_token value returned from the previous List request, if any. */
                pageToken?: string;
                /** Name of the dataset. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListHl7V2StoresResponse>;
            /** Updates the HL7v2 store. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Output only. Resource name of the HL7v2 store, of the form
                 * `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The update mask applies to the resource. For the `FieldMask` definition,
                 * see
                 * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Hl7V2Store;
            }): Request<Hl7V2Store>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Output only. Resource name of the HL7v2 store, of the form
                 * `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The update mask applies to the resource. For the `FieldMask` definition,
                 * see
                 * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Hl7V2Store): Request<Hl7V2Store>;
            /**
             * Sets the access control policy on the specified resource. Replaces any
             * existing policy.
             *
             * Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being specified.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns permissions that a caller has on the specified resource.
             * If the resource does not exist, this will return an empty set of
             * permissions, not a NOT_FOUND error.
             *
             * Note: This operation is designed to be used for building permission-aware
             * UIs and command-line tools, not for authorization checking. This operation
             * may "fail open" without warning.
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            messages: MessagesResource;
        }
        interface OperationsResource {
            /**
             * Gets the latest state of a long-running operation.  Clients can use this
             * method to poll the operation result at intervals as recommended by the API
             * service.
             */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Lists operations that match the specified filter in the request. If the
             * server doesn't support this method, it returns `UNIMPLEMENTED`.
             *
             * NOTE: the `name` binding allows API services to override the binding
             * to use different resource name schemes, such as `users/&#42;/operations`. To
             * override the binding, API services can add a binding such as
             * `"/v1/{name=users/&#42;}/operations"` to their service configuration.
             * For backwards compatibility, the default name includes the operations
             * collection id, however overriding users must ensure the name binding
             * is the parent resource, without the operations collection id.
             */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation's parent resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListOperationsResponse>;
        }
        interface DatasetsResource {
            /**
             * Creates a new health dataset. Results are returned through the
             * Operation interface which returns either an
             * `Operation.response` which contains a Dataset or
             * `Operation.error`. The metadata
             * field type is OperationMetadata.
             * A Google Cloud Platform project can contain up to 500 datasets across all
             * regions.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The ID of the dataset that is being created.
                 * The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.
                 */
                datasetId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the project where the server creates the dataset. For
                 * example, `projects/{project_id}/locations/{location_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Dataset;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The ID of the dataset that is being created.
                 * The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.
                 */
                datasetId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of the project where the server creates the dataset. For
                 * example, `projects/{project_id}/locations/{location_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Dataset): Request<Operation>;
            /**
             * Creates a new dataset containing de-identified data from the source
             * dataset. The metadata field type
             * is OperationMetadata.
             * If the request is successful, the
             * response field type is
             * DeidentifySummary.
             * If errors occur,
             * error
             * details field type is
             * DeidentifyErrorDetails.
             * Errors are also logged to Stackdriver Logging. For more information,
             * see [Viewing logs](/healthcare/docs/how-tos/stackdriver-logging).
             */
            deidentify(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Source dataset resource name. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
                 */
                sourceDataset: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DeidentifyDatasetRequest;
            }): Request<Operation>;
            deidentify(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Source dataset resource name. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
                 */
                sourceDataset: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DeidentifyDatasetRequest): Request<Operation>;
            /**
             * Deletes the specified health dataset and all data contained in the dataset.
             * Deleting a dataset does not affect the sources from which the dataset was
             * imported (if any).
             */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The name of the dataset to delete. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets any metadata associated with a dataset. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The name of the dataset to read. For example,
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Dataset>;
            /**
             * Gets the access control policy for a resource.
             * Returns an empty policy if the resource exists and does not have a policy
             * set.
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. The policy format version to be returned.
                 *
                 * Valid values are 0, 1, and 3. Requests specifying an invalid value will be
                 * rejected.
                 *
                 * Requests for policies with any conditional bindings must specify version 3.
                 * Policies without any conditional bindings may specify any valid value or
                 * leave the field unset.
                 */
                "options.requestedPolicyVersion"?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Policy>;
            /** Lists the health datasets in the current project. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of items to return. Capped to 100 if not specified.
                 * May not be larger than 1000.
                 */
                pageSize?: number;
                /** The next_page_token value returned from a previous List request, if any. */
                pageToken?: string;
                /**
                 * The name of the project whose datasets should be listed.
                 * For example, `projects/{project_id}/locations/{location_id}`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListDatasetsResponse>;
            /** Updates dataset metadata. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Output only. Resource name of the dataset, of the form
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The update mask applies to the resource. For the `FieldMask` definition,
                 * see
                 * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Dataset;
            }): Request<Dataset>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Output only. Resource name of the dataset, of the form
                 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The update mask applies to the resource. For the `FieldMask` definition,
                 * see
                 * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Dataset): Request<Dataset>;
            /**
             * Sets the access control policy on the specified resource. Replaces any
             * existing policy.
             *
             * Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being specified.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns permissions that a caller has on the specified resource.
             * If the resource does not exist, this will return an empty set of
             * permissions, not a NOT_FOUND error.
             *
             * Note: This operation is designed to be used for building permission-aware
             * UIs and command-line tools, not for authorization checking. This operation
             * may "fail open" without warning.
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested.
                 * See the operation documentation for the appropriate value for this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            annotationStores: AnnotationStoresResource;
            dicomStores: DicomStoresResource;
            fhirStores: FhirStoresResource;
            hl7V2Stores: Hl7V2StoresResource;
            operations: OperationsResource;
        }
        interface LocationsResource {
            /** Gets information about a location. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Resource name for the location. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Location>;
            /** Lists information about the supported locations for this service. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource that owns the locations collection, if applicable. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListLocationsResponse>;
            datasets: DatasetsResource;
        }
        interface ProjectsResource {
            locations: LocationsResource;
        }

        const projects: ProjectsResource;
    }
}
